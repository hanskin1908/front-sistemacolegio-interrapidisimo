{"ast":null,"code":"import { throwError } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport { environment } from '../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class StudentService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = `${environment.apiUrl}/Estudiantes`;\n  }\n  getStudents() {\n    return this.http.get(this.apiUrl).pipe(map(response => {\n      if (!response.exito) {\n        throw new Error(response.mensaje || 'Error al obtener estudiantes');\n      }\n      return response.data.map(dto => this.mapEstudianteDtoToStudent(dto));\n    }), catchError(this.handleError));\n  }\n  getStudent(id) {\n    return this.http.get(`${this.apiUrl}/${id}`).pipe(map(response => {\n      if (!response.exito) {\n        throw new Error(response.mensaje || 'Error al obtener estudiante');\n      }\n      return this.mapEstudianteDtoToStudent(response.data);\n    }), catchError(this.handleError));\n  }\n  createStudent(student) {\n    const estudianteDto = this.mapStudentToEstudianteDto(student);\n    return this.http.post(this.apiUrl, estudianteDto).pipe(map(response => {\n      if (!response.exito) {\n        throw new Error(response.mensaje || 'Error al crear estudiante');\n      }\n      return this.mapEstudianteDtoToStudent(response.data);\n    }), catchError(this.handleError));\n  }\n  updateStudent(student) {\n    const estudianteDto = this.mapStudentToEstudianteDto(student);\n    return this.http.put(`${this.apiUrl}/${student.id}`, estudianteDto).pipe(map(response => {\n      if (!response.exito) {\n        throw new Error(response.mensaje || 'Error al actualizar estudiante');\n      }\n      return this.mapEstudianteDtoToStudent(response.data);\n    }), catchError(this.handleError));\n  }\n  deleteStudent(id) {\n    return this.http.delete(`${this.apiUrl}/${id}`).pipe(map(response => {\n      if (!response.exito) {\n        throw new Error(response.mensaje || 'Error al eliminar estudiante');\n      }\n      return response.data;\n    }), catchError(this.handleError));\n  }\n  getStudentRegistrations(id) {\n    return this.http.get(`${this.apiUrl}/${id}`).pipe(map(response => {\n      if (!response.exito) {\n        throw new Error(response.mensaje || 'Error al obtener registros del estudiante');\n      }\n      return response.data.registros.map(dto => this.mapRegistroDtoToRegistration(dto));\n    }), catchError(this.handleError));\n  }\n  mapEstudianteDtoToStudent(dto) {\n    return {\n      id: dto.id,\n      name: dto.nombre,\n      email: dto.email,\n      studentId: dto.matricula\n    };\n  }\n  mapStudentToEstudianteDto(student) {\n    return {\n      id: student.id || 0,\n      nombre: student.name,\n      email: student.email,\n      matricula: student.studentId,\n      registros: []\n    };\n  }\n  mapRegistroDtoToRegistration(dto) {\n    return {\n      id: dto.id,\n      studentId: dto.estudianteId,\n      subjectId: dto.materiaId,\n      registrationDate: new Date(dto.fechaRegistro)\n    };\n  }\n  handleError(error) {\n    let errorMessage = 'An unknown error occurred!';\n    if (error.error instanceof ErrorEvent) {\n      // Client-side error\n      errorMessage = `Error: ${error.error.message}`;\n    } else if (error.error && error.error.message) {\n      // Server-side error with message\n      errorMessage = error.error.message;\n    } else if (error.status) {\n      // HTTP error\n      errorMessage = `Error ${error.status}: ${error.statusText}`;\n    }\n    return throwError(() => new Error(errorMessage));\n  }\n  static {\n    this.ɵfac = function StudentService_Factory(t) {\n      return new (t || StudentService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: StudentService,\n      factory: StudentService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"mappings":"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","names":["throwError","catchError","map","environment","StudentService","constructor","http","apiUrl","getStudents","get","pipe","response","exito","Error","mensaje","data","dto","mapEstudianteDtoToStudent","handleError","getStudent","id","createStudent","student","estudianteDto","mapStudentToEstudianteDto","post","updateStudent","put","deleteStudent","delete","getStudentRegistrations","registros","mapRegistroDtoToRegistration","name","nombre","email","studentId","matricula","estudianteId","subjectId","materiaId","registrationDate","Date","fechaRegistro","error","errorMessage","ErrorEvent","message","status","statusText","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\hansk\\Videos\\frontendsistemacolegio.interrapidisi\\frontendsistemacolegio.interrapidisi\\src\\app\\services\\student.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport { Student } from '../models/student.model';\nimport { Registration } from '../models/registration.model';\nimport { environment } from '../../environments/environment';\n\n// Interfaces para manejar la respuesta del backend\ninterface ApiResponse<T> {\n  exito: boolean;\n  mensaje: string;\n  errores: string[];\n  data: T;\n}\n\ninterface EstudianteDto {\n  id: number;\n  nombre: string;\n  email: string;\n  matricula: string;\n  registros: RegistroDto[];\n}\n\ninterface RegistroDto {\n  id: number;\n  estudianteId: number;\n  nombreEstudiante: string;\n  materiaId: number;\n  nombreMateria: string;\n  fechaRegistro: Date;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class StudentService {\n  private apiUrl = `${environment.apiUrl}/Estudiantes`;\n\n  constructor(private http: HttpClient) { }\n\n  getStudents(): Observable<Student[]> {\n    return this.http.get<ApiResponse<EstudianteDto[]>>(this.apiUrl)\n      .pipe(\n        map(response => {\n          if (!response.exito) {\n            throw new Error(response.mensaje || 'Error al obtener estudiantes');\n          }\n          return response.data.map(dto => this.mapEstudianteDtoToStudent(dto));\n        }),\n        catchError(this.handleError)\n      );\n  }\n\n  getStudent(id: number): Observable<Student> {\n    return this.http.get<ApiResponse<EstudianteDto>>(`${this.apiUrl}/${id}`)\n      .pipe(\n        map(response => {\n          if (!response.exito) {\n            throw new Error(response.mensaje || 'Error al obtener estudiante');\n          }\n          return this.mapEstudianteDtoToStudent(response.data);\n        }),\n        catchError(this.handleError)\n      );\n  }\n\n  createStudent(student: Student): Observable<Student> {\n    const estudianteDto = this.mapStudentToEstudianteDto(student);\n    return this.http.post<ApiResponse<EstudianteDto>>(this.apiUrl, estudianteDto)\n      .pipe(\n        map(response => {\n          if (!response.exito) {\n            throw new Error(response.mensaje || 'Error al crear estudiante');\n          }\n          return this.mapEstudianteDtoToStudent(response.data);\n        }),\n        catchError(this.handleError)\n      );\n  }\n\n  updateStudent(student: Student): Observable<Student> {\n    const estudianteDto = this.mapStudentToEstudianteDto(student);\n    return this.http.put<ApiResponse<EstudianteDto>>(`${this.apiUrl}/${student.id}`, estudianteDto)\n      .pipe(\n        map(response => {\n          if (!response.exito) {\n            throw new Error(response.mensaje || 'Error al actualizar estudiante');\n          }\n          return this.mapEstudianteDtoToStudent(response.data);\n        }),\n        catchError(this.handleError)\n      );\n  }\n\n  deleteStudent(id: number): Observable<boolean> {\n    return this.http.delete<ApiResponse<boolean>>(`${this.apiUrl}/${id}`)\n      .pipe(\n        map(response => {\n          if (!response.exito) {\n            throw new Error(response.mensaje || 'Error al eliminar estudiante');\n          }\n          return response.data;\n        }),\n        catchError(this.handleError)\n      );\n  }\n\n  getStudentRegistrations(id: number): Observable<Registration[]> {\n    return this.http.get<ApiResponse<EstudianteDto>>(`${this.apiUrl}/${id}`)\n      .pipe(\n        map(response => {\n          if (!response.exito) {\n            throw new Error(response.mensaje || 'Error al obtener registros del estudiante');\n          }\n          return response.data.registros.map(dto => this.mapRegistroDtoToRegistration(dto));\n        }),\n        catchError(this.handleError)\n      );\n  }\n\n  private mapEstudianteDtoToStudent(dto: EstudianteDto): Student {\n    return {\n      id: dto.id,\n      name: dto.nombre,\n      email: dto.email,\n      studentId: dto.matricula\n    };\n  }\n\n  private mapStudentToEstudianteDto(student: Student): EstudianteDto {\n    return {\n      id: student.id || 0,\n      nombre: student.name,\n      email: student.email,\n      matricula: student.studentId,\n      registros: []\n    };\n  }\n\n  private mapRegistroDtoToRegistration(dto: RegistroDto): Registration {\n    return {\n      id: dto.id,\n      studentId: dto.estudianteId,\n      subjectId: dto.materiaId,\n      registrationDate: new Date(dto.fechaRegistro)\n    };\n  }\n\n  private handleError(error: any) {\n    let errorMessage = 'An unknown error occurred!';\n    if (error.error instanceof ErrorEvent) {\n      // Client-side error\n      errorMessage = `Error: ${error.error.message}`;\n    } else if (error.error && error.error.message) {\n      // Server-side error with message\n      errorMessage = error.error.message;\n    } else if (error.status) {\n      // HTTP error\n      errorMessage = `Error ${error.status}: ${error.statusText}`;\n    }\n    return throwError(() => new Error(errorMessage));\n  }\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}