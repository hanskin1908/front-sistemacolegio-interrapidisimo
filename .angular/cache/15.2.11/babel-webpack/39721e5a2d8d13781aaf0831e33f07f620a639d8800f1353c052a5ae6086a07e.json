{"ast":null,"code":"import { throwError } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport { environment } from '../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class MateriaServicio {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = `${environment.apiUrl}/Materias`;\n    this.registrosUrl = `${environment.apiUrl}/Registros`;\n  }\n  crearObjetoProfesor(id, nombreCompleto) {\n    const [nombre, apellido] = nombreCompleto.split(' ').length > 1 ? [nombreCompleto.split(' ')[0], nombreCompleto.split(' ').slice(1).join(' ')] : [nombreCompleto, ''];\n    return {\n      id: id,\n      nombre: nombre,\n      apellido: apellido,\n      email: '',\n      departamento: '',\n      nombreCompleto: nombreCompleto\n    };\n  }\n  obtenerMateriasEstudiante(estudianteId) {\n    return this.http.get(`${this.apiUrl}/estudiante/${estudianteId}`).pipe(map(respuesta => {\n      if (respuesta && respuesta.exito && respuesta.data) {\n        return respuesta.data.map(item => ({\n          id: item.id,\n          nombre: item.nombre,\n          codigo: item.codigo,\n          creditos: item.creditos,\n          profesorId: item.profesorId || 0,\n          profesor: item.nombreProfesor ? this.crearObjetoProfesor(item.profesorId, item.nombreProfesor) : undefined\n        }));\n      }\n      return [];\n    }), catchError(this.manejarError));\n  }\n  obtenerMaterias(esProfesor = false) {\n    if (esProfesor) {\n      return this.http.get(`${this.apiUrl}/profesor-materias`).pipe(map(respuesta => {\n        if (respuesta && respuesta.exito && respuesta.data && respuesta.data.materias) {\n          return respuesta.data.materias.map(item => ({\n            id: item.id,\n            nombre: item.nombre,\n            codigo: item.codigo,\n            creditos: item.creditos,\n            profesorId: item.profesorId || 0,\n            profesor: item.nombreProfesor ? this.crearObjetoProfesor(item.profesorId, item.nombreProfesor) : undefined\n          }));\n        }\n        return [];\n      }), catchError(this.manejarError));\n    }\n    return this.http.get(this.apiUrl).pipe(map(respuesta => {\n      if (respuesta && respuesta.exito && respuesta.data) {\n        return respuesta.data.map(item => ({\n          id: item.id,\n          nombre: item.nombre,\n          codigo: item.codigo,\n          creditos: item.creditos,\n          profesorId: item.profesorId || 0,\n          profesor: item.nombreProfesor ? this.crearObjetoProfesor(item.profesorId, item.nombreProfesor) : undefined\n        }));\n      }\n      return [];\n    }), catchError(this.manejarError));\n  }\n  obtenerMateria(id) {\n    return this.http.get(`${this.apiUrl}/${id}`).pipe(map(respuesta => {\n      if (respuesta && respuesta.exito && respuesta.data) {\n        const item = respuesta.data;\n        return {\n          id: item.id,\n          nombre: item.nombre,\n          codigo: item.codigo,\n          creditos: item.creditos,\n          profesorId: item.profesorId || 0,\n          profesor: item.nombreProfesor ? this.crearObjetoProfesor(item.profesorId, item.nombreProfesor) : undefined\n        };\n      }\n      throw new Error('Materia no encontrada');\n    }), catchError(this.manejarError));\n  }\n  obtenerMateriasPorIds(ids) {\n    const queryParams = ids.map(id => `ids=${id}`).join('&');\n    return this.http.get(`${this.apiUrl}/multiple?${queryParams}`).pipe(map(respuesta => {\n      if (respuesta && respuesta.exito && respuesta.data) {\n        return respuesta.data.map(item => ({\n          id: item.id,\n          nombre: item.nombre,\n          codigo: item.codigo,\n          creditos: item.creditos,\n          profesorId: item.profesorId || 0,\n          profesor: item.nombreProfesor ? this.crearObjetoProfesor(item.profesorId, item.nombreProfesor) : undefined\n        }));\n      }\n      return [];\n    }), catchError(this.manejarError));\n  }\n  obtenerEstudiantesPorMateria(id, esProfesor = false) {\n    if (esProfesor) {\n      return this.http.get(`${environment.apiUrl}/Estudiantes/por-materia-profesor/${id}`, {\n        observe: 'response'\n      }).pipe(map(respuesta => {\n        if (respuesta.body && respuesta.body.exito && respuesta.body.data) {\n          return respuesta.body.data.map(item => ({\n            id: item.id,\n            nombre: item.nombre,\n            matricula: item.matricula || '',\n            email: item.email || ''\n          }));\n        }\n        return [];\n      }), catchError(error => {\n        if (error.status === 403) {\n          return throwError(() => new Error('NO_PERMISOS'));\n        } else if (error.status === 404) {\n          return throwError(() => new Error('NO_ENCONTRADO'));\n        }\n        return this.manejarError(error);\n      }));\n    }\n    return this.http.get(`${environment.apiUrl}/Registros/materia/${id}`).pipe(map(respuesta => {\n      if (respuesta && respuesta.exito && respuesta.data) {\n        return respuesta.data.map(item => ({\n          id: item.estudianteId,\n          nombre: item.nombreEstudiante,\n          matricula: '',\n          email: ''\n        }));\n      }\n      return [];\n    }), catchError(this.manejarError));\n  }\n  crearAsignatura(materiaDto) {\n    return this.http.post(this.apiUrl, materiaDto).pipe(catchError(this.manejarError));\n  }\n  actualizarAsignatura(id, materiaDto) {\n    return this.http.put(`${this.apiUrl}/${id}`, materiaDto).pipe(catchError(this.manejarError));\n  }\n  eliminarAsignatura(id) {\n    return this.http.delete(`${this.apiUrl}/${id}`).pipe(catchError(this.manejarError));\n  }\n  manejarError(error) {\n    let mensajeError = '¡Ocurrió un error desconocido!';\n    if (error.error instanceof ErrorEvent) {\n      mensajeError = `Error: ${error.error.message}`;\n    } else if (error.error && error.error.message) {\n      mensajeError = error.error.message;\n    } else if (error.status) {\n      mensajeError = `Error ${error.status}: ${error.statusText}`;\n    }\n    return throwError(() => new Error(mensajeError));\n  }\n  static {\n    this.ɵfac = function MateriaServicio_Factory(t) {\n      return new (t || MateriaServicio)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: MateriaServicio,\n      factory: MateriaServicio.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"mappings":"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","names":["throwError","catchError","map","environment","MateriaServicio","constructor","http","apiUrl","crearObjetoProfesor","id","nombreCompleto","nombre","apellido","split","length","slice","join","email","departamento","obtenerMateriasEstudiante","estudianteId","get","pipe","respuesta","exito","data","item","codigo","creditos","profesorId","profesor","nombreProfesor","undefined","manejarError","obtenerMaterias","esProfesor","materias","obtenerMateria","Error","obtenerMateriasPorIds","ids","queryParams","obtenerEstudiantesPorMateria","observe","body","matricula","error","status","nombreEstudiante","crearAsignatura","materiaDto","post","actualizarAsignatura","put","eliminarAsignatura","delete","mensajeError","ErrorEvent","message","statusText","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\hansk\\Videos\\frontendsistemacolegio.interrapidisi\\frontendsistemacolegio.interrapidisi\\src\\app\\servicios\\materia.servicio.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport { Materia } from '../modelos/materia.modelo';\nimport { Estudiante } from '../modelos/estudiante.modelo';\nimport { Profesor } from '../modelos/profesor.modelo';\nimport { environment } from '../../environments/environment';\n\ninterface MateriaDto {\n  nombre: string;\n  codigo: string;\n  creditos: number;\n  profesorId: number | null;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class MateriaServicio {\n  private apiUrl = `${environment.apiUrl}/Materias`;\n  private registrosUrl = `${environment.apiUrl}/Registros`;\n\n  constructor(private http: HttpClient) { }\n\n  private crearObjetoProfesor(id: any, nombreCompleto: string): Profesor {\n    const [nombre, apellido] = nombreCompleto.split(' ').length > 1 ?\n      [nombreCompleto.split(' ')[0], nombreCompleto.split(' ').slice(1).join(' ')] :\n      [nombreCompleto, ''];\n    return {\n      id: id,\n      nombre: nombre,\n      apellido: apellido,\n      email: '',\n      departamento: '',\n      nombreCompleto: nombreCompleto\n    };\n  }\n\n  obtenerMateriasEstudiante(estudianteId: number): Observable<Materia[]> {\n    return this.http.get<any>(`${this.apiUrl}/estudiante/${estudianteId}`)\n      .pipe(\n        map(respuesta => {\n          if (respuesta && respuesta.exito && respuesta.data) {\n            return respuesta.data.map((item: any) => ({\n              id: item.id,\n              nombre: item.nombre,\n              codigo: item.codigo,\n              creditos: item.creditos,\n              profesorId: item.profesorId || 0,\n              profesor: item.nombreProfesor ?\n                this.crearObjetoProfesor(item.profesorId, item.nombreProfesor) :\n                undefined\n            }));\n          }\n          return [];\n        }),\n        catchError(this.manejarError)\n      );\n  }\n\n  obtenerMaterias(esProfesor: boolean = false): Observable<Materia[]> {\n    if (esProfesor) {\n      return this.http.get<any>(`${this.apiUrl}/profesor-materias`).pipe(\n        map(respuesta => {\n          if (respuesta && respuesta.exito && respuesta.data && respuesta.data.materias) {\n            return respuesta.data.materias.map((item: any) => ({\n              id: item.id,\n              nombre: item.nombre,\n              codigo: item.codigo,\n              creditos: item.creditos,\n              profesorId: item.profesorId || 0,\n              profesor: item.nombreProfesor ?\n                this.crearObjetoProfesor(item.profesorId, item.nombreProfesor) :\n                undefined\n            }));\n          }\n          return [];\n        }),\n        catchError(this.manejarError)\n      );\n    }\n    return this.http.get<any>(this.apiUrl)\n      .pipe(\n        map(respuesta => {\n          if (respuesta && respuesta.exito && respuesta.data) {\n            return respuesta.data.map((item: any) => ({\n              id: item.id,\n              nombre: item.nombre,\n              codigo: item.codigo,\n              creditos: item.creditos,\n              profesorId: item.profesorId || 0,\n              profesor: item.nombreProfesor ?\n                this.crearObjetoProfesor(item.profesorId, item.nombreProfesor) :\n                undefined\n            }));\n          }\n          return [];\n        }),\n        catchError(this.manejarError)\n      );\n  }\n\n  obtenerMateria(id: number): Observable<Materia> {\n    return this.http.get<any>(`${this.apiUrl}/${id}`)\n      .pipe(\n        map(respuesta => {\n          if (respuesta && respuesta.exito && respuesta.data) {\n            const item = respuesta.data;\n            return {\n              id: item.id,\n              nombre: item.nombre,\n              codigo: item.codigo,\n              creditos: item.creditos,\n              profesorId: item.profesorId || 0,\n              profesor: item.nombreProfesor ?\n                this.crearObjetoProfesor(item.profesorId, item.nombreProfesor) :\n                undefined\n            };\n          }\n          throw new Error('Materia no encontrada');\n        }),\n        catchError(this.manejarError)\n      );\n  }\n\n  obtenerMateriasPorIds(ids: number[]): Observable<Materia[]> {\n    const queryParams = ids.map(id => `ids=${id}`).join('&');\n    return this.http.get<any>(`${this.apiUrl}/multiple?${queryParams}`)\n      .pipe(\n        map(respuesta => {\n          if (respuesta && respuesta.exito && respuesta.data) {\n            return respuesta.data.map((item: any) => ({\n              id: item.id,\n              nombre: item.nombre,\n              codigo: item.codigo,\n              creditos: item.creditos,\n              profesorId: item.profesorId || 0,\n              profesor: item.nombreProfesor ?\n                this.crearObjetoProfesor(item.profesorId, item.nombreProfesor) :\n                undefined\n            }));\n          }\n          return [];\n        }),\n        catchError(this.manejarError)\n      );\n  }\n\n  obtenerEstudiantesPorMateria(id: number, esProfesor: boolean = false): Observable<Estudiante[]> {\n    if (esProfesor) {\n      return this.http.get<any>(`${environment.apiUrl}/Estudiantes/por-materia-profesor/${id}`, { observe: 'response' })\n        .pipe(\n          map(respuesta => {\n            if (respuesta.body && respuesta.body.exito && respuesta.body.data) {\n              return respuesta.body.data.map((item: any) => ({\n                id: item.id,\n                nombre: item.nombre,\n                matricula: item.matricula || '',\n                email: item.email || ''\n              }));\n            }\n            return [];\n          }),\n          catchError((error) => {\n            if (error.status === 403) {\n              return throwError(() => new Error('NO_PERMISOS'));\n            } else if (error.status === 404) {\n              return throwError(() => new Error('NO_ENCONTRADO'));\n            }\n            return this.manejarError(error);\n          })\n        );\n    }\n    return this.http.get<any>(`${environment.apiUrl}/Registros/materia/${id}`)\n      .pipe(\n        map(respuesta => {\n          if (respuesta && respuesta.exito && respuesta.data) {\n            return respuesta.data.map((item: any) => ({\n              id: item.estudianteId,\n              nombre: item.nombreEstudiante,\n              matricula: '',\n              email: '',\n            }));\n          }\n          return [];\n        }),\n        catchError(this.manejarError)\n      );\n  }\n\n  crearAsignatura(materiaDto: MateriaDto): Observable<any> {\n    return this.http.post<any>(this.apiUrl, materiaDto)\n      .pipe(\n        catchError(this.manejarError)\n      );\n  }\n\n  actualizarAsignatura(id: number, materiaDto: MateriaDto): Observable<any> {\n    return this.http.put<any>(`${this.apiUrl}/${id}`, materiaDto)\n      .pipe(\n        catchError(this.manejarError)\n      );\n  }\n\n  eliminarAsignatura(id: number): Observable<any> {\n    return this.http.delete<any>(`${this.apiUrl}/${id}`)\n      .pipe(\n        catchError(this.manejarError)\n      );\n  }\n\n  private manejarError(error: any) {\n    let mensajeError = '¡Ocurrió un error desconocido!';\n    if (error.error instanceof ErrorEvent) {\n      mensajeError = `Error: ${error.error.message}`;\n    } else if (error.error && error.error.message) {\n      mensajeError = error.error.message;\n    } else if (error.status) {\n      mensajeError = `Error ${error.status}: ${error.statusText}`;\n    }\n    return throwError(() => new Error(mensajeError));\n  }\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}