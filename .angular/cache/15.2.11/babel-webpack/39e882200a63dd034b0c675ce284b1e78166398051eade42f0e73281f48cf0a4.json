{"ast":null,"code":"\"use strict\";\n\n// COMPONENTE COMENTADO POR MIGRACIÓN A ESPAÑOL\n/*\r\nimport { Component, OnInit } from '@angular/core';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { Student } from '../../models/student.model';\r\nimport { Registration } from '../../models/registration.model';\r\nimport { Subject } from '../../models/subject.model';\r\nimport { StudentService } from '../../services/student.service';\r\nimport { SubjectService } from '../../services/subject.service';\r\nimport { RegistrationService } from '../../services/registration.service';\r\nimport { AuthService } from '../../services/auth.service';\r\n\r\n@Component({\r\n  selector: 'app-student-detail',\r\n  templateUrl: './student-detail.component.html',\r\n  styleUrls: ['./student-detail.component.css']\r\n})\r\nexport class StudentDetailComponent implements OnInit {\r\n  student: Student | null = null;\r\n  registrations: Registration[] = [];\r\n  availableSubjects: Subject[] = [];\r\n  selectedSubjectId: number | null = null;\r\n  loading = false;\r\n  error = '';\r\n  registrationError = '';\r\n  isAdmin = false;\r\n  isCurrentUser = false;\r\n\r\n  constructor(\r\n    private route: ActivatedRoute,\r\n    private router: Router,\r\n    private studentService: StudentService,\r\n    private subjectService: SubjectService,\r\n    private registrationService: RegistrationService,\r\n    private authService: AuthService\r\n  ) { }\r\n\r\n  ngOnInit(): void {\r\n    this.isAdmin = this.authService.isAdmin();\r\n    \r\n    this.route.params.subscribe(params => {\r\n      const id = +params['id'];\r\n      this.loadStudent(id);\r\n      this.loadRegistrations(id);\r\n      \r\n      // Check if current user is viewing their own profile\r\n      const currentUserId = this.authService.getCurrentUserId();\r\n      this.isCurrentUser = currentUserId === id;\r\n    });\r\n    this.loadSubjects();\r\n  }\r\n\r\n  loadStudent(id: number): void {\r\n    this.loading = true;\r\n    this.studentService.getStudent(id).subscribe({\r\n      next: (data) => {\r\n        this.student = data;\r\n        this.loading = false;\r\n      },\r\n      error: (err) => {\r\n        this.error = 'Error al cargar datos del estudiante';\r\n        this.loading = false;\r\n        console.error(err);\r\n      }\r\n    });\r\n  }\r\n\r\n  loadRegistrations(studentId: number): void {\r\n    this.loading = true;\r\n    this.studentService.getStudentRegistrations(studentId).subscribe({\r\n      next: (data) => {\r\n        this.registrations = data;\r\n        this.loading = false;\r\n        this.updateAvailableSubjects();\r\n      },\r\n      error: (err) => {\r\n        this.error = 'Error al cargar registros del estudiante';\r\n        this.loading = false;\r\n        console.error(err);\r\n      }\r\n    });\r\n  }\r\n\r\n  loadSubjects(): void {\r\n    this.subjectService.getSubjects().subscribe({\r\n      next: (data) => {\r\n        this.availableSubjects = data;\r\n        this.updateAvailableSubjects();\r\n      },\r\n      error: (err) => {\r\n        console.error('Error al cargar materias', err);\r\n      }\r\n    });\r\n  }\r\n\r\n  updateAvailableSubjects(): void {\r\n    if (this.registrations.length > 0 && this.availableSubjects.length > 0) {\r\n      // Filtrar materias ya registradas\r\n      const registeredSubjectIds = this.registrations.map(r => r.subjectId);\r\n      \r\n      // Filtrar materias con profesores que ya tienen clases con el estudiante\r\n      const registeredProfessorIds = this.registrations\r\n        .map(r => this.availableSubjects.find(s => s.id === r.subjectId)?.professorId)\r\n        .filter(id => id !== undefined) as number[];\r\n      \r\n      this.availableSubjects = this.availableSubjects.filter(subject =>\r\n        !registeredSubjectIds.includes(subject.id) &&\r\n        !registeredProfessorIds.includes(subject.professorId)\r\n      );\r\n    }\r\n  }\r\n\r\n  registerSubject(): void {\r\n    if (!this.student || !this.selectedSubjectId) {\r\n      this.registrationError = 'Debe seleccionar una materia';\r\n      return;\r\n    }\r\n\r\n    if (this.registrations.length >= 3) {\r\n      this.registrationError = 'Ya ha registrado el máximo de 3 materias permitidas';\r\n      return;\r\n    }\r\n\r\n    this.loading = true;\r\n    this.registrationError = '';\r\n\r\n    this.registrationService.registerSubject({\r\n      studentId: this.student.id!,\r\n      subjectId: this.selectedSubjectId\r\n    }).subscribe({\r\n      next: () => {\r\n        this.loading = false;\r\n        this.loadRegistrations(this.student!.id!);\r\n        this.selectedSubjectId = null;\r\n      },\r\n      error: (err) => {\r\n        this.registrationError = err.message || 'Error al registrar materia';\r\n        this.loading = false;\r\n        console.error(err);\r\n      }\r\n    });\r\n  }\r\n\r\n  unregisterSubject(registrationId: number): void {\r\n    if (confirm('¿Está seguro de eliminar este registro?')) {\r\n      this.loading = true;\r\n      this.registrationService.unregisterSubject(registrationId).subscribe({\r\n        next: () => {\r\n          this.loading = false;\r\n          this.loadRegistrations(this.student!.id!);\r\n        },\r\n        error: (err) => {\r\n          this.error = 'Error al eliminar registro';\r\n          this.loading = false;\r\n          console.error(err);\r\n        }\r\n      });\r\n    }\r\n  }\r\n}\r\n*/","map":{"version":3,"mappings":";;AAAA;AACA","names":[],"sourceRoot":"","sources":["C:\\Users\\hansk\\Videos\\frontendsistemacolegio.interrapidisi\\frontendsistemacolegio.interrapidisi\\src\\app\\components\\student-detail\\student-detail.component.ts"],"sourcesContent":["// COMPONENTE COMENTADO POR MIGRACIÓN A ESPAÑOL\n/*\nimport { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { Student } from '../../models/student.model';\nimport { Registration } from '../../models/registration.model';\nimport { Subject } from '../../models/subject.model';\nimport { StudentService } from '../../services/student.service';\nimport { SubjectService } from '../../services/subject.service';\nimport { RegistrationService } from '../../services/registration.service';\nimport { AuthService } from '../../services/auth.service';\n\n@Component({\n  selector: 'app-student-detail',\n  templateUrl: './student-detail.component.html',\n  styleUrls: ['./student-detail.component.css']\n})\nexport class StudentDetailComponent implements OnInit {\n  student: Student | null = null;\n  registrations: Registration[] = [];\n  availableSubjects: Subject[] = [];\n  selectedSubjectId: number | null = null;\n  loading = false;\n  error = '';\n  registrationError = '';\n  isAdmin = false;\n  isCurrentUser = false;\n\n  constructor(\n    private route: ActivatedRoute,\n    private router: Router,\n    private studentService: StudentService,\n    private subjectService: SubjectService,\n    private registrationService: RegistrationService,\n    private authService: AuthService\n  ) { }\n\n  ngOnInit(): void {\n    this.isAdmin = this.authService.isAdmin();\n    \n    this.route.params.subscribe(params => {\n      const id = +params['id'];\n      this.loadStudent(id);\n      this.loadRegistrations(id);\n      \n      // Check if current user is viewing their own profile\n      const currentUserId = this.authService.getCurrentUserId();\n      this.isCurrentUser = currentUserId === id;\n    });\n    this.loadSubjects();\n  }\n\n  loadStudent(id: number): void {\n    this.loading = true;\n    this.studentService.getStudent(id).subscribe({\n      next: (data) => {\n        this.student = data;\n        this.loading = false;\n      },\n      error: (err) => {\n        this.error = 'Error al cargar datos del estudiante';\n        this.loading = false;\n        console.error(err);\n      }\n    });\n  }\n\n  loadRegistrations(studentId: number): void {\n    this.loading = true;\n    this.studentService.getStudentRegistrations(studentId).subscribe({\n      next: (data) => {\n        this.registrations = data;\n        this.loading = false;\n        this.updateAvailableSubjects();\n      },\n      error: (err) => {\n        this.error = 'Error al cargar registros del estudiante';\n        this.loading = false;\n        console.error(err);\n      }\n    });\n  }\n\n  loadSubjects(): void {\n    this.subjectService.getSubjects().subscribe({\n      next: (data) => {\n        this.availableSubjects = data;\n        this.updateAvailableSubjects();\n      },\n      error: (err) => {\n        console.error('Error al cargar materias', err);\n      }\n    });\n  }\n\n  updateAvailableSubjects(): void {\n    if (this.registrations.length > 0 && this.availableSubjects.length > 0) {\n      // Filtrar materias ya registradas\n      const registeredSubjectIds = this.registrations.map(r => r.subjectId);\n      \n      // Filtrar materias con profesores que ya tienen clases con el estudiante\n      const registeredProfessorIds = this.registrations\n        .map(r => this.availableSubjects.find(s => s.id === r.subjectId)?.professorId)\n        .filter(id => id !== undefined) as number[];\n      \n      this.availableSubjects = this.availableSubjects.filter(subject => \n        !registeredSubjectIds.includes(subject.id) && \n        !registeredProfessorIds.includes(subject.professorId)\n      );\n    }\n  }\n\n  registerSubject(): void {\n    if (!this.student || !this.selectedSubjectId) {\n      this.registrationError = 'Debe seleccionar una materia';\n      return;\n    }\n\n    if (this.registrations.length >= 3) {\n      this.registrationError = 'Ya ha registrado el máximo de 3 materias permitidas';\n      return;\n    }\n\n    this.loading = true;\n    this.registrationError = '';\n\n    this.registrationService.registerSubject({\n      studentId: this.student.id!,\n      subjectId: this.selectedSubjectId\n    }).subscribe({\n      next: () => {\n        this.loading = false;\n        this.loadRegistrations(this.student!.id!);\n        this.selectedSubjectId = null;\n      },\n      error: (err) => {\n        this.registrationError = err.message || 'Error al registrar materia';\n        this.loading = false;\n        console.error(err);\n      }\n    });\n  }\n\n  unregisterSubject(registrationId: number): void {\n    if (confirm('¿Está seguro de eliminar este registro?')) {\n      this.loading = true;\n      this.registrationService.unregisterSubject(registrationId).subscribe({\n        next: () => {\n          this.loading = false;\n          this.loadRegistrations(this.student!.id!);\n        },\n        error: (err) => {\n          this.error = 'Error al eliminar registro';\n          this.loading = false;\n          console.error(err);\n        }\n      });\n    }\n  }\n}\n*/"]},"metadata":{},"sourceType":"script","externalDependencies":[]}