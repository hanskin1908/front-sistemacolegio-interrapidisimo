{"ast":null,"code":"\"use strict\";\n\n// COMPONENTE COMENTADO POR MIGRACIÓN A ESPAÑOL\n// import { Component, OnInit } from '@angular/core';\n// import { ActivatedRoute } from '@angular/router';\n// import { Subject } from '../../models/subject.model';\n// import { Student } from '../../models/student.model';\n// import { SubjectService } from '../../services/subject.service';\n// import { AuthService } from '../../services/auth.service';\n// import { RegistrationService } from '../../services/registration.service';\n// \n// @Component({\n//   selector: 'app-subject-detail',\n//   templateUrl: './subject-detail.component.html',\n//   styleUrls: ['./subject-detail.component.css']\n// })\n// export class SubjectDetailComponent implements OnInit {\n//   subject: Subject | null = null;\n//   students: Student[] = [];\n//   classmates: Student[] = [];\n//   loading = false;\n//   error = '';\n//   currentUserId: number | null = null;\n//   isStudent = false;\n//   isProfessor = false;\n// \n//   constructor(\n//     private route: ActivatedRoute,\n//     private subjectService: SubjectService,\n//     private authService: AuthService,\n//     private registrationService: RegistrationService\n//   ) { }\n// \n//   ngOnInit(): void {\n//     this.currentUserId = this.authService.getCurrentUserId();\n//     this.isStudent = this.authService.isStudent();\n//     this.isProfessor = this.authService.isProfessor && this.authService.isProfessor();\n//     this.route.params.subscribe(params => {\n//       const id = params['id'];\n//       // Validate that id is a valid number\n//       if (id && !isNaN(Number(id))) {\n//         const subjectId = Number(id);\n//         this.loadSubject(subjectId);\n//         \n//         // Solo cargar la lista de estudiantes si no es un estudiante\n//         if (!this.isStudent) {\n//           this.loadStudents(subjectId);\n//         } else if (this.currentUserId) {\n//           // Si es estudiante, cargar sus compañeros de clase\n//           this.loadClassmates(subjectId, this.currentUserId);\n//         }\n//       } else {\n//         this.error = 'ID de materia inválido';\n//       }\n//     });\n//   }\n// \n//   loadSubject(id: number): void {\n//     if (!id || isNaN(id)) {\n//       this.error = 'ID de materia invu00e1lido';\n//       return;\n//     }\n//     \n//     this.loading = true;\n//     this.subjectService.getSubject(id).subscribe({\n//       next: (data) => {\n//         this.subject = data;\n//         this.loading = false;\n//       },\n//       error: (err) => {\n//         this.error = 'Error al cargar datos de la materia';\n//         this.loading = false;\n//         console.error(err);\n//       }\n//     });\n//   }\n// \n//   loadStudents(subjectId: number): void {\n//     if (!subjectId || isNaN(subjectId)) {\n//       this.error = 'ID de materia inválido';\n//       return;\n//     }\n//     this.loading = true;\n//     this.subjectService.getStudentsBySubject(subjectId, this.isProfessor).subscribe({\n//       next: (data) => {\n//         this.students = data;\n//         this.loading = false;\n//       },\n//       error: (err) => {\n//         if (err.message === 'NO_PERMISSIONS') {\n//           this.error = 'No tienes permisos para ver los estudiantes de esta materia.';\n//         } else if (err.message === 'NOT_FOUND') {\n//           this.error = 'Materia no encontrada.';\n//         } else {\n//           this.error = 'Error al cargar estudiantes de la materia';\n//         }\n//         this.loading = false;\n//         console.error(err);\n//       }\n//     });\n//   }\n// \n//   loadClassmates(subjectId: number, studentId: number): void {\n//     if (!subjectId || isNaN(subjectId) || !studentId || isNaN(studentId)) {\n//       this.error = 'ID de materia o estudiante inválido';\n//       return;\n//     }\n//     \n//     this.loading = true;\n//     this.registrationService.getClassmates(subjectId, studentId).subscribe({\n//       next: (data) => {\n//         this.classmates = data;\n//         this.loading = false;\n//       },\n//       error: (err) => {\n//         this.error = 'Error al cargar compañeros de clase';\n//         this.loading = false;\n//         console.error(err);\n//       }\n//     });\n//   }\n// }","map":{"version":3,"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","names":[],"sourceRoot":"","sources":["C:\\Users\\hansk\\Videos\\frontendsistemacolegio.interrapidisi\\frontendsistemacolegio.interrapidisi\\src\\app\\components\\subject-detail\\subject-detail.component.ts"],"sourcesContent":["// COMPONENTE COMENTADO POR MIGRACIÓN A ESPAÑOL\n// import { Component, OnInit } from '@angular/core';\n// import { ActivatedRoute } from '@angular/router';\n// import { Subject } from '../../models/subject.model';\n// import { Student } from '../../models/student.model';\n// import { SubjectService } from '../../services/subject.service';\n// import { AuthService } from '../../services/auth.service';\n// import { RegistrationService } from '../../services/registration.service';\n// \n// @Component({\n//   selector: 'app-subject-detail',\n//   templateUrl: './subject-detail.component.html',\n//   styleUrls: ['./subject-detail.component.css']\n// })\n// export class SubjectDetailComponent implements OnInit {\n//   subject: Subject | null = null;\n//   students: Student[] = [];\n//   classmates: Student[] = [];\n//   loading = false;\n//   error = '';\n//   currentUserId: number | null = null;\n//   isStudent = false;\n//   isProfessor = false;\n// \n//   constructor(\n//     private route: ActivatedRoute,\n//     private subjectService: SubjectService,\n//     private authService: AuthService,\n//     private registrationService: RegistrationService\n//   ) { }\n// \n//   ngOnInit(): void {\n//     this.currentUserId = this.authService.getCurrentUserId();\n//     this.isStudent = this.authService.isStudent();\n//     this.isProfessor = this.authService.isProfessor && this.authService.isProfessor();\n//     this.route.params.subscribe(params => {\n//       const id = params['id'];\n//       // Validate that id is a valid number\n//       if (id && !isNaN(Number(id))) {\n//         const subjectId = Number(id);\n//         this.loadSubject(subjectId);\n//         \n//         // Solo cargar la lista de estudiantes si no es un estudiante\n//         if (!this.isStudent) {\n//           this.loadStudents(subjectId);\n//         } else if (this.currentUserId) {\n//           // Si es estudiante, cargar sus compañeros de clase\n//           this.loadClassmates(subjectId, this.currentUserId);\n//         }\n//       } else {\n//         this.error = 'ID de materia inválido';\n//       }\n//     });\n//   }\n// \n//   loadSubject(id: number): void {\n//     if (!id || isNaN(id)) {\n//       this.error = 'ID de materia invu00e1lido';\n//       return;\n//     }\n//     \n//     this.loading = true;\n//     this.subjectService.getSubject(id).subscribe({\n//       next: (data) => {\n//         this.subject = data;\n//         this.loading = false;\n//       },\n//       error: (err) => {\n//         this.error = 'Error al cargar datos de la materia';\n//         this.loading = false;\n//         console.error(err);\n//       }\n//     });\n//   }\n// \n//   loadStudents(subjectId: number): void {\n//     if (!subjectId || isNaN(subjectId)) {\n//       this.error = 'ID de materia inválido';\n//       return;\n//     }\n//     this.loading = true;\n//     this.subjectService.getStudentsBySubject(subjectId, this.isProfessor).subscribe({\n//       next: (data) => {\n//         this.students = data;\n//         this.loading = false;\n//       },\n//       error: (err) => {\n//         if (err.message === 'NO_PERMISSIONS') {\n//           this.error = 'No tienes permisos para ver los estudiantes de esta materia.';\n//         } else if (err.message === 'NOT_FOUND') {\n//           this.error = 'Materia no encontrada.';\n//         } else {\n//           this.error = 'Error al cargar estudiantes de la materia';\n//         }\n//         this.loading = false;\n//         console.error(err);\n//       }\n//     });\n//   }\n// \n//   loadClassmates(subjectId: number, studentId: number): void {\n//     if (!subjectId || isNaN(subjectId) || !studentId || isNaN(studentId)) {\n//       this.error = 'ID de materia o estudiante inválido';\n//       return;\n//     }\n//     \n//     this.loading = true;\n//     this.registrationService.getClassmates(subjectId, studentId).subscribe({\n//       next: (data) => {\n//         this.classmates = data;\n//         this.loading = false;\n//       },\n//       error: (err) => {\n//         this.error = 'Error al cargar compañeros de clase';\n//         this.loading = false;\n//         console.error(err);\n//       }\n//     });\n//   }\n// }\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}