{"ast":null,"code":"\"use strict\";\n\n// COMPONENTE COMENTADO POR MIGRACIÓN A ESPAÑOL\n/*\r\nimport { Component, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { Router } from '@angular/router';\r\nimport { AuthService } from '../../services/auth.service';\r\nimport { RegisterRequest } from '../../models/auth.model';\r\n\r\n@Component({\r\n  selector: 'app-register',\r\n  templateUrl: './register.component.html',\r\n  styleUrls: ['./register.component.css']\r\n})\r\nexport class RegisterComponent implements OnInit {\r\n  registerForm!: FormGroup;\r\n  isLoading = false;\r\n  error: string | null = null;\r\n\r\n  constructor(\r\n    private formBuilder: FormBuilder,\r\n    private authService: AuthService,\r\n    private router: Router\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    this.registerForm = this.formBuilder.group({\r\n      name: ['', [Validators.required]],\r\n      email: ['', [Validators.required, Validators.email]],\r\n      password: ['', [Validators.required, Validators.minLength(6)]],\r\n      confirmPassword: ['', [Validators.required]],\r\n      studentId: [''],\r\n      professorId: [''],\r\n      role: ['student', [Validators.required]]\r\n    }, { validators: this.passwordMatchValidator });\r\n\r\n    // Mostrar/ocultar campo studentId según el rol seleccionado\r\n    this.registerForm.get('role')?.valueChanges.subscribe(role => {\r\n      if (role === 'student') {\r\n        this.registerForm.get('studentId')?.setValidators([Validators.required]);\r\n        this.registerForm.get('professorId')?.clearValidators();\r\n      } else if (role === 'professor') {\r\n        this.registerForm.get('professorId')?.setValidators([Validators.required]);\r\n        this.registerForm.get('studentId')?.clearValidators();\r\n      } else {\r\n        this.registerForm.get('studentId')?.clearValidators();\r\n        this.registerForm.get('professorId')?.clearValidators();\r\n      }\r\n      this.registerForm.get('studentId')?.updateValueAndValidity();\r\n      this.registerForm.get('professorId')?.updateValueAndValidity();\r\n    });\r\n  }\r\n\r\n  passwordMatchValidator(form: FormGroup) {\r\n    const password = form.get('password')?.value;\r\n    const confirmPassword = form.get('confirmPassword')?.value;\r\n    \r\n    if (password !== confirmPassword) {\r\n      form.get('confirmPassword')?.setErrors({ passwordMismatch: true });\r\n      return { passwordMismatch: true };\r\n    } else {\r\n      form.get('confirmPassword')?.setErrors(null);\r\n      return null;\r\n    }\r\n  }\r\n\r\n  onSubmit(): void {\r\n    if (this.registerForm.invalid) {\r\n      return;\r\n    }\r\n\r\n    this.isLoading = true;\r\n    this.error = null;\r\n\r\n    const registerData: RegisterRequest = {\r\n      name: this.registerForm.value.name,\r\n      email: this.registerForm.value.email,\r\n      password: this.registerForm.value.password,\r\n      role: this.registerForm.value.role\r\n    };\r\n\r\n    // Agregar studentId solo si el rol es estudiante y hay un valor\r\n    if (this.registerForm.value.role === 'student' && this.registerForm.value.studentId) {\r\n      registerData.studentId = parseInt(this.registerForm.value.studentId, 10);\r\n    }\r\n\r\n    // Agregar professorId solo si el rol es profesor y hay un valor\r\n    if (this.registerForm.value.role === 'professor' && this.registerForm.value.professorId) {\r\n      registerData.professorId = parseInt(this.registerForm.value.professorId, 10);\r\n    }\r\n\r\n    this.authService.register(registerData).subscribe({\r\n      next: () => {\r\n        this.isLoading = false;\r\n        this.router.navigate(['/students']);\r\n      },\r\n      error: (errorMessage) => {\r\n        this.isLoading = false;\r\n        this.error = errorMessage;\r\n      }\r\n    });\r\n  }\r\n}\r\n*/","map":{"version":3,"mappings":";;AAAA;AACA","names":[],"sourceRoot":"","sources":["C:\\Users\\hansk\\Videos\\frontendsistemacolegio.interrapidisi\\frontendsistemacolegio.interrapidisi\\src\\app\\components\\auth\\register.component.ts"],"sourcesContent":["// COMPONENTE COMENTADO POR MIGRACIÓN A ESPAÑOL\n/*\nimport { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { AuthService } from '../../services/auth.service';\nimport { RegisterRequest } from '../../models/auth.model';\n\n@Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.css']\n})\nexport class RegisterComponent implements OnInit {\n  registerForm!: FormGroup;\n  isLoading = false;\n  error: string | null = null;\n\n  constructor(\n    private formBuilder: FormBuilder,\n    private authService: AuthService,\n    private router: Router\n  ) {}\n\n  ngOnInit(): void {\n    this.registerForm = this.formBuilder.group({\n      name: ['', [Validators.required]],\n      email: ['', [Validators.required, Validators.email]],\n      password: ['', [Validators.required, Validators.minLength(6)]],\n      confirmPassword: ['', [Validators.required]],\n      studentId: [''],\n      professorId: [''],\n      role: ['student', [Validators.required]]\n    }, { validators: this.passwordMatchValidator });\n\n    // Mostrar/ocultar campo studentId según el rol seleccionado\n    this.registerForm.get('role')?.valueChanges.subscribe(role => {\n      if (role === 'student') {\n        this.registerForm.get('studentId')?.setValidators([Validators.required]);\n        this.registerForm.get('professorId')?.clearValidators();\n      } else if (role === 'professor') {\n        this.registerForm.get('professorId')?.setValidators([Validators.required]);\n        this.registerForm.get('studentId')?.clearValidators();\n      } else {\n        this.registerForm.get('studentId')?.clearValidators();\n        this.registerForm.get('professorId')?.clearValidators();\n      }\n      this.registerForm.get('studentId')?.updateValueAndValidity();\n      this.registerForm.get('professorId')?.updateValueAndValidity();\n    });\n  }\n\n  passwordMatchValidator(form: FormGroup) {\n    const password = form.get('password')?.value;\n    const confirmPassword = form.get('confirmPassword')?.value;\n    \n    if (password !== confirmPassword) {\n      form.get('confirmPassword')?.setErrors({ passwordMismatch: true });\n      return { passwordMismatch: true };\n    } else {\n      form.get('confirmPassword')?.setErrors(null);\n      return null;\n    }\n  }\n\n  onSubmit(): void {\n    if (this.registerForm.invalid) {\n      return;\n    }\n\n    this.isLoading = true;\n    this.error = null;\n\n    const registerData: RegisterRequest = {\n      name: this.registerForm.value.name,\n      email: this.registerForm.value.email,\n      password: this.registerForm.value.password,\n      role: this.registerForm.value.role\n    };\n\n    // Agregar studentId solo si el rol es estudiante y hay un valor\n    if (this.registerForm.value.role === 'student' && this.registerForm.value.studentId) {\n      registerData.studentId = parseInt(this.registerForm.value.studentId, 10);\n    }\n\n    // Agregar professorId solo si el rol es profesor y hay un valor\n    if (this.registerForm.value.role === 'professor' && this.registerForm.value.professorId) {\n      registerData.professorId = parseInt(this.registerForm.value.professorId, 10);\n    }\n\n    this.authService.register(registerData).subscribe({\n      next: () => {\n        this.isLoading = false;\n        this.router.navigate(['/students']);\n      },\n      error: (errorMessage) => {\n        this.isLoading = false;\n        this.error = errorMessage;\n      }\n    });\n  }\n}\n*/"]},"metadata":{},"sourceType":"script","externalDependencies":[]}