{"ast":null,"code":"import { throwError } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport { environment } from '../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class EstudianteServicio {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = `${environment.apiUrl}/Estudiantes`;\n  }\n  obtenerEstudiantes() {\n    return this.http.get(this.apiUrl).pipe(map(respuesta => {\n      if (!respuesta.exito) {\n        throw new Error(respuesta.mensaje || 'Error al obtener estudiantes');\n      }\n      return respuesta.data.map(dto => this.mapearEstudianteDtoAEstudiante(dto));\n    }), catchError(this.manejarError));\n  }\n  obtenerEstudiante(id) {\n    return this.http.get(`${this.apiUrl}/${id}`).pipe(map(respuesta => {\n      if (!respuesta.exito) {\n        throw new Error(respuesta.mensaje || 'Error al obtener estudiante');\n      }\n      return this.mapearEstudianteDtoAEstudiante(respuesta.data);\n    }), catchError(this.manejarError));\n  }\n  crearEstudiante(estudiante) {\n    const estudianteDto = this.mapearEstudianteAEstudianteDto(estudiante);\n    return this.http.post(this.apiUrl, estudianteDto).pipe(map(respuesta => {\n      if (!respuesta.exito) {\n        throw new Error(respuesta.mensaje || 'Error al crear estudiante');\n      }\n      return this.mapearEstudianteDtoAEstudiante(respuesta.data);\n    }), catchError(this.manejarError));\n  }\n  actualizarEstudiante(estudiante) {\n    const estudianteDto = this.mapearEstudianteAEstudianteDto(estudiante);\n    return this.http.put(`${this.apiUrl}/${estudiante.id}`, estudianteDto).pipe(map(respuesta => {\n      if (!respuesta.exito) {\n        throw new Error(respuesta.mensaje || 'Error al actualizar estudiante');\n      }\n      return this.mapearEstudianteDtoAEstudiante(respuesta.data);\n    }), catchError(this.manejarError));\n  }\n  eliminarEstudiante(id) {\n    return this.http.delete(`${this.apiUrl}/${id}`).pipe(map(respuesta => {\n      if (!respuesta.exito) {\n        throw new Error(respuesta.mensaje || 'Error al eliminar estudiante');\n      }\n      return respuesta.data;\n    }), catchError(this.manejarError));\n  }\n  obtenerInscripcionesEstudiante(id) {\n    console.log('Obteniendo inscripciones del estudiante con ID:', id);\n    return this.http.get(`${this.apiUrl}/${id}`).pipe(map(respuesta => {\n      console.log(respuesta);\n      if (!respuesta.exito) {\n        throw new Error(respuesta.mensaje || 'Error al obtener registros del estudiante');\n      }\n      return respuesta.data.registros.map(dto => this.mapearRegistroDtoAInscripcion(dto));\n    }), catchError(this.manejarError));\n  }\n  mapearEstudianteDtoAEstudiante(dto) {\n    return {\n      id: dto.id,\n      nombre: dto.nombre,\n      correo: dto.email,\n      matricula: dto.matricula\n    };\n  }\n  mapearEstudianteAEstudianteDto(estudiante) {\n    return {\n      id: estudiante.id || 0,\n      nombre: estudiante.nombre,\n      email: estudiante.correo,\n      matricula: estudiante.matricula,\n      registros: []\n    };\n  }\n  mapearRegistroDtoAInscripcion(dto) {\n    return {\n      id: dto.id,\n      estudianteId: dto.estudianteId,\n      asignaturaId: dto.materiaId,\n      fechaInscripcion: new Date(dto.fechaRegistro)\n    };\n  }\n  manejarError(error) {\n    let mensajeError = '¡Ocurrió un error desconocido!';\n    if (error.error instanceof ErrorEvent) {\n      mensajeError = `Error: ${error.error.message}`;\n    } else if (error.error && error.error.message) {\n      mensajeError = error.error.message;\n    } else if (error.status) {\n      mensajeError = `Error ${error.status}: ${error.statusText}`;\n    }\n    return throwError(() => new Error(mensajeError));\n  }\n  static {\n    this.ɵfac = function EstudianteServicio_Factory(t) {\n      return new (t || EstudianteServicio)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: EstudianteServicio,\n      factory: EstudianteServicio.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"mappings":"AAEA,SAAqBA,UAAU,QAAQ,MAAM;AAC7C,SAASC,UAAU,EAAEC,GAAG,QAAQ,gBAAgB;AAGhD,SAASC,WAAW,QAAQ,gCAAgC;;;AA6B5D,OAAM,MAAOC,kBAAkB;EAG7BC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IAFhB,WAAM,GAAG,GAAGH,WAAW,CAACI,MAAM,cAAc;EAEZ;EAExCC,kBAAkB;IAChB,OAAO,IAAI,CAACF,IAAI,CAACG,GAAG,CAAgC,IAAI,CAACF,MAAM,CAAC,CAC7DG,IAAI,CACHR,GAAG,CAACS,SAAS,IAAG;MACd,IAAI,CAACA,SAAS,CAACC,KAAK,EAAE;QACpB,MAAM,IAAIC,KAAK,CAACF,SAAS,CAACG,OAAO,IAAI,8BAA8B,CAAC;;MAEtE,OAAOH,SAAS,CAACI,IAAI,CAACb,GAAG,CAACc,GAAG,IAAI,IAAI,CAACC,8BAA8B,CAACD,GAAG,CAAC,CAAC;IAC5E,CAAC,CAAC,EACFf,UAAU,CAAC,IAAI,CAACiB,YAAY,CAAC,CAC9B;EACL;EAEAC,iBAAiB,CAACC,EAAU;IAC1B,OAAO,IAAI,CAACd,IAAI,CAACG,GAAG,CAA8B,GAAG,IAAI,CAACF,MAAM,IAAIa,EAAE,EAAE,CAAC,CACtEV,IAAI,CACHR,GAAG,CAACS,SAAS,IAAG;MACd,IAAI,CAACA,SAAS,CAACC,KAAK,EAAE;QACpB,MAAM,IAAIC,KAAK,CAACF,SAAS,CAACG,OAAO,IAAI,6BAA6B,CAAC;;MAErE,OAAO,IAAI,CAACG,8BAA8B,CAACN,SAAS,CAACI,IAAI,CAAC;IAC5D,CAAC,CAAC,EACFd,UAAU,CAAC,IAAI,CAACiB,YAAY,CAAC,CAC9B;EACL;EAEAG,eAAe,CAACC,UAAsB;IACpC,MAAMC,aAAa,GAAG,IAAI,CAACC,8BAA8B,CAACF,UAAU,CAAC;IACrE,OAAO,IAAI,CAAChB,IAAI,CAACmB,IAAI,CAA8B,IAAI,CAAClB,MAAM,EAAEgB,aAAa,CAAC,CAC3Eb,IAAI,CACHR,GAAG,CAACS,SAAS,IAAG;MACd,IAAI,CAACA,SAAS,CAACC,KAAK,EAAE;QACpB,MAAM,IAAIC,KAAK,CAACF,SAAS,CAACG,OAAO,IAAI,2BAA2B,CAAC;;MAEnE,OAAO,IAAI,CAACG,8BAA8B,CAACN,SAAS,CAACI,IAAI,CAAC;IAC5D,CAAC,CAAC,EACFd,UAAU,CAAC,IAAI,CAACiB,YAAY,CAAC,CAC9B;EACL;EAEAQ,oBAAoB,CAACJ,UAAsB;IACzC,MAAMC,aAAa,GAAG,IAAI,CAACC,8BAA8B,CAACF,UAAU,CAAC;IACrE,OAAO,IAAI,CAAChB,IAAI,CAACqB,GAAG,CAA8B,GAAG,IAAI,CAACpB,MAAM,IAAIe,UAAU,CAACF,EAAE,EAAE,EAAEG,aAAa,CAAC,CAChGb,IAAI,CACHR,GAAG,CAACS,SAAS,IAAG;MACd,IAAI,CAACA,SAAS,CAACC,KAAK,EAAE;QACpB,MAAM,IAAIC,KAAK,CAACF,SAAS,CAACG,OAAO,IAAI,gCAAgC,CAAC;;MAExE,OAAO,IAAI,CAACG,8BAA8B,CAACN,SAAS,CAACI,IAAI,CAAC;IAC5D,CAAC,CAAC,EACFd,UAAU,CAAC,IAAI,CAACiB,YAAY,CAAC,CAC9B;EACL;EAEAU,kBAAkB,CAACR,EAAU;IAC3B,OAAO,IAAI,CAACd,IAAI,CAACuB,MAAM,CAAwB,GAAG,IAAI,CAACtB,MAAM,IAAIa,EAAE,EAAE,CAAC,CACnEV,IAAI,CACHR,GAAG,CAACS,SAAS,IAAG;MACd,IAAI,CAACA,SAAS,CAACC,KAAK,EAAE;QACpB,MAAM,IAAIC,KAAK,CAACF,SAAS,CAACG,OAAO,IAAI,8BAA8B,CAAC;;MAEtE,OAAOH,SAAS,CAACI,IAAI;IACvB,CAAC,CAAC,EACFd,UAAU,CAAC,IAAI,CAACiB,YAAY,CAAC,CAC9B;EACL;EAEAY,8BAA8B,CAACV,EAAU;IACvCW,OAAO,CAACC,GAAG,CAAC,iDAAiD,EAAEZ,EAAE,CAAC;IAClE,OAAO,IAAI,CAACd,IAAI,CAACG,GAAG,CAA8B,GAAG,IAAI,CAACF,MAAM,IAAIa,EAAE,EAAE,CAAC,CACtEV,IAAI,CACHR,GAAG,CAACS,SAAS,IAAG;MACdoB,OAAO,CAACC,GAAG,CAACrB,SAAS,CAAC;MACtB,IAAI,CAACA,SAAS,CAACC,KAAK,EAAE;QAEpB,MAAM,IAAIC,KAAK,CAACF,SAAS,CAACG,OAAO,IAAI,2CAA2C,CAAC;;MAEnF,OAAOH,SAAS,CAACI,IAAI,CAACkB,SAAS,CAAC/B,GAAG,CAACc,GAAG,IAAI,IAAI,CAACkB,6BAA6B,CAAClB,GAAG,CAAC,CAAC;IACrF,CAAC,CAAC,EACFf,UAAU,CAAC,IAAI,CAACiB,YAAY,CAAC,CAC9B;EACL;EAEQD,8BAA8B,CAACD,GAAkB;IACvD,OAAO;MACLI,EAAE,EAAEJ,GAAG,CAACI,EAAE;MACVe,MAAM,EAAEnB,GAAG,CAACmB,MAAM;MAClBC,MAAM,EAAEpB,GAAG,CAACqB,KAAK;MACjBC,SAAS,EAAEtB,GAAG,CAACsB;KAChB;EACH;EAEQd,8BAA8B,CAACF,UAAsB;IAC3D,OAAO;MACLF,EAAE,EAAEE,UAAU,CAACF,EAAE,IAAI,CAAC;MACtBe,MAAM,EAAEb,UAAU,CAACa,MAAM;MACzBE,KAAK,EAAEf,UAAU,CAACc,MAAM;MACxBE,SAAS,EAAEhB,UAAU,CAACgB,SAAS;MAC/BL,SAAS,EAAE;KACZ;EACH;EAEQC,6BAA6B,CAAClB,GAAgB;IACpD,OAAO;MACLI,EAAE,EAAEJ,GAAG,CAACI,EAAE;MACVmB,YAAY,EAAEvB,GAAG,CAACuB,YAAY;MAC9BC,YAAY,EAAExB,GAAG,CAACyB,SAAS;MAC3BC,gBAAgB,EAAE,IAAIC,IAAI,CAAC3B,GAAG,CAAC4B,aAAa;KAC7C;EACH;EAEQ1B,YAAY,CAAC2B,KAAU;IAC7B,IAAIC,YAAY,GAAG,gCAAgC;IACnD,IAAID,KAAK,CAACA,KAAK,YAAYE,UAAU,EAAE;MACrCD,YAAY,GAAG,UAAUD,KAAK,CAACA,KAAK,CAACG,OAAO,EAAE;KAC/C,MAAM,IAAIH,KAAK,CAACA,KAAK,IAAIA,KAAK,CAACA,KAAK,CAACG,OAAO,EAAE;MAC7CF,YAAY,GAAGD,KAAK,CAACA,KAAK,CAACG,OAAO;KACnC,MAAM,IAAIH,KAAK,CAACI,MAAM,EAAE;MACvBH,YAAY,GAAG,SAASD,KAAK,CAACI,MAAM,KAAKJ,KAAK,CAACK,UAAU,EAAE;;IAE7D,OAAOlD,UAAU,CAAC,MAAM,IAAIa,KAAK,CAACiC,YAAY,CAAC,CAAC;EAClD;;;uBA9HW1C,kBAAkB;IAAA;EAAA;;;aAAlBA,kBAAkB;MAAA+C,SAAlB/C,kBAAkB;MAAAgD,YAFjB;IAAM;EAAA","names":["throwError","catchError","map","environment","EstudianteServicio","constructor","http","apiUrl","obtenerEstudiantes","get","pipe","respuesta","exito","Error","mensaje","data","dto","mapearEstudianteDtoAEstudiante","manejarError","obtenerEstudiante","id","crearEstudiante","estudiante","estudianteDto","mapearEstudianteAEstudianteDto","post","actualizarEstudiante","put","eliminarEstudiante","delete","obtenerInscripcionesEstudiante","console","log","registros","mapearRegistroDtoAInscripcion","nombre","correo","email","matricula","estudianteId","asignaturaId","materiaId","fechaInscripcion","Date","fechaRegistro","error","mensajeError","ErrorEvent","message","status","statusText","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\hansk\\Videos\\frontendsistemacolegio.interrapidisi\\frontendsistemacolegio.interrapidisi\\src\\app\\servicios\\estudiante.servicio.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport { Estudiante } from '../modelos/estudiante.modelo';\nimport { Inscripcion } from '../modelos/inscripcion.modelo';\nimport { environment } from '../../environments/environment';\n\ninterface ApiRespuesta<T> {\n  exito: boolean;\n  mensaje: string;\n  errores: string[];\n  data: T;\n}\n\ninterface EstudianteDto {\n  id: number;\n  nombre: string;\n  email: string;\n  matricula: string;\n  registros: RegistroDto[];\n}\n\ninterface RegistroDto {\n  id: number;\n  estudianteId: number;\n  nombreEstudiante: string;\n  materiaId: number;\n  nombreMateria: string;\n  fechaRegistro: Date;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class EstudianteServicio {\n  private apiUrl = `${environment.apiUrl}/Estudiantes`;\n\n  constructor(private http: HttpClient) { }\n\n  obtenerEstudiantes(): Observable<Estudiante[]> {\n    return this.http.get<ApiRespuesta<EstudianteDto[]>>(this.apiUrl)\n      .pipe(\n        map(respuesta => {\n          if (!respuesta.exito) {\n            throw new Error(respuesta.mensaje || 'Error al obtener estudiantes');\n          }\n          return respuesta.data.map(dto => this.mapearEstudianteDtoAEstudiante(dto));\n        }),\n        catchError(this.manejarError)\n      );\n  }\n\n  obtenerEstudiante(id: number): Observable<Estudiante> {\n    return this.http.get<ApiRespuesta<EstudianteDto>>(`${this.apiUrl}/${id}`)\n      .pipe(\n        map(respuesta => {\n          if (!respuesta.exito) {\n            throw new Error(respuesta.mensaje || 'Error al obtener estudiante');\n          }\n          return this.mapearEstudianteDtoAEstudiante(respuesta.data);\n        }),\n        catchError(this.manejarError)\n      );\n  }\n\n  crearEstudiante(estudiante: Estudiante): Observable<Estudiante> {\n    const estudianteDto = this.mapearEstudianteAEstudianteDto(estudiante);\n    return this.http.post<ApiRespuesta<EstudianteDto>>(this.apiUrl, estudianteDto)\n      .pipe(\n        map(respuesta => {\n          if (!respuesta.exito) {\n            throw new Error(respuesta.mensaje || 'Error al crear estudiante');\n          }\n          return this.mapearEstudianteDtoAEstudiante(respuesta.data);\n        }),\n        catchError(this.manejarError)\n      );\n  }\n\n  actualizarEstudiante(estudiante: Estudiante): Observable<Estudiante> {\n    const estudianteDto = this.mapearEstudianteAEstudianteDto(estudiante);\n    return this.http.put<ApiRespuesta<EstudianteDto>>(`${this.apiUrl}/${estudiante.id}`, estudianteDto)\n      .pipe(\n        map(respuesta => {\n          if (!respuesta.exito) {\n            throw new Error(respuesta.mensaje || 'Error al actualizar estudiante');\n          }\n          return this.mapearEstudianteDtoAEstudiante(respuesta.data);\n        }),\n        catchError(this.manejarError)\n      );\n  }\n\n  eliminarEstudiante(id: number): Observable<boolean> {\n    return this.http.delete<ApiRespuesta<boolean>>(`${this.apiUrl}/${id}`)\n      .pipe(\n        map(respuesta => {\n          if (!respuesta.exito) {\n            throw new Error(respuesta.mensaje || 'Error al eliminar estudiante');\n          }\n          return respuesta.data;\n        }),\n        catchError(this.manejarError)\n      );\n  }\n\n  obtenerInscripcionesEstudiante(id: number): Observable<Inscripcion[]> {\n    console.log('Obteniendo inscripciones del estudiante con ID:', id);\n    return this.http.get<ApiRespuesta<EstudianteDto>>(`${this.apiUrl}/${id}`)\n      .pipe(\n        map(respuesta => {\n          console.log(respuesta)\n          if (!respuesta.exito) {\n  \n            throw new Error(respuesta.mensaje || 'Error al obtener registros del estudiante');\n          }\n          return respuesta.data.registros.map(dto => this.mapearRegistroDtoAInscripcion(dto));\n        }),\n        catchError(this.manejarError)\n      );\n  }\n\n  private mapearEstudianteDtoAEstudiante(dto: EstudianteDto): Estudiante {\n    return {\n      id: dto.id,\n      nombre: dto.nombre,\n      correo: dto.email,\n      matricula: dto.matricula\n    };\n  }\n\n  private mapearEstudianteAEstudianteDto(estudiante: Estudiante): EstudianteDto {\n    return {\n      id: estudiante.id || 0,\n      nombre: estudiante.nombre,\n      email: estudiante.correo,\n      matricula: estudiante.matricula,\n      registros: []\n    };\n  }\n\n  private mapearRegistroDtoAInscripcion(dto: RegistroDto): Inscripcion {\n    return {\n      id: dto.id,\n      estudianteId: dto.estudianteId,\n      asignaturaId: dto.materiaId,\n      fechaInscripcion: new Date(dto.fechaRegistro)\n    };\n  }\n\n  private manejarError(error: any) {\n    let mensajeError = '¡Ocurrió un error desconocido!';\n    if (error.error instanceof ErrorEvent) {\n      mensajeError = `Error: ${error.error.message}`;\n    } else if (error.error && error.error.message) {\n      mensajeError = error.error.message;\n    } else if (error.status) {\n      mensajeError = `Error ${error.status}: ${error.statusText}`;\n    }\n    return throwError(() => new Error(mensajeError));\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}