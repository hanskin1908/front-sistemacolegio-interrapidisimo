{"ast":null,"code":"import { throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { environment } from '../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class StudentService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = `${environment.apiUrl}/students`;\n  }\n  getStudents() {\n    return this.http.get(this.apiUrl).pipe(catchError(this.handleError));\n  }\n  getStudent(id) {\n    return this.http.get(`${this.apiUrl}/${id}`).pipe(catchError(this.handleError));\n  }\n  createStudent(student) {\n    return this.http.post(this.apiUrl, student).pipe(catchError(this.handleError));\n  }\n  updateStudent(student) {\n    return this.http.put(`${this.apiUrl}/${student.id}`, student).pipe(catchError(this.handleError));\n  }\n  deleteStudent(id) {\n    return this.http.delete(`${this.apiUrl}/${id}`).pipe(catchError(this.handleError));\n  }\n  getStudentRegistrations(id) {\n    return this.http.get(`${this.apiUrl}/${id}/registrations`).pipe(catchError(this.handleError));\n  }\n  handleError(error) {\n    let errorMessage = 'An unknown error occurred!';\n    if (error.error instanceof ErrorEvent) {\n      // Client-side error\n      errorMessage = `Error: ${error.error.message}`;\n    } else if (error.error && error.error.message) {\n      // Server-side error with message\n      errorMessage = error.error.message;\n    } else if (error.status) {\n      // HTTP error\n      errorMessage = `Error ${error.status}: ${error.statusText}`;\n    }\n    return throwError(() => new Error(errorMessage));\n  }\n  static {\n    this.ɵfac = function StudentService_Factory(t) {\n      return new (t || StudentService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: StudentService,\n      factory: StudentService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"mappings":"AAEA,SAAqBA,UAAU,QAAQ,MAAM;AAC7C,SAASC,UAAU,QAAQ,gBAAgB;AAG3C,SAASC,WAAW,QAAQ,gCAAgC;;;AAK5D,OAAM,MAAOC,cAAc;EAGzBC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IAFhB,WAAM,GAAG,GAAGH,WAAW,CAACI,MAAM,WAAW;EAET;EAExCC,WAAW;IACT,OAAO,IAAI,CAACF,IAAI,CAACG,GAAG,CAAY,IAAI,CAACF,MAAM,CAAC,CACzCG,IAAI,CAACR,UAAU,CAAC,IAAI,CAACS,WAAW,CAAC,CAAC;EACvC;EAEAC,UAAU,CAACC,EAAU;IACnB,OAAO,IAAI,CAACP,IAAI,CAACG,GAAG,CAAU,GAAG,IAAI,CAACF,MAAM,IAAIM,EAAE,EAAE,CAAC,CAClDH,IAAI,CAACR,UAAU,CAAC,IAAI,CAACS,WAAW,CAAC,CAAC;EACvC;EAEAG,aAAa,CAACC,OAAgB;IAC5B,OAAO,IAAI,CAACT,IAAI,CAACU,IAAI,CAAU,IAAI,CAACT,MAAM,EAAEQ,OAAO,CAAC,CACjDL,IAAI,CAACR,UAAU,CAAC,IAAI,CAACS,WAAW,CAAC,CAAC;EACvC;EAEAM,aAAa,CAACF,OAAgB;IAC5B,OAAO,IAAI,CAACT,IAAI,CAACY,GAAG,CAAC,GAAG,IAAI,CAACX,MAAM,IAAIQ,OAAO,CAACF,EAAE,EAAE,EAAEE,OAAO,CAAC,CAC1DL,IAAI,CAACR,UAAU,CAAC,IAAI,CAACS,WAAW,CAAC,CAAC;EACvC;EAEAQ,aAAa,CAACN,EAAU;IACtB,OAAO,IAAI,CAACP,IAAI,CAACc,MAAM,CAAC,GAAG,IAAI,CAACb,MAAM,IAAIM,EAAE,EAAE,CAAC,CAC5CH,IAAI,CAACR,UAAU,CAAC,IAAI,CAACS,WAAW,CAAC,CAAC;EACvC;EAEAU,uBAAuB,CAACR,EAAU;IAChC,OAAO,IAAI,CAACP,IAAI,CAACG,GAAG,CAAiB,GAAG,IAAI,CAACF,MAAM,IAAIM,EAAE,gBAAgB,CAAC,CACvEH,IAAI,CAACR,UAAU,CAAC,IAAI,CAACS,WAAW,CAAC,CAAC;EACvC;EAEQA,WAAW,CAACW,KAAU;IAC5B,IAAIC,YAAY,GAAG,4BAA4B;IAC/C,IAAID,KAAK,CAACA,KAAK,YAAYE,UAAU,EAAE;MACrC;MACAD,YAAY,GAAG,UAAUD,KAAK,CAACA,KAAK,CAACG,OAAO,EAAE;KAC/C,MAAM,IAAIH,KAAK,CAACA,KAAK,IAAIA,KAAK,CAACA,KAAK,CAACG,OAAO,EAAE;MAC7C;MACAF,YAAY,GAAGD,KAAK,CAACA,KAAK,CAACG,OAAO;KACnC,MAAM,IAAIH,KAAK,CAACI,MAAM,EAAE;MACvB;MACAH,YAAY,GAAG,SAASD,KAAK,CAACI,MAAM,KAAKJ,KAAK,CAACK,UAAU,EAAE;;IAE7D,OAAO1B,UAAU,CAAC,MAAM,IAAI2B,KAAK,CAACL,YAAY,CAAC,CAAC;EAClD;;;uBAhDWnB,cAAc;IAAA;EAAA;;;aAAdA,cAAc;MAAAyB,SAAdzB,cAAc;MAAA0B,YAFb;IAAM;EAAA","names":["throwError","catchError","environment","StudentService","constructor","http","apiUrl","getStudents","get","pipe","handleError","getStudent","id","createStudent","student","post","updateStudent","put","deleteStudent","delete","getStudentRegistrations","error","errorMessage","ErrorEvent","message","status","statusText","Error","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\hansk\\OneDrive\\Documentos\\Desarrollo\\Prueba interrapidisimp\\frontend\\src\\app\\services\\student.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { Student } from '../models/student.model';\nimport { Registration } from '../models/registration.model';\nimport { environment } from '../../environments/environment';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class StudentService {\n  private apiUrl = `${environment.apiUrl}/students`;\n\n  constructor(private http: HttpClient) { }\n\n  getStudents(): Observable<Student[]> {\n    return this.http.get<Student[]>(this.apiUrl)\n      .pipe(catchError(this.handleError));\n  }\n\n  getStudent(id: number): Observable<Student> {\n    return this.http.get<Student>(`${this.apiUrl}/${id}`)\n      .pipe(catchError(this.handleError));\n  }\n\n  createStudent(student: Student): Observable<Student> {\n    return this.http.post<Student>(this.apiUrl, student)\n      .pipe(catchError(this.handleError));\n  }\n\n  updateStudent(student: Student): Observable<any> {\n    return this.http.put(`${this.apiUrl}/${student.id}`, student)\n      .pipe(catchError(this.handleError));\n  }\n\n  deleteStudent(id: number): Observable<any> {\n    return this.http.delete(`${this.apiUrl}/${id}`)\n      .pipe(catchError(this.handleError));\n  }\n\n  getStudentRegistrations(id: number): Observable<Registration[]> {\n    return this.http.get<Registration[]>(`${this.apiUrl}/${id}/registrations`)\n      .pipe(catchError(this.handleError));\n  }\n\n  private handleError(error: any) {\n    let errorMessage = 'An unknown error occurred!';\n    if (error.error instanceof ErrorEvent) {\n      // Client-side error\n      errorMessage = `Error: ${error.error.message}`;\n    } else if (error.error && error.error.message) {\n      // Server-side error with message\n      errorMessage = error.error.message;\n    } else if (error.status) {\n      // HTTP error\n      errorMessage = `Error ${error.status}: ${error.statusText}`;\n    }\n    return throwError(() => new Error(errorMessage));\n  }\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}