{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"./auth.service\";\nimport * as i2 from \"@angular/router\";\nexport class AuthGuard {\n  constructor(authService, router) {\n    this.authService = authService;\n    this.router = router;\n  }\n  canActivate(route, state) {\n    if (this.authService.isAuthenticated()) {\n      // Check for role-based access if required\n      const requiredRole = route.data['role'];\n      if (requiredRole) {\n        if (requiredRole === 'admin' && !this.authService.isAdmin()) {\n          return this.router.createUrlTree(['/login'], {\n            queryParams: {\n              returnUrl: state.url,\n              accessDenied: true\n            }\n          });\n        }\n        if (requiredRole === 'student' && !this.authService.isStudent()) {\n          return this.router.createUrlTree(['/login'], {\n            queryParams: {\n              returnUrl: state.url,\n              accessDenied: true\n            }\n          });\n        }\n        if (requiredRole === 'professor' && !this.authService.isProfessor()) {\n          return this.router.createUrlTree(['/login'], {\n            queryParams: {\n              returnUrl: state.url,\n              accessDenied: true\n            }\n          });\n        }\n      }\n      return true;\n    }\n    return this.router.createUrlTree(['/login'], {\n      queryParams: {\n        returnUrl: state.url\n      }\n    });\n  }\n  static {\n    this.ɵfac = function AuthGuard_Factory(t) {\n      return new (t || AuthGuard)(i0.ɵɵinject(i1.AuthService), i0.ɵɵinject(i2.Router));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthGuard,\n      factory: AuthGuard.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"mappings":";;;AAQA,OAAM,MAAOA,SAAS;EACpBC,YAAoBC,WAAwB,EAAUC,MAAc;IAAhD,gBAAW,GAAXD,WAAW;IAAuB,WAAM,GAANC,MAAM;EAAW;EAEvEC,WAAW,CACTC,KAA6B,EAC7BC,KAA0B;IAE1B,IAAI,IAAI,CAACJ,WAAW,CAACK,eAAe,EAAE,EAAE;MACtC;MACA,MAAMC,YAAY,GAAGH,KAAK,CAACI,IAAI,CAAC,MAAM,CAAW;MACjD,IAAID,YAAY,EAAE;QAChB,IAAIA,YAAY,KAAK,OAAO,IAAI,CAAC,IAAI,CAACN,WAAW,CAACQ,OAAO,EAAE,EAAE;UAC3D,OAAO,IAAI,CAACP,MAAM,CAACQ,aAAa,CAAC,CAAC,QAAQ,CAAC,EAAE;YAC3CC,WAAW,EAAE;cAAEC,SAAS,EAAEP,KAAK,CAACQ,GAAG;cAAEC,YAAY,EAAE;YAAI;WACxD,CAAC;;QAEJ,IAAIP,YAAY,KAAK,SAAS,IAAI,CAAC,IAAI,CAACN,WAAW,CAACc,SAAS,EAAE,EAAE;UAC/D,OAAO,IAAI,CAACb,MAAM,CAACQ,aAAa,CAAC,CAAC,QAAQ,CAAC,EAAE;YAC3CC,WAAW,EAAE;cAAEC,SAAS,EAAEP,KAAK,CAACQ,GAAG;cAAEC,YAAY,EAAE;YAAI;WACxD,CAAC;;QAEJ,IAAIP,YAAY,KAAK,WAAW,IAAI,CAAC,IAAI,CAACN,WAAW,CAACe,WAAW,EAAE,EAAE;UACnE,OAAO,IAAI,CAACd,MAAM,CAACQ,aAAa,CAAC,CAAC,QAAQ,CAAC,EAAE;YAC3CC,WAAW,EAAE;cAAEC,SAAS,EAAEP,KAAK,CAACQ,GAAG;cAAEC,YAAY,EAAE;YAAI;WACxD,CAAC;;;MAGN,OAAO,IAAI;;IAEb,OAAO,IAAI,CAACZ,MAAM,CAACQ,aAAa,CAAC,CAAC,QAAQ,CAAC,EAAE;MAC3CC,WAAW,EAAE;QAAEC,SAAS,EAAEP,KAAK,CAACQ;MAAG;KACpC,CAAC;EACJ;;;uBAhCWd,SAAS;IAAA;EAAA;;;aAATA,SAAS;MAAAkB,SAATlB,SAAS;MAAAmB,YAFR;IAAM;EAAA","names":["AuthGuard","constructor","authService","router","canActivate","route","state","isAuthenticated","requiredRole","data","isAdmin","createUrlTree","queryParams","returnUrl","url","accessDenied","isStudent","isProfessor","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\hansk\\Videos\\frontendsistemacolegio.interrapidisi\\frontendsistemacolegio.interrapidisi\\src\\app\\services\\auth.guard.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot, Router, UrlTree } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { AuthService } from './auth.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthGuard implements CanActivate {\n  constructor(private authService: AuthService, private router: Router) {}\n\n  canActivate(\n    route: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): boolean | UrlTree | Observable<boolean | UrlTree> | Promise<boolean | UrlTree> {\n    if (this.authService.isAuthenticated()) {\n      // Check for role-based access if required\n      const requiredRole = route.data['role'] as string;\n      if (requiredRole) {\n        if (requiredRole === 'admin' && !this.authService.isAdmin()) {\n          return this.router.createUrlTree(['/login'], { \n            queryParams: { returnUrl: state.url, accessDenied: true } \n          });\n        }\n        if (requiredRole === 'student' && !this.authService.isStudent()) {\n          return this.router.createUrlTree(['/login'], { \n            queryParams: { returnUrl: state.url, accessDenied: true } \n          });\n        }\n        if (requiredRole === 'professor' && !this.authService.isProfessor()) {\n          return this.router.createUrlTree(['/login'], { \n            queryParams: { returnUrl: state.url, accessDenied: true } \n          });\n        }\n      }\n      return true;\n    }\n    return this.router.createUrlTree(['/login'], { \n      queryParams: { returnUrl: state.url } \n    });\n  }\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}