{"ast":null,"code":"import { throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { environment } from '../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class SubjectService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = `${environment.apiUrl}/subjects`;\n  }\n  getSubjects() {\n    return this.http.get(this.apiUrl).pipe(catchError(this.handleError));\n  }\n  getSubject(id) {\n    return this.http.get(`${this.apiUrl}/${id}`).pipe(catchError(this.handleError));\n  }\n  getSubjectsByIds(ids) {\n    const queryParams = ids.map(id => `ids=${id}`).join('&');\n    return this.http.get(`${this.apiUrl}/multiple?${queryParams}`).pipe(catchError(this.handleError));\n  }\n  getStudentsBySubject(id) {\n    return this.http.get(`${this.apiUrl}/${id}/students`).pipe(catchError(this.handleError));\n  }\n  handleError(error) {\n    let errorMessage = 'An unknown error occurred!';\n    if (error.error instanceof ErrorEvent) {\n      // Client-side error\n      errorMessage = `Error: ${error.error.message}`;\n    } else if (error.error && error.error.message) {\n      // Server-side error with message\n      errorMessage = error.error.message;\n    } else if (error.status) {\n      // HTTP error\n      errorMessage = `Error ${error.status}: ${error.statusText}`;\n    }\n    return throwError(() => new Error(errorMessage));\n  }\n  static {\n    this.ɵfac = function SubjectService_Factory(t) {\n      return new (t || SubjectService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: SubjectService,\n      factory: SubjectService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"mappings":"AAEA,SAAqBA,UAAU,QAAQ,MAAM;AAC7C,SAASC,UAAU,QAAQ,gBAAgB;AAG3C,SAASC,WAAW,QAAQ,gCAAgC;;;AAK5D,OAAM,MAAOC,cAAc;EAGzBC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IAFhB,WAAM,GAAG,GAAGH,WAAW,CAACI,MAAM,WAAW;EAET;EAExCC,WAAW;IACT,OAAO,IAAI,CAACF,IAAI,CAACG,GAAG,CAAY,IAAI,CAACF,MAAM,CAAC,CACzCG,IAAI,CAACR,UAAU,CAAC,IAAI,CAACS,WAAW,CAAC,CAAC;EACvC;EAEAC,UAAU,CAACC,EAAU;IACnB,OAAO,IAAI,CAACP,IAAI,CAACG,GAAG,CAAU,GAAG,IAAI,CAACF,MAAM,IAAIM,EAAE,EAAE,CAAC,CAClDH,IAAI,CAACR,UAAU,CAAC,IAAI,CAACS,WAAW,CAAC,CAAC;EACvC;EAEAG,gBAAgB,CAACC,GAAa;IAC5B,MAAMC,WAAW,GAAGD,GAAG,CAACE,GAAG,CAACJ,EAAE,IAAI,OAAOA,EAAE,EAAE,CAAC,CAACK,IAAI,CAAC,GAAG,CAAC;IACxD,OAAO,IAAI,CAACZ,IAAI,CAACG,GAAG,CAAY,GAAG,IAAI,CAACF,MAAM,aAAaS,WAAW,EAAE,CAAC,CACtEN,IAAI,CAACR,UAAU,CAAC,IAAI,CAACS,WAAW,CAAC,CAAC;EACvC;EAEAQ,oBAAoB,CAACN,EAAU;IAC7B,OAAO,IAAI,CAACP,IAAI,CAACG,GAAG,CAAY,GAAG,IAAI,CAACF,MAAM,IAAIM,EAAE,WAAW,CAAC,CAC7DH,IAAI,CAACR,UAAU,CAAC,IAAI,CAACS,WAAW,CAAC,CAAC;EACvC;EAEQA,WAAW,CAACS,KAAU;IAC5B,IAAIC,YAAY,GAAG,4BAA4B;IAC/C,IAAID,KAAK,CAACA,KAAK,YAAYE,UAAU,EAAE;MACrC;MACAD,YAAY,GAAG,UAAUD,KAAK,CAACA,KAAK,CAACG,OAAO,EAAE;KAC/C,MAAM,IAAIH,KAAK,CAACA,KAAK,IAAIA,KAAK,CAACA,KAAK,CAACG,OAAO,EAAE;MAC7C;MACAF,YAAY,GAAGD,KAAK,CAACA,KAAK,CAACG,OAAO;KACnC,MAAM,IAAIH,KAAK,CAACI,MAAM,EAAE;MACvB;MACAH,YAAY,GAAG,SAASD,KAAK,CAACI,MAAM,KAAKJ,KAAK,CAACK,UAAU,EAAE;;IAE7D,OAAOxB,UAAU,CAAC,MAAM,IAAIyB,KAAK,CAACL,YAAY,CAAC,CAAC;EAClD;;;uBAvCWjB,cAAc;IAAA;EAAA;;;aAAdA,cAAc;MAAAuB,SAAdvB,cAAc;MAAAwB,YAFb;IAAM;EAAA","names":["throwError","catchError","environment","SubjectService","constructor","http","apiUrl","getSubjects","get","pipe","handleError","getSubject","id","getSubjectsByIds","ids","queryParams","map","join","getStudentsBySubject","error","errorMessage","ErrorEvent","message","status","statusText","Error","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\hansk\\Videos\\Prueba interrapidisimp\\frontend\\src\\app\\services\\subject.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { Subject } from '../models/subject.model';\nimport { Student } from '../models/student.model';\nimport { environment } from '../../environments/environment';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class SubjectService {\n  private apiUrl = `${environment.apiUrl}/subjects`;\n\n  constructor(private http: HttpClient) { }\n\n  getSubjects(): Observable<Subject[]> {\n    return this.http.get<Subject[]>(this.apiUrl)\n      .pipe(catchError(this.handleError));\n  }\n\n  getSubject(id: number): Observable<Subject> {\n    return this.http.get<Subject>(`${this.apiUrl}/${id}`)\n      .pipe(catchError(this.handleError));\n  }\n\n  getSubjectsByIds(ids: number[]): Observable<Subject[]> {\n    const queryParams = ids.map(id => `ids=${id}`).join('&');\n    return this.http.get<Subject[]>(`${this.apiUrl}/multiple?${queryParams}`)\n      .pipe(catchError(this.handleError));\n  }\n\n  getStudentsBySubject(id: number): Observable<Student[]> {\n    return this.http.get<Student[]>(`${this.apiUrl}/${id}/students`)\n      .pipe(catchError(this.handleError));\n  }\n\n  private handleError(error: any) {\n    let errorMessage = 'An unknown error occurred!';\n    if (error.error instanceof ErrorEvent) {\n      // Client-side error\n      errorMessage = `Error: ${error.error.message}`;\n    } else if (error.error && error.error.message) {\n      // Server-side error with message\n      errorMessage = error.error.message;\n    } else if (error.status) {\n      // HTTP error\n      errorMessage = `Error ${error.status}: ${error.statusText}`;\n    }\n    return throwError(() => new Error(errorMessage));\n  }\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}