{"ast":null,"code":"import { BehaviorSubject, throwError } from 'rxjs';\nimport { catchError, tap, map } from 'rxjs/operators';\nimport { JwtHelperService } from '@auth0/angular-jwt';\nimport { environment } from '../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nexport class AutenticacionServicio {\n  constructor(http, router) {\n    this.http = http;\n    this.router = router;\n    this.apiUrl = `${environment.apiUrl}/auth`;\n    this.usuarioSubject = new BehaviorSubject(null);\n    this.usuario$ = this.usuarioSubject.asObservable();\n    this.jwtHelper = new JwtHelperService();\n    this.autoLogin();\n  }\n  registrar(datosRegistro) {\n    return this.http.post(`${this.apiUrl}/register`, datosRegistro).pipe(catchError(this.manejarError), tap(respuesta => {\n      const datosAuth = respuesta.data;\n      this.manejarAutenticacion(datosAuth);\n    }), map(respuesta => respuesta.data));\n  }\n  login(datosLogin) {\n    return this.http.post(`${this.apiUrl}/login`, datosLogin).pipe(catchError(this.manejarError), tap(respuesta => {\n      const datosAuth = respuesta.data;\n      this.manejarAutenticacion(datosAuth);\n    }), map(respuesta => respuesta.data));\n  }\n  logout() {\n    localStorage.removeItem('userData');\n    this.usuarioSubject.next(null);\n    this.router.navigate(['/login']);\n    if (this.temporizadorExpiracionToken) {\n      clearTimeout(this.temporizadorExpiracionToken);\n    }\n    this.temporizadorExpiracionToken = null;\n  }\n  autoLogin() {\n    const userData = localStorage.getItem('userData');\n    if (!userData) {\n      return;\n    }\n    const datosParseados = JSON.parse(userData);\n    console.log('Datos recuperados del localStorage:', datosParseados);\n    const token = datosParseados._token;\n    if (this.jwtHelper.isTokenExpired(token)) {\n      this.logout();\n      return;\n    }\n    const fechaExpiracion = new Date(datosParseados._tokenExpirationDate);\n    if (fechaExpiracion <= new Date()) {\n      this.logout();\n      return;\n    }\n    // Decodificar el token para obtener información adicional\n    const tokenDecodificado = this.jwtHelper.decodeToken(token);\n    console.log('Token decodificado:', tokenDecodificado);\n    // Intentar obtener studentId primero del localStorage y luego del token\n    let studentId = datosParseados.studentId;\n    if (studentId === undefined && tokenDecodificado.studentId) {\n      studentId = typeof tokenDecodificado.studentId === 'string' ? parseInt(tokenDecodificado.studentId, 10) : tokenDecodificado.studentId;\n    }\n    // Intentar obtener professorId primero del localStorage y luego del token\n    let professorId = datosParseados.professorId;\n    if (professorId === undefined && tokenDecodificado.professorId) {\n      professorId = typeof tokenDecodificado.professorId === 'string' ? parseInt(tokenDecodificado.professorId, 10) : tokenDecodificado.professorId;\n    }\n    const usuario = {\n      id: datosParseados.id,\n      name: datosParseados.name,\n      email: datosParseados.email,\n      role: datosParseados.role,\n      studentId: studentId,\n      professorId: professorId\n    };\n    console.log('Usuario reconstruido:', usuario);\n    this.usuarioSubject.next(usuario);\n    const duracionExpiracion = fechaExpiracion.getTime() - new Date().getTime();\n    this.autoLogout(duracionExpiracion);\n  }\n  autoLogout(duracionExpiracion) {\n    this.temporizadorExpiracionToken = setTimeout(() => {\n      this.logout();\n    }, duracionExpiracion);\n  }\n  obtenerToken() {\n    const userData = localStorage.getItem('userData');\n    if (!userData) {\n      return null;\n    }\n    const datosParseados = JSON.parse(userData);\n    return datosParseados._token;\n  }\n  estaAutenticado() {\n    const token = this.obtenerToken();\n    if (!token) {\n      return false;\n    }\n    return !this.jwtHelper.isTokenExpired(token);\n  }\n  esEstudiante() {\n    return this.usuarioSubject.value?.role === 'student';\n  }\n  esAdmin() {\n    return this.usuarioSubject.value?.role === 'admin';\n  }\n  esProfesor() {\n    return this.usuarioSubject.value?.role === 'professor';\n  }\n  obtenerIdUsuarioActual() {\n    return this.usuarioSubject.value?.id || null;\n  }\n  obtenerUsuarioActualId() {\n    return this.usuarioSubject.value?.id || null;\n    console.log('ID del usuario actual obtenido:', this.usuarioSubject.value?.id || null);\n  }\n  manejarAutenticacion(datosAuth) {\n    const tokenDecodificado = this.jwtHelper.decodeToken(datosAuth.token);\n    const fechaExpiracion = new Date(tokenDecodificado.exp * 1000);\n    // Extraer studentId y professorId del token decodificado\n    const studentId = tokenDecodificado.studentId ? typeof tokenDecodificado.studentId === 'string' ? parseInt(tokenDecodificado.studentId, 10) : tokenDecodificado.studentId : undefined;\n    const professorId = tokenDecodificado.professorId ? typeof tokenDecodificado.professorId === 'string' ? parseInt(tokenDecodificado.professorId, 10) : tokenDecodificado.professorId : undefined;\n    const usuario = {\n      id: datosAuth.userId,\n      name: datosAuth.name,\n      email: datosAuth.email,\n      role: datosAuth.role,\n      studentId: studentId,\n      professorId: professorId\n    };\n    const userData = {\n      ...usuario,\n      _token: datosAuth.token,\n      _tokenExpirationDate: fechaExpiracion.toISOString()\n    };\n    console.log('Guardando datos de usuario:', userData);\n    localStorage.setItem('userData', JSON.stringify(userData));\n    this.usuarioSubject.next(usuario);\n    this.autoLogout(datosAuth.expiresIn * 1000);\n  }\n  obtenerPerfilUsuario(userId) {\n    return this.http.get(`${this.apiUrl}/profile/${userId}`).pipe(catchError(this.manejarError), map(respuesta => respuesta.data));\n  }\n  manejarError(errorRes) {\n    let mensajeError = '¡Ocurrió un error desconocido!';\n    if (!errorRes.error || !errorRes.error.message) {\n      return throwError(() => new Error(mensajeError));\n    }\n    return throwError(() => new Error(errorRes.error.message));\n  }\n  obtenerUsuarioActual() {\n    return this.usuario$;\n  }\n  obtenerValorUsuarioActual() {\n    return this.usuarioSubject.value;\n  }\n  static {\n    this.ɵfac = function AutenticacionServicio_Factory(t) {\n      return new (t || AutenticacionServicio)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AutenticacionServicio,\n      factory: AutenticacionServicio.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"mappings":"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","names":["BehaviorSubject","throwError","catchError","tap","map","JwtHelperService","environment","AutenticacionServicio","constructor","http","router","apiUrl","usuarioSubject","asObservable","autoLogin","registrar","datosRegistro","post","pipe","manejarError","respuesta","datosAuth","data","manejarAutenticacion","login","datosLogin","logout","localStorage","removeItem","next","navigate","temporizadorExpiracionToken","clearTimeout","userData","getItem","datosParseados","JSON","parse","console","log","token","_token","jwtHelper","isTokenExpired","fechaExpiracion","Date","_tokenExpirationDate","tokenDecodificado","decodeToken","studentId","undefined","parseInt","professorId","usuario","id","name","email","role","duracionExpiracion","getTime","autoLogout","setTimeout","obtenerToken","estaAutenticado","esEstudiante","value","esAdmin","esProfesor","obtenerIdUsuarioActual","obtenerUsuarioActualId","exp","userId","toISOString","setItem","stringify","expiresIn","obtenerPerfilUsuario","get","errorRes","mensajeError","error","message","Error","obtenerUsuarioActual","usuario$","obtenerValorUsuarioActual","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\hansk\\Videos\\frontendsistemacolegio.interrapidisi\\frontendsistemacolegio.interrapidisi\\src\\app\\servicios\\autenticacion.servicio.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { BehaviorSubject, Observable, throwError } from 'rxjs';\nimport { catchError, tap, map } from 'rxjs/operators';\nimport { LoginRequest, RegisterRequest, AuthResponse, UserProfile } from '../models/auth.model';\nimport { Router } from '@angular/router';\nimport { JwtHelperService } from '@auth0/angular-jwt';\nimport { environment } from '../../environments/environment';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AutenticacionServicio {\n  private apiUrl = `${environment.apiUrl}/auth`;\n  private temporizadorExpiracionToken: any;\n  private usuarioSubject = new BehaviorSubject<UserProfile | null>(null);\n  usuario$ = this.usuarioSubject.asObservable();\n  private jwtHelper = new JwtHelperService();\n\n  constructor(private http: HttpClient, private router: Router) {\n    this.autoLogin();\n  }\n\n  registrar(datosRegistro: RegisterRequest): Observable<AuthResponse> {\n    return this.http.post<any>(`${this.apiUrl}/register`, datosRegistro)\n      .pipe(\n        catchError(this.manejarError),\n        tap(respuesta => {\n          const datosAuth = respuesta.data;\n          this.manejarAutenticacion(datosAuth);\n        }),\n        map(respuesta => respuesta.data)\n      );\n  }\n\n  login(datosLogin: LoginRequest): Observable<AuthResponse> {\n    return this.http.post<any>(`${this.apiUrl}/login`, datosLogin)\n      .pipe(\n        catchError(this.manejarError),\n        tap(respuesta => {\n          const datosAuth = respuesta.data;\n          this.manejarAutenticacion(datosAuth);\n        }),\n        map(respuesta => respuesta.data)\n      );\n  }\n\n  logout() {\n    localStorage.removeItem('userData');\n    this.usuarioSubject.next(null);\n    this.router.navigate(['/login']);\n    if (this.temporizadorExpiracionToken) {\n      clearTimeout(this.temporizadorExpiracionToken);\n    }\n    this.temporizadorExpiracionToken = null;\n  }\n\n  autoLogin() {\n    const userData = localStorage.getItem('userData');\n    if (!userData) {\n      return;\n    }\n    \n    const datosParseados: any = JSON.parse(userData);\n    console.log('Datos recuperados del localStorage:', datosParseados);\n    \n    const token = datosParseados._token;\n    if (this.jwtHelper.isTokenExpired(token)) {\n      this.logout();\n      return;\n    }\n    \n    const fechaExpiracion = new Date(datosParseados._tokenExpirationDate);\n    if (fechaExpiracion <= new Date()) {\n      this.logout();\n      return;\n    }\n    \n    // Decodificar el token para obtener información adicional\n    const tokenDecodificado = this.jwtHelper.decodeToken(token);\n    console.log('Token decodificado:', tokenDecodificado);\n    \n    // Intentar obtener studentId primero del localStorage y luego del token\n    let studentId = datosParseados.studentId;\n    if (studentId === undefined && tokenDecodificado.studentId) {\n      studentId = typeof tokenDecodificado.studentId === 'string' ? \n        parseInt(tokenDecodificado.studentId, 10) : tokenDecodificado.studentId;\n    }\n    \n    // Intentar obtener professorId primero del localStorage y luego del token\n    let professorId = datosParseados.professorId;\n    if (professorId === undefined && tokenDecodificado.professorId) {\n      professorId = typeof tokenDecodificado.professorId === 'string' ? \n        parseInt(tokenDecodificado.professorId, 10) : tokenDecodificado.professorId;\n    }\n    \n    const usuario: UserProfile = {\n      id: datosParseados.id,\n      name: datosParseados.name,\n      email: datosParseados.email,\n      role: datosParseados.role,\n      studentId: studentId,\n      professorId: professorId\n    };\n    \n    console.log('Usuario reconstruido:', usuario);\n    this.usuarioSubject.next(usuario);\n    \n    const duracionExpiracion = fechaExpiracion.getTime() - new Date().getTime();\n    this.autoLogout(duracionExpiracion);\n  }\n\n  autoLogout(duracionExpiracion: number) {\n    this.temporizadorExpiracionToken = setTimeout(() => {\n      this.logout();\n    }, duracionExpiracion);\n  }\n\n  obtenerToken(): string | null {\n    const userData = localStorage.getItem('userData');\n    if (!userData) {\n      return null;\n    }\n    const datosParseados = JSON.parse(userData);\n    return datosParseados._token;\n  }\n\n  estaAutenticado(): boolean {\n    const token = this.obtenerToken();\n    if (!token) {\n      return false;\n    }\n    return !this.jwtHelper.isTokenExpired(token);\n  }\n\n  esEstudiante(): boolean {\n    return this.usuarioSubject.value?.role === 'student';\n  }\n\n  esAdmin(): boolean {\n    return this.usuarioSubject.value?.role === 'admin';\n  }\n\n  esProfesor(): boolean {\n    return this.usuarioSubject.value?.role === 'professor';\n  }\n\n  obtenerIdUsuarioActual(): number | null {\n    return this.usuarioSubject.value?.id || null;\n  }\n\n  obtenerUsuarioActualId(): number | null {\n    return this.usuarioSubject.value?.id || null;\n    console.log('ID del usuario actual obtenido:', this.usuarioSubject.value?.id || null);\n  }\n\n  private manejarAutenticacion(datosAuth: AuthResponse) {\n    const tokenDecodificado = this.jwtHelper.decodeToken(datosAuth.token);\n    const fechaExpiracion = new Date(tokenDecodificado.exp * 1000);\n    \n    // Extraer studentId y professorId del token decodificado\n    const studentId = tokenDecodificado.studentId ? \n      (typeof tokenDecodificado.studentId === 'string' ? \n        parseInt(tokenDecodificado.studentId, 10) : tokenDecodificado.studentId) : undefined;\n    \n    const professorId = tokenDecodificado.professorId ? \n      (typeof tokenDecodificado.professorId === 'string' ? \n        parseInt(tokenDecodificado.professorId, 10) : tokenDecodificado.professorId) : undefined;\n    \n    const usuario: UserProfile = {\n      id: datosAuth.userId,\n      name: datosAuth.name,\n      email: datosAuth.email,\n      role: datosAuth.role,\n      studentId: studentId,\n      professorId: professorId\n    };\n    \n    const userData = {\n      ...usuario,\n      _token: datosAuth.token,\n      _tokenExpirationDate: fechaExpiracion.toISOString()\n    };\n    \n    console.log('Guardando datos de usuario:', userData);\n    localStorage.setItem('userData', JSON.stringify(userData));\n    this.usuarioSubject.next(usuario);\n    this.autoLogout(datosAuth.expiresIn * 1000);\n  }\n\n  obtenerPerfilUsuario(userId: number): Observable<UserProfile> {\n    return this.http.get<any>(`${this.apiUrl}/profile/${userId}`)\n      .pipe(\n        catchError(this.manejarError),\n        map(respuesta => respuesta.data)\n      );\n  }\n\n  private manejarError(errorRes: any) {\n    let mensajeError = '¡Ocurrió un error desconocido!';\n    if (!errorRes.error || !errorRes.error.message) {\n      return throwError(() => new Error(mensajeError));\n    }\n    return throwError(() => new Error(errorRes.error.message));\n  }\n\n  obtenerUsuarioActual(): Observable<UserProfile | null> {\n    return this.usuario$;\n  }\n\n  obtenerValorUsuarioActual(): UserProfile | null {\n    return this.usuarioSubject.value;\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}