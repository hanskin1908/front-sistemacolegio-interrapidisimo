{"ast":null,"code":"import { BehaviorSubject, throwError } from 'rxjs';\nimport { catchError, tap, map } from 'rxjs/operators';\nimport { JwtHelperService } from '@auth0/angular-jwt';\nimport { environment } from '../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nexport class AuthService {\n  constructor(http, router) {\n    this.http = http;\n    this.router = router;\n    this.apiUrl = `${environment.apiUrl}/auth`;\n    this.userSubject = new BehaviorSubject(null);\n    this.user$ = this.userSubject.asObservable();\n    this.jwtHelper = new JwtHelperService();\n    this.autoLogin();\n  }\n  register(registerData) {\n    return this.http.post(`${this.apiUrl}/register`, registerData).pipe(catchError(this.handleError), tap(response => {\n      // Extract AuthResponse from Response<AuthResponse>\n      const authData = response.data;\n      this.handleAuthentication(authData);\n    }),\n    // Map to extract the data property from the response\n    map(response => response.data));\n  }\n  login(loginData) {\n    return this.http.post(`${this.apiUrl}/login`, loginData).pipe(catchError(this.handleError), tap(response => {\n      // Extract AuthResponse from Response<AuthResponse>\n      const authData = response.data;\n      this.handleAuthentication(authData);\n      // Navegar después de que el estado se haya actualizado\n      this.router.navigate(['/']);\n    }),\n    // Map to extract the data property from the response\n    map(response => response.data));\n  }\n  logout() {\n    localStorage.removeItem('userData');\n    this.userSubject.next(null);\n    this.router.navigate(['/login']);\n    if (this.tokenExpirationTimer) {\n      clearTimeout(this.tokenExpirationTimer);\n    }\n    this.tokenExpirationTimer = null;\n  }\n  autoLogin() {\n    const userData = localStorage.getItem('userData');\n    if (!userData) {\n      return;\n    }\n    try {\n      const parsedData = JSON.parse(userData);\n      // Check if token is expired\n      const token = parsedData._token;\n      if (!token || this.jwtHelper.isTokenExpired(token)) {\n        this.logout();\n        return;\n      }\n      const expirationDate = new Date(parsedData._tokenExpirationDate);\n      if (expirationDate <= new Date()) {\n        this.logout();\n        return;\n      }\n      // Crear usuario sin conversiones complejas para mejorar rendimiento\n      const user = {\n        id: parsedData.id,\n        name: parsedData.name,\n        email: parsedData.email,\n        role: parsedData.role,\n        studentId: parsedData.studentId ? Number(parsedData.studentId) : undefined,\n        professorId: parsedData.professorId ? Number(parsedData.professorId) : undefined\n      };\n      this.userSubject.next(user);\n      // Calcular tiempo de expiración\n      const expirationDuration = expirationDate.getTime() - new Date().getTime();\n      if (expirationDuration > 0) {\n        this.autoLogout(expirationDuration);\n      } else {\n        this.logout();\n      }\n    } catch (error) {\n      console.error('Error during auto login:', error);\n      this.logout();\n    }\n  }\n  autoLogout(expirationDuration) {\n    this.tokenExpirationTimer = setTimeout(() => {\n      this.logout();\n    }, expirationDuration);\n  }\n  getToken() {\n    const userData = localStorage.getItem('userData');\n    if (!userData) {\n      return null;\n    }\n    const parsedData = JSON.parse(userData);\n    return parsedData._token;\n  }\n  isAuthenticated() {\n    const token = this.getToken();\n    if (!token) {\n      return false;\n    }\n    return !this.jwtHelper.isTokenExpired(token);\n  }\n  isStudent() {\n    return this.userSubject.value?.role === 'student';\n  }\n  isAdmin() {\n    return this.userSubject.value?.role === 'admin';\n  }\n  isProfessor() {\n    return this.userSubject.value?.role === 'professor';\n  }\n  getCurrentUserId() {\n    return this.userSubject.value?.id || null;\n  }\n  handleAuthentication(authData) {\n    // Decode token to get expiration date\n    const decodedToken = this.jwtHelper.decodeToken(authData.token);\n    const expirationDate = new Date(decodedToken.exp * 1000);\n    // Create user profile\n    const user = {\n      id: authData.userId,\n      name: authData.name,\n      email: authData.email,\n      role: authData.role,\n      ...(authData.studentId && {\n        studentId: authData.studentId\n      }),\n      ...(authData.professorId && {\n        professorId: authData.professorId\n      })\n    };\n    // Actualizar el estado primero\n    this.userSubject.next(user);\n    // Store user data\n    const userData = {\n      ...user,\n      _token: authData.token,\n      _tokenExpirationDate: expirationDate.toISOString()\n    };\n    localStorage.setItem('userData', JSON.stringify(userData));\n    this.autoLogout(authData.expiresIn * 1000);\n  }\n  getUserProfile(userId) {\n    return this.http.get(`${this.apiUrl}/profile/${userId}`).pipe(catchError(this.handleError), map(response => response.data));\n  }\n  handleError(errorRes) {\n    let errorMessage = 'An unknown error occurred!';\n    if (!errorRes.error || !errorRes.error.message) {\n      return throwError(() => new Error(errorMessage));\n    }\n    return throwError(() => new Error(errorRes.error.message));\n  }\n  // Obtiene el usuario actual como un Observable\n  getCurrentUser() {\n    return this.user$;\n  }\n  // Obtiene el valor actual del usuario sin necesidad de suscripción\n  getCurrentUserValue() {\n    return this.userSubject.value;\n  }\n  static {\n    this.ɵfac = function AuthService_Factory(t) {\n      return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthService,\n      factory: AuthService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"mappings":"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","names":["BehaviorSubject","throwError","catchError","tap","map","JwtHelperService","environment","AuthService","constructor","http","router","apiUrl","userSubject","asObservable","autoLogin","register","registerData","post","pipe","handleError","response","authData","data","handleAuthentication","login","loginData","navigate","logout","localStorage","removeItem","next","tokenExpirationTimer","clearTimeout","userData","getItem","parsedData","JSON","parse","token","_token","jwtHelper","isTokenExpired","expirationDate","Date","_tokenExpirationDate","user","id","name","email","role","studentId","Number","undefined","professorId","expirationDuration","getTime","autoLogout","error","console","setTimeout","getToken","isAuthenticated","isStudent","value","isAdmin","isProfessor","getCurrentUserId","decodedToken","decodeToken","exp","userId","toISOString","setItem","stringify","expiresIn","getUserProfile","get","errorRes","errorMessage","message","Error","getCurrentUser","user$","getCurrentUserValue","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\hansk\\Videos\\frontendsistemacolegio.interrapidisi\\frontendsistemacolegio.interrapidisi\\src\\app\\services\\auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { BehaviorSubject, Observable, throwError } from 'rxjs';\nimport { catchError, tap, map } from 'rxjs/operators';\nimport { LoginRequest, RegisterRequest, AuthResponse, UserProfile } from '../models/auth.model';\nimport { Router } from '@angular/router';\nimport { JwtHelperService } from '@auth0/angular-jwt';\nimport { environment } from '../../environments/environment';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n  private apiUrl = `${environment.apiUrl}/auth`;\n  private tokenExpirationTimer: any;\n  private userSubject = new BehaviorSubject<UserProfile | null>(null);\n  user$ = this.userSubject.asObservable();\n  private jwtHelper = new JwtHelperService();\n\n  constructor(private http: HttpClient, private router: Router) {\n    this.autoLogin();\n  }\n\n  register(registerData: RegisterRequest): Observable<AuthResponse> {\n    return this.http.post<any>(`${this.apiUrl}/register`, registerData)\n      .pipe(\n        catchError(this.handleError),\n        tap(response => {\n          // Extract AuthResponse from Response<AuthResponse>\n          const authData = response.data;\n          this.handleAuthentication(authData);\n        }),\n        // Map to extract the data property from the response\n        map(response => response.data)\n      );\n  }\n\n  login(loginData: LoginRequest): Observable<AuthResponse> {\n    return this.http.post<any>(`${this.apiUrl}/login`, loginData)\n      .pipe(\n        catchError(this.handleError),\n        tap(response => {\n          // Extract AuthResponse from Response<AuthResponse>\n          const authData = response.data;\n          this.handleAuthentication(authData);\n          // Navegar después de que el estado se haya actualizado\n          this.router.navigate(['/']);\n        }),\n        // Map to extract the data property from the response\n        map(response => response.data)\n      );\n  }\n\n  logout() {\n    localStorage.removeItem('userData');\n    this.userSubject.next(null);\n    this.router.navigate(['/login']);\n    if (this.tokenExpirationTimer) {\n      clearTimeout(this.tokenExpirationTimer);\n    }\n    this.tokenExpirationTimer = null;\n  }\n\n  autoLogin() {\n    const userData = localStorage.getItem('userData');\n    if (!userData) {\n      return;\n    }\n\n    try {\n      const parsedData: {\n        id: number;\n        name: string;\n        email: string;\n        role: string;\n        studentId?: string | number;\n        professorId?: string | number;\n        _token: string;\n        _tokenExpirationDate: string;\n      } = JSON.parse(userData);\n\n      // Check if token is expired\n      const token = parsedData._token;\n      if (!token || this.jwtHelper.isTokenExpired(token)) {\n        this.logout();\n        return;\n      }\n\n      const expirationDate = new Date(parsedData._tokenExpirationDate);\n      if (expirationDate <= new Date()) {\n        this.logout();\n        return;\n      }\n\n      // Crear usuario sin conversiones complejas para mejorar rendimiento\n      const user: UserProfile = {\n        id: parsedData.id,\n        name: parsedData.name,\n        email: parsedData.email,\n        role: parsedData.role,\n        studentId: parsedData.studentId ? Number(parsedData.studentId) : undefined,\n        professorId: parsedData.professorId ? Number(parsedData.professorId) : undefined\n      };\n\n      this.userSubject.next(user);\n      \n      // Calcular tiempo de expiración\n      const expirationDuration = expirationDate.getTime() - new Date().getTime();\n      if (expirationDuration > 0) {\n        this.autoLogout(expirationDuration);\n      } else {\n        this.logout();\n      }\n    } catch (error) {\n      console.error('Error during auto login:', error);\n      this.logout();\n    }\n  }\n\n  autoLogout(expirationDuration: number) {\n    this.tokenExpirationTimer = setTimeout(() => {\n      this.logout();\n    }, expirationDuration);\n  }\n\n  getToken(): string | null {\n    const userData = localStorage.getItem('userData');\n    if (!userData) {\n      return null;\n    }\n    const parsedData = JSON.parse(userData);\n    return parsedData._token;\n  }\n\n  isAuthenticated(): boolean {\n    const token = this.getToken();\n    if (!token) {\n      return false;\n    }\n    return !this.jwtHelper.isTokenExpired(token);\n  }\n\n  isStudent(): boolean {\n    return this.userSubject.value?.role === 'student';\n  }\n\n  isAdmin(): boolean {\n    return this.userSubject.value?.role === 'admin';\n  }\n\n  isProfessor(): boolean {\n    return this.userSubject.value?.role === 'professor';\n  }\n\n  getCurrentUserId(): number | null {\n    return this.userSubject.value?.id || null;\n  }\n\n  private handleAuthentication(authData: AuthResponse) {\n    // Decode token to get expiration date\n    const decodedToken = this.jwtHelper.decodeToken(authData.token);\n    const expirationDate = new Date(decodedToken.exp * 1000);\n    \n    // Create user profile\n    const user: UserProfile = {\n      id: authData.userId,\n      name: authData.name,\n      email: authData.email,\n      role: authData.role,\n      ...(authData.studentId && { studentId: authData.studentId }),\n      ...(authData.professorId && { professorId: authData.professorId })\n    };\n    \n    // Actualizar el estado primero\n    this.userSubject.next(user);\n    \n    // Store user data\n    const userData = {\n      ...user,\n      _token: authData.token,\n      _tokenExpirationDate: expirationDate.toISOString()\n    };\n    \n    localStorage.setItem('userData', JSON.stringify(userData));\n    this.autoLogout(authData.expiresIn * 1000);\n  }\n\n  getUserProfile(userId: number): Observable<UserProfile> {\n    return this.http.get<any>(`${this.apiUrl}/profile/${userId}`)\n      .pipe(\n        catchError(this.handleError),\n        map(response => response.data)\n      );\n  }\n\n  private handleError(errorRes: any) {\n    let errorMessage = 'An unknown error occurred!';\n    if (!errorRes.error || !errorRes.error.message) {\n      return throwError(() => new Error(errorMessage));\n    }\n    return throwError(() => new Error(errorRes.error.message));\n  }\n\n  // Obtiene el usuario actual como un Observable\n  getCurrentUser(): Observable<UserProfile | null> {\n    return this.user$;\n  }\n\n  // Obtiene el valor actual del usuario sin necesidad de suscripción\n  getCurrentUserValue(): UserProfile | null {\n    return this.userSubject.value;\n  }\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}