{"ast":null,"code":"\"use strict\";\n\n// COMPONENTE ORIGINAL COMENTADO POR MIGRACIÓN\n/*\r\nimport { Component, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { Professor } from '../../models/professor.model';\r\nimport { ProfessorService } from '../../services/professor.service';\r\n\r\n@Component({\r\n  selector: 'app-professor-form',\r\n  templateUrl: './professor-form.component.html',\r\n  styleUrls: ['./professor-form.component.css']\r\n})\r\nexport class ProfessorFormComponent implements OnInit {\r\n  professorForm!: FormGroup;\r\n  isLoading = false;\r\n  error: string | null = null;\r\n  isEditMode = false;\r\n  professorId?: number;\r\n\r\n  constructor(\r\n    private formBuilder: FormBuilder,\r\n    private professorService: ProfessorService,\r\n    private route: ActivatedRoute,\r\n    private router: Router\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    this.initForm();\r\n\r\n    // Verificar si estamos en modo edición\r\n    this.route.params.subscribe(params => {\r\n      if (params['id']) {\r\n        this.isEditMode = true;\r\n        this.professorId = +params['id'];\r\n        this.loadProfessorData(this.professorId);\r\n      }\r\n    });\r\n  }\r\n\r\n  private initForm(): void {\r\n    this.professorForm = this.formBuilder.group({\r\n      nombre: ['', [Validators.required]],\r\n      apellido: ['', [Validators.required]],\r\n      email: ['', [Validators.required, Validators.email]],\r\n      departamento: ['', [Validators.required]],\r\n      especialidad: [''],\r\n      telefono: [''],\r\n      direccion: ['']\r\n    });\r\n  }\r\n\r\n  private loadProfessorData(id: number): void {\r\n    this.isLoading = true;\r\n    this.error = null;\r\n\r\n    this.professorService.getProfessor(id).subscribe({\r\n      next: (professor) => {\r\n        this.professorForm.patchValue({\r\n          nombre: professor.nombre || '',\r\n          apellido: professor.apellido || '',\r\n          email: professor.email,\r\n          departamento: professor.departamento || '',\r\n          especialidad: professor.especialidad || '',\r\n          telefono: professor.telefono || '',\r\n          direccion: professor.direccion || ''\r\n        });\r\n        this.isLoading = false;\r\n      },\r\n      error: (error) => {\r\n        this.error = error.message || 'Error al cargar los datos del profesor';\r\n        this.isLoading = false;\r\n      }\r\n    });\r\n  }\r\n\r\n  onSubmit(): void {\r\n    if (this.professorForm.invalid) {\r\n      return;\r\n    }\r\n\r\n    this.isLoading = true;\r\n    this.error = null;\r\n\r\n    // Crear objeto que coincida con lo que espera el backend\r\n    const professorData: Professor = {\r\n      nombre: `${this.professorForm.value.nombre} ${this.professorForm.value.apellido}`, // Combinamos nombre y apellido\r\n      email: this.professorForm.value.email,\r\n      departamento: this.professorForm.value.departamento,\r\n      materias: [] // Inicialmente sin materias asignadas\r\n    };\r\n\r\n    if (this.isEditMode && this.professorId) {\r\n      this.professorService.updateProfessor(this.professorId, professorData).subscribe({\r\n        next: () => {\r\n          this.isLoading = false;\r\n          this.router.navigate(['/professors']);\r\n        },\r\n        error: (error) => {\r\n          this.isLoading = false;\r\n          this.error = error.message || 'Error al actualizar el profesor';\r\n        }\r\n      });\r\n    } else {\r\n      this.professorService.createProfessor(professorData).subscribe({\r\n        next: () => {\r\n          this.isLoading = false;\r\n          this.router.navigate(['/professors']);\r\n        },\r\n        error: (error) => {\r\n          this.isLoading = false;\r\n          this.error = error.message || 'Error al crear el profesor';\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  onCancel(): void {\r\n    this.router.navigate(['/professors']);\r\n  }\r\n}\r\n*/","map":{"version":3,"mappings":";;AAAA;AACA","names":[],"sourceRoot":"","sources":["C:\\Users\\hansk\\Videos\\frontendsistemacolegio.interrapidisi\\frontendsistemacolegio.interrapidisi\\src\\app\\components\\professor-form\\professor-form.component.ts"],"sourcesContent":["// COMPONENTE ORIGINAL COMENTADO POR MIGRACIÓN\n/*\nimport { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { Professor } from '../../models/professor.model';\nimport { ProfessorService } from '../../services/professor.service';\n\n@Component({\n  selector: 'app-professor-form',\n  templateUrl: './professor-form.component.html',\n  styleUrls: ['./professor-form.component.css']\n})\nexport class ProfessorFormComponent implements OnInit {\n  professorForm!: FormGroup;\n  isLoading = false;\n  error: string | null = null;\n  isEditMode = false;\n  professorId?: number;\n\n  constructor(\n    private formBuilder: FormBuilder,\n    private professorService: ProfessorService,\n    private route: ActivatedRoute,\n    private router: Router\n  ) {}\n\n  ngOnInit(): void {\n    this.initForm();\n\n    // Verificar si estamos en modo edición\n    this.route.params.subscribe(params => {\n      if (params['id']) {\n        this.isEditMode = true;\n        this.professorId = +params['id'];\n        this.loadProfessorData(this.professorId);\n      }\n    });\n  }\n\n  private initForm(): void {\n    this.professorForm = this.formBuilder.group({\n      nombre: ['', [Validators.required]],\n      apellido: ['', [Validators.required]],\n      email: ['', [Validators.required, Validators.email]],\n      departamento: ['', [Validators.required]],\n      especialidad: [''],\n      telefono: [''],\n      direccion: ['']\n    });\n  }\n\n  private loadProfessorData(id: number): void {\n    this.isLoading = true;\n    this.error = null;\n\n    this.professorService.getProfessor(id).subscribe({\n      next: (professor) => {\n        this.professorForm.patchValue({\n          nombre: professor.nombre || '',\n          apellido: professor.apellido || '',\n          email: professor.email,\n          departamento: professor.departamento || '',\n          especialidad: professor.especialidad || '',\n          telefono: professor.telefono || '',\n          direccion: professor.direccion || ''\n        });\n        this.isLoading = false;\n      },\n      error: (error) => {\n        this.error = error.message || 'Error al cargar los datos del profesor';\n        this.isLoading = false;\n      }\n    });\n  }\n\n  onSubmit(): void {\n    if (this.professorForm.invalid) {\n      return;\n    }\n\n    this.isLoading = true;\n    this.error = null;\n\n    // Crear objeto que coincida con lo que espera el backend\n    const professorData: Professor = {\n      nombre: `${this.professorForm.value.nombre} ${this.professorForm.value.apellido}`, // Combinamos nombre y apellido\n      email: this.professorForm.value.email,\n      departamento: this.professorForm.value.departamento,\n      materias: [] // Inicialmente sin materias asignadas\n    };\n\n    if (this.isEditMode && this.professorId) {\n      this.professorService.updateProfessor(this.professorId, professorData).subscribe({\n        next: () => {\n          this.isLoading = false;\n          this.router.navigate(['/professors']);\n        },\n        error: (error) => {\n          this.isLoading = false;\n          this.error = error.message || 'Error al actualizar el profesor';\n        }\n      });\n    } else {\n      this.professorService.createProfessor(professorData).subscribe({\n        next: () => {\n          this.isLoading = false;\n          this.router.navigate(['/professors']);\n        },\n        error: (error) => {\n          this.isLoading = false;\n          this.error = error.message || 'Error al crear el profesor';\n        }\n      });\n    }\n  }\n\n  onCancel(): void {\n    this.router.navigate(['/professors']);\n  }\n}\n*/"]},"metadata":{},"sourceType":"script","externalDependencies":[]}