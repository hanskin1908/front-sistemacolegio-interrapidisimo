{"ast":null,"code":"import { throwError } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport { environment } from '../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class SubjectService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = `${environment.apiUrl}/Materias`;\n    this.registrosUrl = `${environment.apiUrl}/Registros`;\n  }\n  getStudentSubjects(studentId) {\n    return this.http.get(`${this.registrosUrl}/estudiante/${studentId}`).pipe(map(response => {\n      if (response && response.exito && response.data) {\n        // Extraer los IDs de las materias de los registros\n        const subjectIds = response.data.map(item => item.materiaId);\n        // Si no hay materias registradas, devolver un array vacío\n        if (subjectIds.length === 0) {\n          return [];\n        }\n        // Obtener los detalles completos de las materias\n        return this.getSubjectsByIds(subjectIds);\n      }\n      return [];\n    }), catchError(this.handleError));\n  }\n  getSubjects() {\n    return this.http.get(this.apiUrl).pipe(map(response => {\n      if (response && response.exito && response.data) {\n        return response.data.map(item => ({\n          id: item.id,\n          name: item.nombre,\n          code: item.codigo,\n          credits: item.creditos,\n          professorId: item.profesorId || 0,\n          professor: item.nombreProfesor ? {\n            id: item.profesorId,\n            name: item.nombreProfesor\n          } : undefined\n        }));\n      }\n      return [];\n    }), catchError(this.handleError));\n  }\n  getSubject(id) {\n    return this.http.get(`${this.apiUrl}/${id}`).pipe(map(response => {\n      if (response && response.exito && response.data) {\n        const item = response.data;\n        return {\n          id: item.id,\n          name: item.nombre,\n          code: item.codigo,\n          credits: item.creditos,\n          professorId: item.profesorId || 0,\n          professor: item.nombreProfesor ? {\n            id: item.profesorId,\n            name: item.nombreProfesor\n          } : undefined\n        };\n      }\n      throw new Error('Subject not found');\n    }), catchError(this.handleError));\n  }\n  getSubjectsByIds(ids) {\n    const queryParams = ids.map(id => `ids=${id}`).join('&');\n    return this.http.get(`${this.apiUrl}/multiple?${queryParams}`).pipe(map(response => {\n      if (response && response.exito && response.data) {\n        return response.data.map(item => ({\n          id: item.id,\n          name: item.nombre,\n          code: item.codigo,\n          credits: item.creditos,\n          professorId: item.profesorId || 0,\n          professor: item.nombreProfesor ? {\n            id: item.profesorId,\n            name: item.nombreProfesor\n          } : undefined\n        }));\n      }\n      return [];\n    }), catchError(this.handleError));\n  }\n  getStudentsBySubject(id) {\n    // Since there's no direct endpoint for this in MateriasController,\n    // we should use the RegistrosController endpoint and map the data\n    return this.http.get(`${environment.apiUrl}/Registros/materia/${id}`).pipe(map(response => {\n      if (response && response.exito && response.data) {\n        // Map registration data to student data\n        return response.data.map(item => ({\n          id: item.estudianteId,\n          name: item.nombreEstudiante,\n          studentId: '',\n          email: '' // This field might not be available from registrations\n          // Add any other required fields\n        }));\n      }\n\n      return [];\n    }), catchError(this.handleError));\n  }\n  handleError(error) {\n    let errorMessage = 'An unknown error occurred!';\n    if (error.error instanceof ErrorEvent) {\n      // Client-side error\n      errorMessage = `Error: ${error.error.message}`;\n    } else if (error.error && error.error.message) {\n      // Server-side error with message\n      errorMessage = error.error.message;\n    } else if (error.status) {\n      // HTTP error\n      errorMessage = `Error ${error.status}: ${error.statusText}`;\n    }\n    return throwError(() => new Error(errorMessage));\n  }\n  static {\n    this.ɵfac = function SubjectService_Factory(t) {\n      return new (t || SubjectService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: SubjectService,\n      factory: SubjectService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"mappings":"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","names":["throwError","catchError","map","environment","SubjectService","constructor","http","apiUrl","getStudentSubjects","studentId","get","registrosUrl","pipe","response","exito","data","subjectIds","item","materiaId","length","getSubjectsByIds","handleError","getSubjects","id","name","nombre","code","codigo","credits","creditos","professorId","profesorId","professor","nombreProfesor","undefined","getSubject","Error","ids","queryParams","join","getStudentsBySubject","estudianteId","nombreEstudiante","email","error","errorMessage","ErrorEvent","message","status","statusText","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\hansk\\Videos\\Prueba interrapidisimp\\frontend\\src\\app\\services\\subject.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport { Subject } from '../models/subject.model';\nimport { Student } from '../models/student.model';\nimport { environment } from '../../environments/environment';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class SubjectService {\n  private apiUrl = `${environment.apiUrl}/Materias`;\n  private registrosUrl = `${environment.apiUrl}/Registros`;\n\n  constructor(private http: HttpClient) { }\n\n  getStudentSubjects(studentId: number): Observable<Subject[]> {\n    return this.http.get<any>(`${this.registrosUrl}/estudiante/${studentId}`)\n      .pipe(\n        map(response => {\n          if (response && response.exito && response.data) {\n            // Extraer los IDs de las materias de los registros\n            const subjectIds = response.data.map((item: any) => item.materiaId);\n            \n            // Si no hay materias registradas, devolver un array vacío\n            if (subjectIds.length === 0) {\n              return [];\n            }\n            \n            // Obtener los detalles completos de las materias\n            return this.getSubjectsByIds(subjectIds);\n          }\n          return [];\n        }),\n        catchError(this.handleError)\n      );\n  }\n\n  getSubjects(): Observable<Subject[]> {\n    return this.http.get<any>(this.apiUrl)\n      .pipe(\n        map(response => {\n          if (response && response.exito && response.data) {\n            return response.data.map((item: any) => ({\n              id: item.id,\n              name: item.nombre,\n              code: item.codigo,\n              credits: item.creditos,\n              professorId: item.profesorId || 0,\n              professor: item.nombreProfesor ? { id: item.profesorId, name: item.nombreProfesor } : undefined\n            }));\n          }\n          return [];\n        }),\n        catchError(this.handleError)\n      );\n  }\n\n  getSubject(id: number): Observable<Subject> {\n    return this.http.get<any>(`${this.apiUrl}/${id}`)\n      .pipe(\n        map(response => {\n          if (response && response.exito && response.data) {\n            const item = response.data;\n            return {\n              id: item.id,\n              name: item.nombre,\n              code: item.codigo,\n              credits: item.creditos,\n              professorId: item.profesorId || 0,\n              professor: item.nombreProfesor ? { id: item.profesorId, name: item.nombreProfesor } : undefined\n            };\n          }\n          throw new Error('Subject not found');\n        }),\n        catchError(this.handleError)\n      );\n  }\n\n  getSubjectsByIds(ids: number[]): Observable<Subject[]> {\n    const queryParams = ids.map(id => `ids=${id}`).join('&');\n    return this.http.get<any>(`${this.apiUrl}/multiple?${queryParams}`)\n      .pipe(\n        map(response => {\n          if (response && response.exito && response.data) {\n            return response.data.map((item: any) => ({\n              id: item.id,\n              name: item.nombre,\n              code: item.codigo,\n              credits: item.creditos,\n              professorId: item.profesorId || 0,\n              professor: item.nombreProfesor ? { id: item.profesorId, name: item.nombreProfesor } : undefined\n            }));\n          }\n          return [];\n        }),\n        catchError(this.handleError)\n      );\n  }\n\n  getStudentsBySubject(id: number): Observable<Student[]> {\n    // Since there's no direct endpoint for this in MateriasController,\n    // we should use the RegistrosController endpoint and map the data\n    return this.http.get<any>(`${environment.apiUrl}/Registros/materia/${id}`)\n      .pipe(\n        map(response => {\n          if (response && response.exito && response.data) {\n            // Map registration data to student data\n            return response.data.map((item: any) => ({\n              id: item.estudianteId,\n              name: item.nombreEstudiante,\n              studentId: '', // This field might not be available from registrations\n              email: '',     // This field might not be available from registrations\n              // Add any other required fields\n            }));\n          }\n          return [];\n        }),\n        catchError(this.handleError)\n      );\n  }\n\n  private handleError(error: any) {\n    let errorMessage = 'An unknown error occurred!';\n    if (error.error instanceof ErrorEvent) {\n      // Client-side error\n      errorMessage = `Error: ${error.error.message}`;\n    } else if (error.error && error.error.message) {\n      // Server-side error with message\n      errorMessage = error.error.message;\n    } else if (error.status) {\n      // HTTP error\n      errorMessage = `Error ${error.status}: ${error.statusText}`;\n    }\n    return throwError(() => new Error(errorMessage));\n  }\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}