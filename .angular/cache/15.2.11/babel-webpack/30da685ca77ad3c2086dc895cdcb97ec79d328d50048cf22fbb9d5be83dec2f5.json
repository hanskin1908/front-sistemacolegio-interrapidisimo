{"ast":null,"code":"import { of } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./registration.service\";\nimport * as i2 from \"./auth.service\";\nimport * as i3 from \"@angular/router\";\nexport class StudentSubjectsGuard {\n  constructor(registrationService, authService, router) {\n    this.registrationService = registrationService;\n    this.authService = authService;\n    this.router = router;\n  }\n  canActivate(route, state) {\n    // Si no es un estudiante, permitir acceso normal\n    if (!this.authService.isStudent()) {\n      return of(true);\n    }\n    // Si es un estudiante y estu00e1 intentando acceder a una materia especu00edfica\n    if (route.paramMap.has('id')) {\n      const subjectId = +route.paramMap.get('id');\n      const currentUserId = this.authService.getCurrentUserId();\n      if (!currentUserId) {\n        return of(this.router.createUrlTree(['/subjects']));\n      }\n      // Verificar si el estudiante estu00e1 registrado en esta materia\n      return this.registrationService.getStudentRegistrations(currentUserId).pipe(map(registrations => {\n        const isRegistered = registrations.some(reg => reg.subjectId === subjectId);\n        if (isRegistered) {\n          return true;\n        }\n        // Si no estu00e1 registrado, redirigir a la lista de materias\n        return this.router.createUrlTree(['/subjects']);\n      }));\n    }\n    // Para la lista general de materias, permitir acceso\n    return of(true);\n  }\n  static {\n    this.ɵfac = function StudentSubjectsGuard_Factory(t) {\n      return new (t || StudentSubjectsGuard)(i0.ɵɵinject(i1.RegistrationService), i0.ɵɵinject(i2.AuthService), i0.ɵɵinject(i3.Router));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: StudentSubjectsGuard,\n      factory: StudentSubjectsGuard.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"mappings":"AAEA,SAAqBA,EAAE,QAAQ,MAAM;AACrC,SAASC,GAAG,QAAmB,gBAAgB;;;;;AAO/C,OAAM,MAAOC,oBAAoB;EAC/BC,YACUC,mBAAwC,EACxCC,WAAwB,EACxBC,MAAc;IAFd,wBAAmB,GAAnBF,mBAAmB;IACnB,gBAAW,GAAXC,WAAW;IACX,WAAM,GAANC,MAAM;EACb;EAEHC,WAAW,CACTC,KAA6B,EAC7BC,KAA0B;IAE1B;IACA,IAAI,CAAC,IAAI,CAACJ,WAAW,CAACK,SAAS,EAAE,EAAE;MACjC,OAAOV,EAAE,CAAC,IAAI,CAAC;;IAGjB;IACA,IAAIQ,KAAK,CAACG,QAAQ,CAACC,GAAG,CAAC,IAAI,CAAC,EAAE;MAC5B,MAAMC,SAAS,GAAG,CAACL,KAAK,CAACG,QAAQ,CAACG,GAAG,CAAC,IAAI,CAAE;MAC5C,MAAMC,aAAa,GAAG,IAAI,CAACV,WAAW,CAACW,gBAAgB,EAAE;MAEzD,IAAI,CAACD,aAAa,EAAE;QAClB,OAAOf,EAAE,CAAC,IAAI,CAACM,MAAM,CAACW,aAAa,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC;;MAGrD;MACA,OAAO,IAAI,CAACb,mBAAmB,CAACc,uBAAuB,CAACH,aAAa,CAAC,CAACI,IAAI,CACzElB,GAAG,CAACmB,aAAa,IAAG;QAClB,MAAMC,YAAY,GAAGD,aAAa,CAACE,IAAI,CAACC,GAAG,IAAIA,GAAG,CAACV,SAAS,KAAKA,SAAS,CAAC;QAC3E,IAAIQ,YAAY,EAAE;UAChB,OAAO,IAAI;;QAEb;QACA,OAAO,IAAI,CAACf,MAAM,CAACW,aAAa,CAAC,CAAC,WAAW,CAAC,CAAC;MACjD,CAAC,CAAC,CACH;;IAGH;IACA,OAAOjB,EAAE,CAAC,IAAI,CAAC;EACjB;;;uBAxCWE,oBAAoB;IAAA;EAAA;;;aAApBA,oBAAoB;MAAAsB,SAApBtB,oBAAoB;MAAAuB,YAFnB;IAAM;EAAA","names":["of","map","StudentSubjectsGuard","constructor","registrationService","authService","router","canActivate","route","state","isStudent","paramMap","has","subjectId","get","currentUserId","getCurrentUserId","createUrlTree","getStudentRegistrations","pipe","registrations","isRegistered","some","reg","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\hansk\\Videos\\Prueba interrapidisimp\\frontend\\src\\app\\services\\student-subjects.guard.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot, Router, UrlTree } from '@angular/router';\nimport { Observable, of } from 'rxjs';\nimport { map, switchMap } from 'rxjs/operators';\nimport { RegistrationService } from './registration.service';\nimport { AuthService } from './auth.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class StudentSubjectsGuard implements CanActivate {\n  constructor(\n    private registrationService: RegistrationService, \n    private authService: AuthService,\n    private router: Router\n  ) {}\n\n  canActivate(\n    route: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<boolean | UrlTree> {\n    // Si no es un estudiante, permitir acceso normal\n    if (!this.authService.isStudent()) {\n      return of(true);\n    }\n\n    // Si es un estudiante y estu00e1 intentando acceder a una materia especu00edfica\n    if (route.paramMap.has('id')) {\n      const subjectId = +route.paramMap.get('id')!;\n      const currentUserId = this.authService.getCurrentUserId();\n      \n      if (!currentUserId) {\n        return of(this.router.createUrlTree(['/subjects']));\n      }\n\n      // Verificar si el estudiante estu00e1 registrado en esta materia\n      return this.registrationService.getStudentRegistrations(currentUserId).pipe(\n        map(registrations => {\n          const isRegistered = registrations.some(reg => reg.subjectId === subjectId);\n          if (isRegistered) {\n            return true;\n          }\n          // Si no estu00e1 registrado, redirigir a la lista de materias\n          return this.router.createUrlTree(['/subjects']);\n        })\n      );\n    }\n\n    // Para la lista general de materias, permitir acceso\n    return of(true);\n  }\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}