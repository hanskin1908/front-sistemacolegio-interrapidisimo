{"ast":null,"code":"import { throwError } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport { environment } from '../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class ProfessorService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = `${environment.apiUrl}/profesores`; // Cambiado a 'profesores' para coincidir con el backend\n  }\n  // Funciu00f3n auxiliar para agregar la propiedad 'name' a los objetos Professor\n  addNameProperty(professor) {\n    if (professor) {\n      return {\n        ...professor,\n        name: `${professor.nombre} ${professor.apellido}` // Crear propiedad name para compatibilidad\n      };\n    }\n\n    return professor;\n  }\n  getProfessors() {\n    return this.http.get(this.apiUrl).pipe(catchError(this.handleError), map(response => {\n      const professors = response.data || [];\n      // Agregar propiedad name a cada profesor\n      return professors.map(prof => this.addNameProperty(prof));\n    }));\n  }\n  getProfessor(id) {\n    return this.http.get(`${this.apiUrl}/${id}`).pipe(catchError(this.handleError), map(response => this.addNameProperty(response.data)));\n  }\n  createProfessor(professor) {\n    return this.http.post(this.apiUrl, professor).pipe(catchError(this.handleError), map(response => this.addNameProperty(response.data)));\n  }\n  updateProfessor(id, professor) {\n    return this.http.put(`${this.apiUrl}/${id}`, professor).pipe(catchError(this.handleError), map(response => this.addNameProperty(response.data)));\n  }\n  deleteProfessor(id) {\n    return this.http.delete(`${this.apiUrl}/${id}`).pipe(catchError(this.handleError), map(response => response.data));\n  }\n  handleError(error) {\n    let errorMessage = 'An unknown error occurred!';\n    if (error.error instanceof ErrorEvent) {\n      // Client-side error\n      errorMessage = `Error: ${error.error.message}`;\n    } else if (error.error && error.error.message) {\n      // Server-side error with message\n      errorMessage = error.error.message;\n    } else if (error.status) {\n      // HTTP error\n      errorMessage = `Error ${error.status}: ${error.statusText}`;\n    }\n    return throwError(() => new Error(errorMessage));\n  }\n  static {\n    this.ɵfac = function ProfessorService_Factory(t) {\n      return new (t || ProfessorService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: ProfessorService,\n      factory: ProfessorService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"mappings":"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","names":["throwError","catchError","map","environment","ProfessorService","constructor","http","apiUrl","addNameProperty","professor","name","nombre","apellido","getProfessors","get","pipe","handleError","response","professors","data","prof","getProfessor","id","createProfessor","post","updateProfessor","put","deleteProfessor","delete","error","errorMessage","ErrorEvent","message","status","statusText","Error","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\hansk\\Videos\\Prueba interrapidisimp\\frontend\\src\\app\\services\\professor.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport { Professor } from '../models/professor.model';\nimport { environment } from '../../environments/environment';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ProfessorService {\n  private apiUrl = `${environment.apiUrl}/profesores`; // Cambiado a 'profesores' para coincidir con el backend\n\n  constructor(private http: HttpClient) { }\n\n  // Funciu00f3n auxiliar para agregar la propiedad 'name' a los objetos Professor\n  private addNameProperty(professor: any): Professor {\n    if (professor) {\n      return {\n        ...professor,\n        name: `${professor.nombre} ${professor.apellido}` // Crear propiedad name para compatibilidad\n      };\n    }\n    return professor;\n  }\n\n  getProfessors(): Observable<Professor[]> {\n    return this.http.get<any>(this.apiUrl)\n      .pipe(\n        catchError(this.handleError),\n        map(response => {\n          const professors = response.data || [];\n          // Agregar propiedad name a cada profesor\n          return professors.map((prof: any) => this.addNameProperty(prof));\n        })\n      );\n  }\n\n  getProfessor(id: number): Observable<Professor> {\n    return this.http.get<any>(`${this.apiUrl}/${id}`)\n      .pipe(\n        catchError(this.handleError),\n        map(response => this.addNameProperty(response.data))\n      );\n  }\n\n  createProfessor(professor: Professor): Observable<Professor> {\n    return this.http.post<any>(this.apiUrl, professor)\n      .pipe(\n        catchError(this.handleError),\n        map(response => this.addNameProperty(response.data))\n      );\n  }\n\n  updateProfessor(id: number, professor: Professor): Observable<Professor> {\n    return this.http.put<any>(`${this.apiUrl}/${id}`, professor)\n      .pipe(\n        catchError(this.handleError),\n        map(response => this.addNameProperty(response.data))\n      );\n  }\n\n  deleteProfessor(id: number): Observable<any> {\n    return this.http.delete<any>(`${this.apiUrl}/${id}`)\n      .pipe(\n        catchError(this.handleError),\n        map(response => response.data)\n      );\n  }\n\n  private handleError(error: any) {\n    let errorMessage = 'An unknown error occurred!';\n    if (error.error instanceof ErrorEvent) {\n      // Client-side error\n      errorMessage = `Error: ${error.error.message}`;\n    } else if (error.error && error.error.message) {\n      // Server-side error with message\n      errorMessage = error.error.message;\n    } else if (error.status) {\n      // HTTP error\n      errorMessage = `Error ${error.status}: ${error.statusText}`;\n    }\n    return throwError(() => new Error(errorMessage));\n  }\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}