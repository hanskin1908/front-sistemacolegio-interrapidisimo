{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../servicios/autenticacion.servicio\";\nimport * as i2 from \"@angular/router\";\nexport class AuthGuard {\n  constructor(autenticacionServicio, router) {\n    this.autenticacionServicio = autenticacionServicio;\n    this.router = router;\n  }\n  canActivate(route, state) {\n    if (this.autenticacionServicio.estaAutenticado()) {\n      return true;\n    }\n    this.router.navigate(['/login'], {\n      queryParams: {\n        returnUrl: state.url\n      }\n    });\n    return false;\n  }\n  static {\n    this.ɵfac = function AuthGuard_Factory(t) {\n      return new (t || AuthGuard)(i0.ɵɵinject(i1.AutenticacionServicio), i0.ɵɵinject(i2.Router));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthGuard,\n      factory: AuthGuard.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"mappings":";;;AAOA,OAAM,MAAOA,SAAS;EACpBC,YACUC,qBAA4C,EAC5CC,MAAc;IADd,0BAAqB,GAArBD,qBAAqB;IACrB,WAAM,GAANC,MAAM;EACb;EAEHC,WAAW,CAACC,KAA6B,EAAEC,KAA0B;IACnE,IAAI,IAAI,CAACJ,qBAAqB,CAACK,eAAe,EAAE,EAAE;MAChD,OAAO,IAAI;;IAGb,IAAI,CAACJ,MAAM,CAACK,QAAQ,CAAC,CAAC,QAAQ,CAAC,EAAE;MAAEC,WAAW,EAAE;QAAEC,SAAS,EAAEJ,KAAK,CAACK;MAAG;IAAE,CAAE,CAAC;IAC3E,OAAO,KAAK;EACd;;;uBAbWX,SAAS;IAAA;EAAA;;;aAATA,SAAS;MAAAY,SAATZ,SAAS;MAAAa,YAFR;IAAM;EAAA","names":["AuthGuard","constructor","autenticacionServicio","router","canActivate","route","state","estaAutenticado","navigate","queryParams","returnUrl","url","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\hansk\\Videos\\frontendsistemacolegio.interrapidisi\\frontendsistemacolegio.interrapidisi\\src\\app\\guards\\auth.guard.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot, Router } from '@angular/router';\nimport { AutenticacionServicio } from '../servicios/autenticacion.servicio';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthGuard implements CanActivate {\n  constructor(\n    private autenticacionServicio: AutenticacionServicio,\n    private router: Router\n  ) {}\n\n  canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): boolean {\n    if (this.autenticacionServicio.estaAutenticado()) {\n      return true;\n    }\n    \n    this.router.navigate(['/login'], { queryParams: { returnUrl: state.url } });\n    return false;\n  }\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}