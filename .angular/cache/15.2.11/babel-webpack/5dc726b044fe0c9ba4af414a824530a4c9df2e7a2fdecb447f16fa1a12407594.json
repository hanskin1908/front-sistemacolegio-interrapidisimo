{"ast":null,"code":"import { throwError, of } from 'rxjs';\nimport { catchError, map, switchMap } from 'rxjs/operators';\nimport { environment } from '../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./asignatura.servicio\";\nimport * as i3 from \"./autenticacion.servicio\";\nexport class InscripcionServicio {\n  constructor(http, asignaturaServicio, autenticacionServicio) {\n    this.http = http;\n    this.asignaturaServicio = asignaturaServicio;\n    this.autenticacionServicio = autenticacionServicio;\n    this.apiUrl = `${environment.apiUrl}/Registros`;\n    this.MAX_ASIGNATURAS = 3;\n  }\n  obtenerInscripcionesEstudiante(estudianteId) {\n    return this.http.get(`${this.apiUrl}/estudiante/${estudianteId}`).pipe(map(respuesta => {\n      if (respuesta && respuesta.exito && respuesta.data) {\n        return respuesta.data.map(item => ({\n          id: item.id,\n          estudianteId: item.estudianteId,\n          asignaturaId: item.materiaId,\n          fechaInscripcion: new Date(item.fechaRegistro),\n          estudiante: item.nombreEstudiante ? {\n            id: item.estudianteId,\n            nombre: item.nombreEstudiante,\n            matricula: '',\n            email: ''\n          } : undefined,\n          asignatura: item.nombreMateria ? {\n            id: item.materiaId,\n            nombre: item.nombreMateria,\n            codigo: '',\n            creditos: 0,\n            profesorId: 0\n          } : undefined\n        }));\n      }\n      return [];\n    }), catchError(this.manejarError));\n  }\n  obtenerInscripcionesAsignatura(asignaturaId) {\n    return this.http.get(`${this.apiUrl}/materia/${asignaturaId}`).pipe(map(respuesta => {\n      if (respuesta && respuesta.exito && respuesta.data) {\n        return respuesta.data.map(item => ({\n          id: item.id,\n          estudianteId: item.estudianteId,\n          asignaturaId: item.materiaId,\n          fechaInscripcion: new Date(item.fechaRegistro),\n          estudiante: item.nombreEstudiante ? {\n            id: item.estudianteId,\n            nombre: item.nombreEstudiante,\n            matricula: '',\n            email: ''\n          } : undefined,\n          asignatura: item.nombreMateria ? {\n            id: item.materiaId,\n            nombre: item.nombreMateria,\n            codigo: '',\n            creditos: 0,\n            profesorId: 0\n          } : undefined\n        }));\n      }\n      return [];\n    }), catchError(this.manejarError));\n  }\n  obtenerInscripcion(id) {\n    return this.http.get(`${this.apiUrl}/${id}`).pipe(map(respuesta => {\n      if (respuesta && respuesta.exito && respuesta.data) {\n        const item = respuesta.data;\n        return {\n          id: item.id,\n          estudianteId: item.estudianteId,\n          asignaturaId: item.materiaId,\n          fechaInscripcion: new Date(item.fechaRegistro),\n          estudiante: item.nombreEstudiante ? {\n            id: item.estudianteId,\n            nombre: item.nombreEstudiante,\n            matricula: '',\n            correo: ''\n          } : undefined,\n          asignatura: item.nombreMateria ? {\n            id: item.materiaId,\n            nombre: item.nombreMateria,\n            codigo: '',\n            creditos: 0,\n            profesorId: 0\n          } : undefined\n        };\n      }\n      throw new Error('Inscripción no encontrada');\n    }), catchError(this.manejarError));\n  }\n  registrarAsignatura(solicitud) {\n    const estudianteId = solicitud.estudianteId;\n    return this.obtenerInscripcionesEstudiante(estudianteId).pipe(switchMap(inscripciones => {\n      if (inscripciones.length >= this.MAX_ASIGNATURAS) {\n        return throwError(() => new Error('No puedes inscribirte en más de 3 asignaturas'));\n      }\n      const asignaturasRegistradasIds = inscripciones.map(i => i.asignaturaId);\n      if (asignaturasRegistradasIds.includes(solicitud.asignaturaId)) {\n        return throwError(() => new Error('Ya estás inscrito en esta asignatura'));\n      }\n      if (asignaturasRegistradasIds.length === 0) {\n        const solicitudBackend = {\n          estudianteId: solicitud.estudianteId,\n          nombreEstudiante: solicitud.nombreEstudiante || '',\n          materiaId: solicitud.asignaturaId,\n          nombreMateria: solicitud.nombreAsignatura || '',\n          fechaRegistro: new Date()\n        };\n        return this.http.post(this.apiUrl, solicitudBackend).pipe(map(respuesta => {\n          if (respuesta && respuesta.exito && respuesta.data) {\n            const item = respuesta.data;\n            return {\n              id: item.id,\n              estudianteId: item.estudianteId,\n              asignaturaId: item.materiaId,\n              fechaInscripcion: new Date(item.fechaRegistro),\n              estudiante: item.nombreEstudiante ? {\n                id: item.estudianteId,\n                nombre: item.nombreEstudiante,\n                matricula: '',\n                correo: ''\n              } : undefined,\n              asignatura: item.nombreMateria ? {\n                id: item.materiaId,\n                nombre: item.nombreMateria,\n                codigo: '',\n                creditos: 0,\n                profesorId: 0\n              } : undefined\n            };\n          }\n          throw new Error('Error al registrar la asignatura');\n        }), catchError(this.manejarError));\n      }\n      return this.asignaturaServicio.obtenerAsignatura(solicitud.asignaturaId).pipe(switchMap(nuevaAsignatura => {\n        return this.asignaturaServicio.obtenerAsignaturasPorIds(asignaturasRegistradasIds).pipe(switchMap(asignaturasRegistradas => {\n          const profesoresIds = asignaturasRegistradas.map(a => a.profesorId);\n          if (profesoresIds.includes(nuevaAsignatura.profesorId)) {\n            return throwError(() => new Error('No puedes tener más de una asignatura con el mismo profesor'));\n          }\n          const solicitudBackend = {\n            estudianteId: solicitud.estudianteId,\n            nombreEstudiante: solicitud.nombreEstudiante || '',\n            materiaId: solicitud.asignaturaId,\n            nombreMateria: solicitud.nombreAsignatura || '',\n            fechaRegistro: new Date()\n          };\n          return this.http.post(this.apiUrl, solicitudBackend).pipe(map(respuesta => {\n            if (respuesta && respuesta.exito && respuesta.data) {\n              const item = respuesta.data;\n              return {\n                id: item.id,\n                estudianteId: item.estudianteId,\n                asignaturaId: item.materiaId,\n                fechaInscripcion: new Date(item.fechaRegistro),\n                estudiante: item.nombreEstudiante ? {\n                  id: item.estudianteId,\n                  nombre: item.nombreEstudiante,\n                  matricula: '',\n                  correo: ''\n                } : undefined,\n                asignatura: item.nombreMateria ? {\n                  id: item.materiaId,\n                  nombre: item.nombreMateria,\n                  codigo: '',\n                  creditos: 0,\n                  profesorId: 0\n                } : undefined\n              };\n            }\n            throw new Error('Error al registrar la asignatura');\n          }), catchError(this.manejarError));\n        }));\n      }));\n    }));\n  }\n  puedeAccederSeccionEstudiante() {\n    return this.autenticacionServicio.obtenerUsuarioActual().pipe(map(user => {\n      // Solo los administradores y profesores pueden acceder a la sección de estudiantes\n      return user?.role === 'admin' || user?.role === 'professor';\n    }), catchError(() => of(false)));\n  }\n  manejarError(error) {\n    let mensajeError = '¡Ocurrió un error desconocido!';\n    if (error.error instanceof ErrorEvent) {\n      mensajeError = `Error: ${error.error.message}`;\n    } else if (error.error && error.error.message) {\n      mensajeError = error.error.message;\n    } else if (error.status) {\n      mensajeError = `Error ${error.status}: ${error.statusText}`;\n    }\n    return throwError(() => new Error(mensajeError));\n  }\n  static {\n    this.ɵfac = function InscripcionServicio_Factory(t) {\n      return new (t || InscripcionServicio)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.AsignaturaServicio), i0.ɵɵinject(i3.AutenticacionServicio));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: InscripcionServicio,\n      factory: InscripcionServicio.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"mappings":"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","names":["throwError","of","catchError","map","switchMap","environment","InscripcionServicio","constructor","http","asignaturaServicio","autenticacionServicio","apiUrl","obtenerInscripcionesEstudiante","estudianteId","get","pipe","respuesta","exito","data","item","id","asignaturaId","materiaId","fechaInscripcion","Date","fechaRegistro","estudiante","nombreEstudiante","nombre","matricula","email","undefined","asignatura","nombreMateria","codigo","creditos","profesorId","manejarError","obtenerInscripcionesAsignatura","obtenerInscripcion","correo","Error","registrarAsignatura","solicitud","inscripciones","length","MAX_ASIGNATURAS","asignaturasRegistradasIds","i","includes","solicitudBackend","nombreAsignatura","post","obtenerAsignatura","nuevaAsignatura","obtenerAsignaturasPorIds","asignaturasRegistradas","profesoresIds","a","puedeAccederSeccionEstudiante","obtenerUsuarioActual","user","role","error","mensajeError","ErrorEvent","message","status","statusText","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\hansk\\Videos\\frontendsistemacolegio.interrapidisi\\frontendsistemacolegio.interrapidisi\\src\\app\\servicios\\inscripcion.servicio.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable, throwError, forkJoin, of } from 'rxjs';\nimport { catchError, map, switchMap } from 'rxjs/operators';\nimport { Inscripcion, SolicitudInscripcion } from '../modelos/inscripcion.modelo';\nimport { Asignatura } from '../modelos/asignatura.modelo';\nimport { Estudiante } from '../modelos/estudiante.modelo';\nimport { AsignaturaServicio } from './asignatura.servicio';\nimport { AutenticacionServicio } from './autenticacion.servicio';\nimport { environment } from '../../environments/environment';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class InscripcionServicio {\n  private apiUrl = `${environment.apiUrl}/Registros`;\n  private MAX_ASIGNATURAS = 3;\n\n  constructor(\n    private http: HttpClient,\n    private asignaturaServicio: AsignaturaServicio,\n    private autenticacionServicio: AutenticacionServicio\n  ) { }\n\n  obtenerInscripcionesEstudiante(estudianteId: number): Observable<Inscripcion[]> {\n    return this.http.get<any>(`${this.apiUrl}/estudiante/${estudianteId}`)\n      .pipe(\n        map(respuesta => {\n          if (respuesta && respuesta.exito && respuesta.data) {\n            return respuesta.data.map((item: any) => ({\n              id: item.id,\n              estudianteId: item.estudianteId,\n              asignaturaId: item.materiaId,\n              fechaInscripcion: new Date(item.fechaRegistro),\n              estudiante: item.nombreEstudiante ? {\n                id: item.estudianteId,\n                nombre: item.nombreEstudiante,\n                matricula: '',\n                email: ''\n              } : undefined,\n              asignatura: item.nombreMateria ? {\n                id: item.materiaId,\n                nombre: item.nombreMateria,\n                codigo: '',\n                creditos: 0,\n                profesorId: 0\n              } : undefined\n            }));\n          }\n          return [];\n        }),\n        catchError(this.manejarError)\n      );\n  }\n\n  obtenerInscripcionesAsignatura(asignaturaId: number): Observable<Inscripcion[]> {\n    return this.http.get<any>(`${this.apiUrl}/materia/${asignaturaId}`)\n      .pipe(\n        map(respuesta => {\n          if (respuesta && respuesta.exito && respuesta.data) {\n            return respuesta.data.map((item: any) => ({\n              id: item.id,\n              estudianteId: item.estudianteId,\n              asignaturaId: item.materiaId,\n              fechaInscripcion: new Date(item.fechaRegistro),\n              estudiante: item.nombreEstudiante ? {\n                id: item.estudianteId,\n                nombre: item.nombreEstudiante,\n                matricula: '',\n                email: ''\n              } : undefined,\n              asignatura: item.nombreMateria ? {\n                id: item.materiaId,\n                nombre: item.nombreMateria,\n                codigo: '',\n                creditos: 0,\n                profesorId: 0\n              } : undefined\n            }));\n          }\n          return [];\n        }),\n        catchError(this.manejarError)\n      );\n  }\n\n  obtenerInscripcion(id: number): Observable<Inscripcion> {\n    return this.http.get<any>(`${this.apiUrl}/${id}`)\n      .pipe(\n        map(respuesta => {\n          if (respuesta && respuesta.exito && respuesta.data) {\n            const item = respuesta.data;\n            return {\n              id: item.id,\n              estudianteId: item.estudianteId,\n              asignaturaId: item.materiaId,\n              fechaInscripcion: new Date(item.fechaRegistro),\n              estudiante: item.nombreEstudiante ? {\n                id: item.estudianteId,\n                nombre: item.nombreEstudiante,\n                matricula: '',\n                correo: ''\n              } : undefined,\n              asignatura: item.nombreMateria ? {\n                id: item.materiaId,\n                nombre: item.nombreMateria,\n                codigo: '',\n                creditos: 0,\n                profesorId: 0\n              } : undefined\n            };\n          }\n          throw new Error('Inscripción no encontrada');\n        }),\n        catchError(this.manejarError)\n      );\n  }\n\n  registrarAsignatura(solicitud: SolicitudInscripcion): Observable<Inscripcion> {\n    const estudianteId = solicitud.estudianteId;\n    return this.obtenerInscripcionesEstudiante(estudianteId).pipe(\n      switchMap(inscripciones => {\n        if (inscripciones.length >= this.MAX_ASIGNATURAS) {\n          return throwError(() => new Error('No puedes inscribirte en más de 3 asignaturas'));\n        }\n        const asignaturasRegistradasIds = inscripciones.map(i => i.asignaturaId);\n        if (asignaturasRegistradasIds.includes(solicitud.asignaturaId)) {\n          return throwError(() => new Error('Ya estás inscrito en esta asignatura'));\n        }\n        if (asignaturasRegistradasIds.length === 0) {\n          const solicitudBackend = {\n            estudianteId: solicitud.estudianteId,\n            nombreEstudiante: solicitud.nombreEstudiante || '',\n            materiaId: solicitud.asignaturaId,\n            nombreMateria: solicitud.nombreAsignatura || '',\n            fechaRegistro: new Date()\n          };\n          return this.http.post<any>(this.apiUrl, solicitudBackend)\n            .pipe(\n              map(respuesta => {\n                if (respuesta && respuesta.exito && respuesta.data) {\n                  const item = respuesta.data;\n                  return {\n                    id: item.id,\n                    estudianteId: item.estudianteId,\n                    asignaturaId: item.materiaId,\n                    fechaInscripcion: new Date(item.fechaRegistro),\n                    estudiante: item.nombreEstudiante ? {\n                      id: item.estudianteId,\n                      nombre: item.nombreEstudiante,\n                      matricula: '',\n                      correo: ''\n                    } : undefined,\n                    asignatura: item.nombreMateria ? {\n                      id: item.materiaId,\n                      nombre: item.nombreMateria,\n                      codigo: '',\n                      creditos: 0,\n                      profesorId: 0\n                    } : undefined\n                  };\n                }\n                throw new Error('Error al registrar la asignatura');\n              }),\n              catchError(this.manejarError)\n            );\n        }\n        return this.asignaturaServicio.obtenerAsignatura(solicitud.asignaturaId).pipe(\n          switchMap(nuevaAsignatura => {\n            return this.asignaturaServicio.obtenerAsignaturasPorIds(asignaturasRegistradasIds).pipe(\n              switchMap(asignaturasRegistradas => {\n                const profesoresIds = asignaturasRegistradas.map(a => a.profesorId);\n                if (profesoresIds.includes(nuevaAsignatura.profesorId)) {\n                  return throwError(() => new Error('No puedes tener más de una asignatura con el mismo profesor'));\n                }\n                const solicitudBackend = {\n                  estudianteId: solicitud.estudianteId,\n                  nombreEstudiante: solicitud.nombreEstudiante || '',\n                  materiaId: solicitud.asignaturaId,\n                  nombreMateria: solicitud.nombreAsignatura || '',\n                  fechaRegistro: new Date()\n                };\n                return this.http.post<any>(this.apiUrl, solicitudBackend)\n                  .pipe(\n                    map(respuesta => {\n                      if (respuesta && respuesta.exito && respuesta.data) {\n                        const item = respuesta.data;\n                        return {\n                          id: item.id,\n                          estudianteId: item.estudianteId,\n                          asignaturaId: item.materiaId,\n                          fechaInscripcion: new Date(item.fechaRegistro),\n                          estudiante: item.nombreEstudiante ? {\n                            id: item.estudianteId,\n                            nombre: item.nombreEstudiante,\n                            matricula: '',\n                            correo: ''\n                          } : undefined,\n                          asignatura: item.nombreMateria ? {\n                            id: item.materiaId,\n                            nombre: item.nombreMateria,\n                            codigo: '',\n                            creditos: 0,\n                            profesorId: 0\n                          } : undefined\n                        };\n                      }\n                      throw new Error('Error al registrar la asignatura');\n                    }),\n                    catchError(this.manejarError)\n                  );\n              })\n            );\n          })\n        );\n      })\n    );\n  }\n\n\n  puedeAccederSeccionEstudiante(): Observable<boolean> {\n    return this.autenticacionServicio.obtenerUsuarioActual().pipe(\n      map(user => {\n        // Solo los administradores y profesores pueden acceder a la sección de estudiantes\n        return user?.role === 'admin' || user?.role === 'professor';\n      }),\n      catchError(() => of(false))\n    );\n  }\n\n\n  \n  private manejarError(error: any) {\n    let mensajeError = '¡Ocurrió un error desconocido!';\n    if (error.error instanceof ErrorEvent) {\n      mensajeError = `Error: ${error.error.message}`;\n    } else if (error.error && error.error.message) {\n      mensajeError = error.error.message;\n    } else if (error.status) {\n      mensajeError = `Error ${error.status}: ${error.statusText}`;\n    }\n    return throwError(() => new Error(mensajeError));\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}