{"ast":null,"code":"import { throwError } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport { environment } from '../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class ProfessorService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = `${environment.apiUrl}/profesores`; // Cambiado a 'profesores' para coincidir con el backend\n  }\n\n  getProfessors() {\n    return this.http.get(this.apiUrl).pipe(catchError(this.handleError), map(response => response.data || []));\n  }\n  getProfessor(id) {\n    return this.http.get(`${this.apiUrl}/${id}`).pipe(catchError(this.handleError), map(response => response.data));\n  }\n  createProfessor(professor) {\n    return this.http.post(this.apiUrl, professor).pipe(catchError(this.handleError), map(response => response.data));\n  }\n  updateProfessor(id, professor) {\n    return this.http.put(`${this.apiUrl}/${id}`, professor).pipe(catchError(this.handleError), map(response => response.data));\n  }\n  deleteProfessor(id) {\n    return this.http.delete(`${this.apiUrl}/${id}`).pipe(catchError(this.handleError), map(response => response.data));\n  }\n  handleError(error) {\n    let errorMessage = 'An unknown error occurred!';\n    if (error.error instanceof ErrorEvent) {\n      // Client-side error\n      errorMessage = `Error: ${error.error.message}`;\n    } else if (error.error && error.error.message) {\n      // Server-side error with message\n      errorMessage = error.error.message;\n    } else if (error.status) {\n      // HTTP error\n      errorMessage = `Error ${error.status}: ${error.statusText}`;\n    }\n    return throwError(() => new Error(errorMessage));\n  }\n  static {\n    this.ɵfac = function ProfessorService_Factory(t) {\n      return new (t || ProfessorService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: ProfessorService,\n      factory: ProfessorService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"mappings":"AAEA,SAAqBA,UAAU,QAAQ,MAAM;AAC7C,SAASC,UAAU,EAAEC,GAAG,QAAQ,gBAAgB;AAEhD,SAASC,WAAW,QAAQ,gCAAgC;;;AAK5D,OAAM,MAAOC,gBAAgB;EAG3BC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IAFhB,WAAM,GAAG,GAAGH,WAAW,CAACI,MAAM,aAAa,CAAC,CAAC;EAEb;;EAExCC,aAAa;IACX,OAAO,IAAI,CAACF,IAAI,CAACG,GAAG,CAAM,IAAI,CAACF,MAAM,CAAC,CACnCG,IAAI,CACHT,UAAU,CAAC,IAAI,CAACU,WAAW,CAAC,EAC5BT,GAAG,CAACU,QAAQ,IAAIA,QAAQ,CAACC,IAAI,IAAI,EAAE,CAAC,CACrC;EACL;EAEAC,YAAY,CAACC,EAAU;IACrB,OAAO,IAAI,CAACT,IAAI,CAACG,GAAG,CAAM,GAAG,IAAI,CAACF,MAAM,IAAIQ,EAAE,EAAE,CAAC,CAC9CL,IAAI,CACHT,UAAU,CAAC,IAAI,CAACU,WAAW,CAAC,EAC5BT,GAAG,CAACU,QAAQ,IAAIA,QAAQ,CAACC,IAAI,CAAC,CAC/B;EACL;EAEAG,eAAe,CAACC,SAAoB;IAClC,OAAO,IAAI,CAACX,IAAI,CAACY,IAAI,CAAM,IAAI,CAACX,MAAM,EAAEU,SAAS,CAAC,CAC/CP,IAAI,CACHT,UAAU,CAAC,IAAI,CAACU,WAAW,CAAC,EAC5BT,GAAG,CAACU,QAAQ,IAAIA,QAAQ,CAACC,IAAI,CAAC,CAC/B;EACL;EAEAM,eAAe,CAACJ,EAAU,EAAEE,SAAoB;IAC9C,OAAO,IAAI,CAACX,IAAI,CAACc,GAAG,CAAM,GAAG,IAAI,CAACb,MAAM,IAAIQ,EAAE,EAAE,EAAEE,SAAS,CAAC,CACzDP,IAAI,CACHT,UAAU,CAAC,IAAI,CAACU,WAAW,CAAC,EAC5BT,GAAG,CAACU,QAAQ,IAAIA,QAAQ,CAACC,IAAI,CAAC,CAC/B;EACL;EAEAQ,eAAe,CAACN,EAAU;IACxB,OAAO,IAAI,CAACT,IAAI,CAACgB,MAAM,CAAM,GAAG,IAAI,CAACf,MAAM,IAAIQ,EAAE,EAAE,CAAC,CACjDL,IAAI,CACHT,UAAU,CAAC,IAAI,CAACU,WAAW,CAAC,EAC5BT,GAAG,CAACU,QAAQ,IAAIA,QAAQ,CAACC,IAAI,CAAC,CAC/B;EACL;EAEQF,WAAW,CAACY,KAAU;IAC5B,IAAIC,YAAY,GAAG,4BAA4B;IAC/C,IAAID,KAAK,CAACA,KAAK,YAAYE,UAAU,EAAE;MACrC;MACAD,YAAY,GAAG,UAAUD,KAAK,CAACA,KAAK,CAACG,OAAO,EAAE;KAC/C,MAAM,IAAIH,KAAK,CAACA,KAAK,IAAIA,KAAK,CAACA,KAAK,CAACG,OAAO,EAAE;MAC7C;MACAF,YAAY,GAAGD,KAAK,CAACA,KAAK,CAACG,OAAO;KACnC,MAAM,IAAIH,KAAK,CAACI,MAAM,EAAE;MACvB;MACAH,YAAY,GAAG,SAASD,KAAK,CAACI,MAAM,KAAKJ,KAAK,CAACK,UAAU,EAAE;;IAE7D,OAAO5B,UAAU,CAAC,MAAM,IAAI6B,KAAK,CAACL,YAAY,CAAC,CAAC;EAClD;;;uBA1DWpB,gBAAgB;IAAA;EAAA;;;aAAhBA,gBAAgB;MAAA0B,SAAhB1B,gBAAgB;MAAA2B,YAFf;IAAM;EAAA","names":["throwError","catchError","map","environment","ProfessorService","constructor","http","apiUrl","getProfessors","get","pipe","handleError","response","data","getProfessor","id","createProfessor","professor","post","updateProfessor","put","deleteProfessor","delete","error","errorMessage","ErrorEvent","message","status","statusText","Error","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\hansk\\Videos\\Prueba interrapidisimp\\frontend\\src\\app\\services\\professor.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport { Professor } from '../models/professor.model';\nimport { environment } from '../../environments/environment';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ProfessorService {\n  private apiUrl = `${environment.apiUrl}/profesores`; // Cambiado a 'profesores' para coincidir con el backend\n\n  constructor(private http: HttpClient) { }\n\n  getProfessors(): Observable<Professor[]> {\n    return this.http.get<any>(this.apiUrl)\n      .pipe(\n        catchError(this.handleError),\n        map(response => response.data || [])\n      );\n  }\n\n  getProfessor(id: number): Observable<Professor> {\n    return this.http.get<any>(`${this.apiUrl}/${id}`)\n      .pipe(\n        catchError(this.handleError),\n        map(response => response.data)\n      );\n  }\n\n  createProfessor(professor: Professor): Observable<Professor> {\n    return this.http.post<any>(this.apiUrl, professor)\n      .pipe(\n        catchError(this.handleError),\n        map(response => response.data)\n      );\n  }\n\n  updateProfessor(id: number, professor: Professor): Observable<Professor> {\n    return this.http.put<any>(`${this.apiUrl}/${id}`, professor)\n      .pipe(\n        catchError(this.handleError),\n        map(response => response.data)\n      );\n  }\n\n  deleteProfessor(id: number): Observable<any> {\n    return this.http.delete<any>(`${this.apiUrl}/${id}`)\n      .pipe(\n        catchError(this.handleError),\n        map(response => response.data)\n      );\n  }\n\n  private handleError(error: any) {\n    let errorMessage = 'An unknown error occurred!';\n    if (error.error instanceof ErrorEvent) {\n      // Client-side error\n      errorMessage = `Error: ${error.error.message}`;\n    } else if (error.error && error.error.message) {\n      // Server-side error with message\n      errorMessage = error.error.message;\n    } else if (error.status) {\n      // HTTP error\n      errorMessage = `Error ${error.status}: ${error.statusText}`;\n    }\n    return throwError(() => new Error(errorMessage));\n  }\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}