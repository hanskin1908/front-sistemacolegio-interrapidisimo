{"ast":null,"code":"import { throwError } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport { environment } from '../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class EstudianteServicio {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = `${environment.apiUrl}/Estudiantes`;\n  }\n  obtenerEstudiantes() {\n    return this.http.get(this.apiUrl).pipe(map(respuesta => {\n      if (!respuesta.exito) {\n        throw new Error(respuesta.mensaje || 'Error al obtener estudiantes');\n      }\n      return respuesta.data.map(dto => this.mapearEstudianteDtoAEstudiante(dto));\n    }), catchError(error => this.manejarError(error)));\n  }\n  obtenerEstudiante(id) {\n    return this.http.get(`${this.apiUrl}/${id}`).pipe(map(respuesta => {\n      if (!respuesta.exito) {\n        throw new Error(respuesta.mensaje || 'Error al obtener estudiante');\n      }\n      return this.mapearEstudianteDtoAEstudiante(respuesta.data);\n    }), catchError(error => this.manejarError(error)));\n  }\n  crearEstudiante(estudiante) {\n    const estudianteDto = this.mapearEstudianteAEstudianteDto(estudiante);\n    return this.http.post(this.apiUrl, estudianteDto).pipe(map(respuesta => {\n      if (!respuesta.exito) {\n        throw new Error(respuesta.mensaje || 'Error al crear estudiante');\n      }\n      return this.mapearEstudianteDtoAEstudiante(respuesta.data);\n    }), catchError(error => this.manejarError(error)));\n  }\n  actualizarEstudiante(estudiante) {\n    const estudianteDto = this.mapearEstudianteAEstudianteDto(estudiante);\n    return this.http.put(`${this.apiUrl}/${estudiante.id}`, estudianteDto).pipe(map(respuesta => {\n      if (!respuesta.exito) {\n        throw new Error(respuesta.mensaje || 'Error al actualizar estudiante');\n      }\n      return this.mapearEstudianteDtoAEstudiante(respuesta.data);\n    }), catchError(error => this.manejarError(error)));\n  }\n  eliminarEstudiante(id) {\n    return this.http.delete(`${this.apiUrl}/${id}`).pipe(map(respuesta => {\n      if (!respuesta.exito) {\n        throw new Error(respuesta.mensaje || 'Error al eliminar estudiante');\n      }\n      return respuesta.data;\n    }), catchError(error => this.manejarError(error)));\n  }\n  obtenerInscripcionesEstudiante(id) {\n    console.log('Obteniendo inscripciones del estudiante con ID:', id);\n    return this.http.get(`${this.apiUrl}/${id}`).pipe(map(respuesta => {\n      console.log('mensaje', respuesta);\n      if (!respuesta.exito) {\n        throw new Error(respuesta.mensaje || 'Error al obtener registros del estudiante');\n      }\n      return respuesta.data.registros.map(dto => this.mapearRegistroDtoAInscripcion(dto));\n    }), catchError(error => this.manejarError(error)));\n  }\n  mapearEstudianteDtoAEstudiante(dto) {\n    return {\n      id: dto.id,\n      nombre: dto.nombre,\n      email: dto.email,\n      matricula: dto.matricula\n    };\n  }\n  mapearEstudianteAEstudianteDto(estudiante) {\n    return {\n      id: estudiante.id || 0,\n      nombre: estudiante.nombre,\n      email: estudiante.email,\n      matricula: estudiante.matricula,\n      registros: []\n    };\n  }\n  mapearRegistroDtoAInscripcion(dto) {\n    return {\n      id: dto.id,\n      estudianteId: dto.estudianteId,\n      nombreEstudiante: dto.nombreEstudiante,\n      materiaId: dto.materiaId,\n      nombreMateria: dto.nombreMateria,\n      creditos: 0,\n      nombreProfesor: null,\n      fechaRegistro: dto.fechaRegistro.toString()\n    };\n  }\n  manejarError(error) {\n    let mensajeError = '¡Ocurrió un error desconocido!';\n    if (error.error instanceof ErrorEvent) {\n      mensajeError = `Error: ${error.error.message}`;\n    } else if (error.error && error.error.message) {\n      mensajeError = error.error.message;\n    } else if (error.status) {\n      mensajeError = `Error ${error.status}: ${error.statusText}`;\n    }\n    return throwError(() => new Error(mensajeError));\n  }\n  static {\n    this.ɵfac = function EstudianteServicio_Factory(t) {\n      return new (t || EstudianteServicio)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: EstudianteServicio,\n      factory: EstudianteServicio.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"mappings":"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","names":["throwError","catchError","map","environment","EstudianteServicio","constructor","http","apiUrl","obtenerEstudiantes","get","pipe","respuesta","exito","Error","mensaje","data","dto","mapearEstudianteDtoAEstudiante","error","manejarError","obtenerEstudiante","id","crearEstudiante","estudiante","estudianteDto","mapearEstudianteAEstudianteDto","post","actualizarEstudiante","put","eliminarEstudiante","delete","obtenerInscripcionesEstudiante","console","log","registros","mapearRegistroDtoAInscripcion","nombre","email","matricula","estudianteId","nombreEstudiante","materiaId","nombreMateria","creditos","nombreProfesor","fechaRegistro","toString","mensajeError","ErrorEvent","message","status","statusText","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\hansk\\Videos\\frontendsistemacolegio.interrapidisi\\frontendsistemacolegio.interrapidisi\\src\\app\\servicios\\estudiante.servicio.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport { Estudiante } from '../modelos/estudiante.modelo';\nimport { Inscripcion } from '../modelos/inscripcion.modelo';\nimport { environment } from '../../environments/environment';\n\ninterface ApiRespuesta<T> {\n  exito: boolean;\n  mensaje: string;\n  errores: string[];\n  data: T;\n}\n\ninterface EstudianteDto {\n  id: number;\n  nombre: string;\n  email: string;\n  matricula: string;\n  registros: RegistroDto[];\n}\n\ninterface RegistroDto {\n  id: number;\n  estudianteId: number;\n  nombreEstudiante: string;\n  materiaId: number;\n  nombreMateria: string;\n  fechaRegistro: Date;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class EstudianteServicio {\n  private apiUrl = `${environment.apiUrl}/Estudiantes`;\n\n  constructor(private http: HttpClient) { }\n\n  obtenerEstudiantes(): Observable<Estudiante[]> {\n    return this.http.get<ApiRespuesta<EstudianteDto[]>>(this.apiUrl)\n      .pipe(\n        map(respuesta => {\n          if (!respuesta.exito) {\n            throw new Error(respuesta.mensaje || 'Error al obtener estudiantes');\n          }\n          return respuesta.data.map(dto => this.mapearEstudianteDtoAEstudiante(dto));\n        }),\n        catchError(error => this.manejarError(error))\n      );\n  }\n\n  obtenerEstudiante(id: number): Observable<Estudiante> {\n    return this.http.get<ApiRespuesta<EstudianteDto>>(`${this.apiUrl}/${id}`)\n      .pipe(\n        map(respuesta => {\n          if (!respuesta.exito) {\n            throw new Error(respuesta.mensaje || 'Error al obtener estudiante');\n          }\n          return this.mapearEstudianteDtoAEstudiante(respuesta.data);\n        }),\n        catchError(error => this.manejarError(error))\n      );\n  }\n\n  crearEstudiante(estudiante: Estudiante): Observable<Estudiante> {\n    const estudianteDto = this.mapearEstudianteAEstudianteDto(estudiante);\n    return this.http.post<ApiRespuesta<EstudianteDto>>(this.apiUrl, estudianteDto)\n      .pipe(\n        map(respuesta => {\n          if (!respuesta.exito) {\n            throw new Error(respuesta.mensaje || 'Error al crear estudiante');\n          }\n          return this.mapearEstudianteDtoAEstudiante(respuesta.data);\n        }),\n        catchError(error => this.manejarError(error))\n      );\n  }\n\n  actualizarEstudiante(estudiante: Estudiante): Observable<Estudiante> {\n    const estudianteDto = this.mapearEstudianteAEstudianteDto(estudiante);\n    return this.http.put<ApiRespuesta<EstudianteDto>>(`${this.apiUrl}/${estudiante.id}`, estudianteDto)\n      .pipe(\n        map(respuesta => {\n          if (!respuesta.exito) {\n            throw new Error(respuesta.mensaje || 'Error al actualizar estudiante');\n          }\n          return this.mapearEstudianteDtoAEstudiante(respuesta.data);\n        }),\n        catchError(error => this.manejarError(error))\n      );\n  }\n\n  eliminarEstudiante(id: number): Observable<boolean> {\n    return this.http.delete<ApiRespuesta<boolean>>(`${this.apiUrl}/${id}`)\n      .pipe(\n        map(respuesta => {\n          if (!respuesta.exito) {\n            throw new Error(respuesta.mensaje || 'Error al eliminar estudiante');\n          }\n          return respuesta.data;\n        }),\n        catchError(error => this.manejarError(error))\n      );\n  }\n\n  obtenerInscripcionesEstudiante(id: number): Observable<Inscripcion[]> {\n    console.log('Obteniendo inscripciones del estudiante con ID:', id);\n    return this.http.get<ApiRespuesta<EstudianteDto>>(`${this.apiUrl}/${id}`)\n      .pipe(\n        map(respuesta => {\n          console.log('mensaje',respuesta)\n          if (!respuesta.exito) {\n  \n            throw new Error(respuesta.mensaje || 'Error al obtener registros del estudiante');\n          }\n          return respuesta.data.registros.map(dto => this.mapearRegistroDtoAInscripcion(dto));\n        }),\n        catchError(error => this.manejarError(error))\n      );\n  }\n\n  private mapearEstudianteDtoAEstudiante(dto: EstudianteDto): Estudiante {\n    return {\n      id: dto.id,\n      nombre: dto.nombre,\n      email: dto.email,\n      matricula: dto.matricula\n    };\n  }\n\n  private mapearEstudianteAEstudianteDto(estudiante: Estudiante): EstudianteDto {\n    return {\n      id: estudiante.id || 0,\n      nombre: estudiante.nombre,\n      email: estudiante.email,\n      matricula: estudiante.matricula,\n      registros: []\n    };\n  }\n\n  private mapearRegistroDtoAInscripcion(dto: RegistroDto): Inscripcion {\n    return {\n      id: dto.id,\n      estudianteId: dto.estudianteId,\n      nombreEstudiante: dto.nombreEstudiante,\n      materiaId: dto.materiaId,\n      nombreMateria: dto.nombreMateria,\n      creditos: 0, // Este valor vendrá del backend\n      nombreProfesor: null,\n      fechaRegistro: dto.fechaRegistro.toString()\n    };\n  }\n\n  private manejarError(error: any): Observable<never> {\n    let mensajeError = '¡Ocurrió un error desconocido!';\n    if (error.error instanceof ErrorEvent) {\n      mensajeError = `Error: ${error.error.message}`;\n    } else if (error.error && error.error.message) {\n      mensajeError = error.error.message;\n    } else if (error.status) {\n      mensajeError = `Error ${error.status}: ${error.statusText}`;\n    }\n    return throwError(() => new Error(mensajeError));\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}