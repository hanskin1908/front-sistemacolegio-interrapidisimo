{"ast":null,"code":"import { throwError } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport { environment } from '../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class SubjectService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = `${environment.apiUrl}/Materias`;\n    this.registrosUrl = `${environment.apiUrl}/Registros`;\n  }\n  getSubjects() {\n    return this.http.get(this.apiUrl).pipe(map(response => {\n      if (response && response.exito && response.data) {\n        return response.data.map(item => ({\n          id: item.id,\n          name: item.nombre,\n          code: item.codigo,\n          credits: item.creditos,\n          professorId: item.profesorId || 0,\n          professor: item.nombreProfesor ? {\n            id: item.profesorId,\n            name: item.nombreProfesor\n          } : undefined\n        }));\n      }\n      return [];\n    }), catchError(this.handleError));\n  }\n  getSubject(id) {\n    return this.http.get(`${this.apiUrl}/${id}`).pipe(map(response => {\n      if (response && response.exito && response.data) {\n        const item = response.data;\n        return {\n          id: item.id,\n          name: item.nombre,\n          code: item.codigo,\n          credits: item.creditos,\n          professorId: item.profesorId || 0,\n          professor: item.nombreProfesor ? {\n            id: item.profesorId,\n            name: item.nombreProfesor\n          } : undefined\n        };\n      }\n      throw new Error('Subject not found');\n    }), catchError(this.handleError));\n  }\n  getSubjectsByIds(ids) {\n    const queryParams = ids.map(id => `ids=${id}`).join('&');\n    return this.http.get(`${this.apiUrl}/multiple?${queryParams}`).pipe(map(response => {\n      if (response && response.exito && response.data) {\n        return response.data.map(item => ({\n          id: item.id,\n          name: item.nombre,\n          code: item.codigo,\n          credits: item.creditos,\n          professorId: item.profesorId || 0,\n          professor: item.nombreProfesor ? {\n            id: item.profesorId,\n            name: item.nombreProfesor\n          } : undefined\n        }));\n      }\n      return [];\n    }), catchError(this.handleError));\n  }\n  getStudentsBySubject(id) {\n    // Since there's no direct endpoint for this in MateriasController,\n    // we should use the RegistrosController endpoint and map the data\n    return this.http.get(`${environment.apiUrl}/Registros/materia/${id}`).pipe(map(response => {\n      if (response && response.exito && response.data) {\n        // Map registration data to student data\n        return response.data.map(item => ({\n          id: item.estudianteId,\n          name: item.nombreEstudiante,\n          studentId: '',\n          email: '' // This field might not be available from registrations\n          // Add any other required fields\n        }));\n      }\n\n      return [];\n    }), catchError(this.handleError));\n  }\n  handleError(error) {\n    let errorMessage = 'An unknown error occurred!';\n    if (error.error instanceof ErrorEvent) {\n      // Client-side error\n      errorMessage = `Error: ${error.error.message}`;\n    } else if (error.error && error.error.message) {\n      // Server-side error with message\n      errorMessage = error.error.message;\n    } else if (error.status) {\n      // HTTP error\n      errorMessage = `Error ${error.status}: ${error.statusText}`;\n    }\n    return throwError(() => new Error(errorMessage));\n  }\n  static {\n    this.ɵfac = function SubjectService_Factory(t) {\n      return new (t || SubjectService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: SubjectService,\n      factory: SubjectService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"mappings":"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","names":["throwError","catchError","map","environment","SubjectService","constructor","http","apiUrl","getSubjects","get","pipe","response","exito","data","item","id","name","nombre","code","codigo","credits","creditos","professorId","profesorId","professor","nombreProfesor","undefined","handleError","getSubject","Error","getSubjectsByIds","ids","queryParams","join","getStudentsBySubject","estudianteId","nombreEstudiante","studentId","email","error","errorMessage","ErrorEvent","message","status","statusText","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\hansk\\Videos\\Prueba interrapidisimp\\frontend\\src\\app\\services\\subject.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport { Subject } from '../models/subject.model';\nimport { Student } from '../models/student.model';\nimport { environment } from '../../environments/environment';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class SubjectService {\n  private apiUrl = `${environment.apiUrl}/Materias`;\n  private registrosUrl = `${environment.apiUrl}/Registros`;\n\n  constructor(private http: HttpClient) { }\n\n  getSubjects(): Observable<Subject[]> {\n    return this.http.get<any>(this.apiUrl)\n      .pipe(\n        map(response => {\n          if (response && response.exito && response.data) {\n            return response.data.map((item: any) => ({\n              id: item.id,\n              name: item.nombre,\n              code: item.codigo,\n              credits: item.creditos,\n              professorId: item.profesorId || 0,\n              professor: item.nombreProfesor ? { id: item.profesorId, name: item.nombreProfesor } : undefined\n            }));\n          }\n          return [];\n        }),\n        catchError(this.handleError)\n      );\n  }\n\n  getSubject(id: number): Observable<Subject> {\n    return this.http.get<any>(`${this.apiUrl}/${id}`)\n      .pipe(\n        map(response => {\n          if (response && response.exito && response.data) {\n            const item = response.data;\n            return {\n              id: item.id,\n              name: item.nombre,\n              code: item.codigo,\n              credits: item.creditos,\n              professorId: item.profesorId || 0,\n              professor: item.nombreProfesor ? { id: item.profesorId, name: item.nombreProfesor } : undefined\n            };\n          }\n          throw new Error('Subject not found');\n        }),\n        catchError(this.handleError)\n      );\n  }\n\n  getSubjectsByIds(ids: number[]): Observable<Subject[]> {\n    const queryParams = ids.map(id => `ids=${id}`).join('&');\n    return this.http.get<any>(`${this.apiUrl}/multiple?${queryParams}`)\n      .pipe(\n        map(response => {\n          if (response && response.exito && response.data) {\n            return response.data.map((item: any) => ({\n              id: item.id,\n              name: item.nombre,\n              code: item.codigo,\n              credits: item.creditos,\n              professorId: item.profesorId || 0,\n              professor: item.nombreProfesor ? { id: item.profesorId, name: item.nombreProfesor } : undefined\n            }));\n          }\n          return [];\n        }),\n        catchError(this.handleError)\n      );\n  }\n\n  getStudentsBySubject(id: number): Observable<Student[]> {\n    // Since there's no direct endpoint for this in MateriasController,\n    // we should use the RegistrosController endpoint and map the data\n    return this.http.get<any>(`${environment.apiUrl}/Registros/materia/${id}`)\n      .pipe(\n        map(response => {\n          if (response && response.exito && response.data) {\n            // Map registration data to student data\n            return response.data.map((item: any) => ({\n              id: item.estudianteId,\n              name: item.nombreEstudiante,\n              studentId: '', // This field might not be available from registrations\n              email: '',     // This field might not be available from registrations\n              // Add any other required fields\n            }));\n          }\n          return [];\n        }),\n        catchError(this.handleError)\n      );\n  }\n\n  private handleError(error: any) {\n    let errorMessage = 'An unknown error occurred!';\n    if (error.error instanceof ErrorEvent) {\n      // Client-side error\n      errorMessage = `Error: ${error.error.message}`;\n    } else if (error.error && error.error.message) {\n      // Server-side error with message\n      errorMessage = error.error.message;\n    } else if (error.status) {\n      // HTTP error\n      errorMessage = `Error ${error.status}: ${error.statusText}`;\n    }\n    return throwError(() => new Error(errorMessage));\n  }\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}