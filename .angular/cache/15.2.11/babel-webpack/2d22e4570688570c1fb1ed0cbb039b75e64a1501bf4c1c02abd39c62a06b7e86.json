{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/hansk/Videos/frontendsistemacolegio.interrapidisi/frontendsistemacolegio.interrapidisi/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { Validators } from '@angular/forms';\nimport { firstValueFrom } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"../../../servicios/asignatura.servicio\";\nimport * as i3 from \"../../../servicios/inscripcion.servicio\";\nimport * as i4 from \"../../../servicios/autenticacion.servicio\";\nimport * as i5 from \"@angular/router\";\nimport * as i6 from \"@angular/common\";\nimport * as i7 from \"../../compartidos/companeros/companeros.componente\";\nimport * as i8 from \"../creditos-estudiante/creditos-estudiante.componente\";\nfunction RegistroMateriasComponente_div_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 6)(1, \"div\", 7)(2, \"span\", 8);\n    i0.ɵɵtext(3, \"Cargando...\");\n    i0.ɵɵelementEnd()()();\n  }\n}\nfunction RegistroMateriasComponente_div_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 9);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r1.error, \" \");\n  }\n}\nfunction RegistroMateriasComponente_div_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 10);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r2.mensaje, \" \");\n  }\n}\nfunction RegistroMateriasComponente_div_6_div_11_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 22)(1, \"p\");\n    i0.ɵɵtext(2, \"No tienes materias inscritas actualmente.\");\n    i0.ɵɵelementEnd()();\n  }\n}\nfunction RegistroMateriasComponente_div_6_div_12_div_1_p_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"p\", 27);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const inscripcion_r9 = i0.ɵɵnextContext().$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\"Cu00f3digo: \", inscripcion_r9.asignatura == null ? null : inscripcion_r9.asignatura.codigo, \"\");\n  }\n}\nfunction RegistroMateriasComponente_div_6_div_12_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r13 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 25)(1, \"div\", 26)(2, \"h5\", 27);\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"button\", 28);\n    i0.ɵɵlistener(\"click\", function RegistroMateriasComponente_div_6_div_12_div_1_Template_button_click_4_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r13);\n      const inscripcion_r9 = restoredCtx.$implicit;\n      const ctx_r12 = i0.ɵɵnextContext(3);\n      return i0.ɵɵresetView(ctx_r12.desinscribirAsignatura(inscripcion_r9.id));\n    });\n    i0.ɵɵelement(5, \"i\", 29);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵtemplate(6, RegistroMateriasComponente_div_6_div_12_div_1_p_6_Template, 2, 1, \"p\", 30);\n    i0.ɵɵelementStart(7, \"small\");\n    i0.ɵɵtext(8);\n    i0.ɵɵpipe(9, \"date\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(10, \"div\", 31)(11, \"button\", 32);\n    i0.ɵɵtext(12, \" Ver compau00f1eros \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(13, \"div\", 33);\n    i0.ɵɵelement(14, \"app-companeros\", 34);\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const inscripcion_r9 = ctx.$implicit;\n    const ctx_r8 = i0.ɵɵnextContext(3);\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(inscripcion_r9.asignatura == null ? null : inscripcion_r9.asignatura.nombre);\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"ngIf\", inscripcion_r9.asignatura == null ? null : inscripcion_r9.asignatura.codigo);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\"Fecha de inscripciu00f3n: \", i0.ɵɵpipeBind2(9, 7, inscripcion_r9.fechaInscripcion, \"dd/MM/yyyy\"), \"\");\n    i0.ɵɵadvance(3);\n    i0.ɵɵattribute(\"data-bs-target\", \"#companeros-\" + inscripcion_r9.id);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"id\", \"companeros-\" + inscripcion_r9.id);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"asignaturaId\", inscripcion_r9.asignaturaId)(\"estudianteActualId\", ctx_r8.estudianteId);\n  }\n}\nfunction RegistroMateriasComponente_div_6_div_12_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 23);\n    i0.ɵɵtemplate(1, RegistroMateriasComponente_div_6_div_12_div_1_Template, 15, 10, \"div\", 24);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r5 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r5.misAsignaturas);\n  }\n}\nfunction RegistroMateriasComponente_div_6_div_19_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 22)(1, \"p\");\n    i0.ɵɵtext(2, \"No hay materias disponibles para inscribir.\");\n    i0.ɵɵelementEnd()();\n  }\n}\nfunction RegistroMateriasComponente_div_6_div_20_option_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"option\", 38);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const asignatura_r15 = ctx.$implicit;\n    i0.ɵɵproperty(\"ngValue\", asignatura_r15.id);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate3(\" \", asignatura_r15.nombre, \" (\", asignatura_r15.codigo, \") - \", asignatura_r15.creditos, \" cru00e9ditos \");\n  }\n}\nfunction RegistroMateriasComponente_div_6_div_20_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r17 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\")(1, \"div\", 35)(2, \"label\", 36);\n    i0.ɵɵtext(3, \"Selecciona una materia:\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"select\", 37);\n    i0.ɵɵlistener(\"ngModelChange\", function RegistroMateriasComponente_div_6_div_20_Template_select_ngModelChange_4_listener($event) {\n      i0.ɵɵrestoreView(_r17);\n      const ctx_r16 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r16.asignaturaSeleccionada = $event);\n    });\n    i0.ɵɵelementStart(5, \"option\", 38);\n    i0.ɵɵtext(6, \"-- Selecciona una materia --\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(7, RegistroMateriasComponente_div_6_div_20_option_7_Template, 2, 4, \"option\", 39);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(8, \"button\", 40);\n    i0.ɵɵlistener(\"click\", function RegistroMateriasComponente_div_6_div_20_Template_button_click_8_listener() {\n      i0.ɵɵrestoreView(_r17);\n      const ctx_r18 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r18.inscribirAsignatura());\n    });\n    i0.ɵɵelement(9, \"i\", 41);\n    i0.ɵɵtext(10, \" Inscribir Materia \");\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r7 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"ngModel\", ctx_r7.asignaturaSeleccionada);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngValue\", null);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r7.asignaturasDisponibles);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"disabled\", !ctx_r7.asignaturaSeleccionada || ctx_r7.cargando);\n  }\n}\nfunction RegistroMateriasComponente_div_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\")(1, \"div\", 11)(2, \"div\", 12);\n    i0.ɵɵelement(3, \"app-creditos-estudiante\", 13);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(4, \"div\", 14)(5, \"div\", 12)(6, \"div\", 15)(7, \"div\", 16)(8, \"h5\", 17);\n    i0.ɵɵtext(9, \"Mis Materias Inscritas\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(10, \"div\", 18);\n    i0.ɵɵtemplate(11, RegistroMateriasComponente_div_6_div_11_Template, 3, 0, \"div\", 19);\n    i0.ɵɵtemplate(12, RegistroMateriasComponente_div_6_div_12_Template, 2, 1, \"div\", 20);\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementStart(13, \"div\", 12)(14, \"div\", 15)(15, \"div\", 21)(16, \"h5\", 17);\n    i0.ɵɵtext(17, \"Inscribir Nueva Materia\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(18, \"div\", 18);\n    i0.ɵɵtemplate(19, RegistroMateriasComponente_div_6_div_19_Template, 3, 0, \"div\", 19);\n    i0.ɵɵtemplate(20, RegistroMateriasComponente_div_6_div_20_Template, 11, 4, \"div\", 5);\n    i0.ɵɵelementEnd()()()()();\n  }\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"estudianteId\", ctx_r3.estudianteId);\n    i0.ɵɵadvance(8);\n    i0.ɵɵproperty(\"ngIf\", ctx_r3.misAsignaturas.length === 0);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r3.misAsignaturas.length > 0);\n    i0.ɵɵadvance(7);\n    i0.ɵɵproperty(\"ngIf\", ctx_r3.asignaturasDisponibles.length === 0);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r3.asignaturasDisponibles.length > 0);\n  }\n}\nexport class RegistroMateriasComponente {\n  constructor(formBuilder, asignaturaServicio, inscripcionServicio, autenticacionServicio, router) {\n    this.formBuilder = formBuilder;\n    this.asignaturaServicio = asignaturaServicio;\n    this.inscripcionServicio = inscripcionServicio;\n    this.autenticacionServicio = autenticacionServicio;\n    this.router = router;\n    this.asignaturasDisponibles = [];\n    this.inscripcionesActuales = [];\n    this.cargando = false;\n    this.error = '';\n    this.exito = '';\n    this.estudianteId = 0;\n    this.maxAsignaturas = 3;\n    this.asignaturaSeleccionadaId = null; // Para el modal de compañeros\n  }\n\n  ngOnInit() {\n    this.iniciarFormulario();\n    this.obtenerIdEstudianteActual();\n  }\n  iniciarFormulario() {\n    this.formularioInscripcion = this.formBuilder.group({\n      asignaturaId: ['', [Validators.required]]\n    });\n  }\n  obtenerIdEstudianteActual() {\n    this.cargando = true;\n    const usuario = this.autenticacionServicio.obtenerValorUsuarioActual();\n    console.log('Usuario autenticado:', usuario);\n    if (!usuario) {\n      this.error = 'No se pudo obtener la información del usuario. Por favor, inicie sesión nuevamente.';\n      this.cargando = false;\n      return;\n    }\n    console.log('ID de estudiante:', usuario.studentId);\n    if (usuario.role !== 'student') {\n      this.error = 'Esta página es solo para estudiantes.';\n      this.cargando = false;\n      return;\n    }\n    if (!usuario.studentId) {\n      // Si el usuario es estudiante pero no tiene studentId, intentamos obtenerlo del perfil\n      this.autenticacionServicio.obtenerPerfilUsuario(usuario.id).subscribe({\n        next: perfil => {\n          console.log('Perfil obtenido:', perfil);\n          if (perfil.studentId) {\n            this.estudianteId = perfil.studentId;\n            this.cargarInscripcionesActuales();\n            this.cargarAsignaturasDisponibles();\n          } else {\n            this.error = 'No se pudo identificar al estudiante. Por favor, contacte al administrador.';\n            this.cargando = false;\n          }\n        },\n        error: err => {\n          console.error('Error al obtener perfil:', err);\n          this.error = 'Error al obtener información del estudiante: ' + err.message;\n          this.cargando = false;\n        }\n      });\n    } else {\n      this.estudianteId = usuario.studentId;\n      this.cargarInscripcionesActuales();\n      this.cargarAsignaturasDisponibles();\n    }\n  }\n  cargarInscripcionesActuales() {\n    this.inscripcionServicio.obtenerInscripcionesEstudiante(this.estudianteId).subscribe({\n      next: inscripciones => {\n        this.inscripcionesActuales = inscripciones;\n        this.cargando = false;\n      },\n      error: err => {\n        this.error = 'Error al cargar inscripciones actuales';\n        this.cargando = false;\n        console.error(err);\n      }\n    });\n  }\n  cargarAsignaturasDisponibles() {\n    this.asignaturaServicio.obtenerAsignaturas().subscribe({\n      next: asignaturas => {\n        // Filtrar materias ya registradas\n        const idsAsignaturasRegistradas = this.inscripcionesActuales.map(reg => reg.asignaturaId);\n        this.asignaturasDisponibles = asignaturas.filter(asignatura => !idsAsignaturasRegistradas.includes(asignatura.id));\n        this.cargando = false;\n      },\n      error: err => {\n        this.error = 'Error al cargar asignaturas disponibles';\n        this.cargando = false;\n        console.error(err);\n      }\n    });\n  }\n  onSubmit() {\n    if (this.formularioInscripcion.invalid) {\n      return;\n    }\n    this.cargando = true;\n    this.error = '';\n    this.exito = '';\n    const asignaturaId = this.formularioInscripcion.value.asignaturaId;\n    // Verificar si ya tiene el máximo de materias\n    if (this.inscripcionesActuales.length >= this.maxAsignaturas) {\n      this.error = `No puedes registrar más de ${this.maxAsignaturas} materias`;\n      this.cargando = false;\n      return;\n    }\n    // Verificar si ya tiene una materia con el mismo profesor\n    this.verificarConflictoProfesor(asignaturaId).then(tieneConflicto => {\n      if (tieneConflicto) {\n        this.error = 'No puedes tener más de una materia con el mismo profesor';\n        this.cargando = false;\n        return;\n      }\n      // Proceder con el registro\n      const asignaturaSeleccionada = this.asignaturasDisponibles.find(a => a.id === asignaturaId);\n      const solicitudInscripcion = {\n        estudianteId: this.estudianteId,\n        asignaturaId: asignaturaId,\n        nombreEstudiante: this.autenticacionServicio.obtenerValorUsuarioActual()?.name || '',\n        nombreAsignatura: asignaturaSeleccionada?.nombre || ''\n      };\n      this.inscripcionServicio.inscribirAsignatura(solicitudInscripcion).subscribe({\n        next: inscripcion => {\n          this.exito = 'Materia registrada correctamente';\n          this.cargando = false;\n          this.formularioInscripcion.reset();\n          // Recargar los datos\n          this.cargarInscripcionesActuales();\n          this.cargarAsignaturasDisponibles();\n        },\n        error: err => {\n          this.error = err.message || 'Error al registrar la materia';\n          this.cargando = false;\n          console.error(err);\n        }\n      });\n    }).catch(err => {\n      this.error = 'Error al verificar conflictos de profesor';\n      this.cargando = false;\n      console.error(err);\n    });\n  }\n  verificarConflictoProfesor(nuevaAsignaturaId) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      // Si no hay registros actuales, no hay conflicto\n      if (_this.inscripcionesActuales.length === 0) {\n        return false;\n      }\n      try {\n        // Obtener la nueva materia\n        const nuevaAsignatura = yield firstValueFrom(_this.asignaturaServicio.obtenerAsignatura(nuevaAsignaturaId));\n        if (!nuevaAsignatura) return false;\n        // Obtener las materias actuales\n        const idsAsignaturasActuales = _this.inscripcionesActuales.map(reg => reg.asignaturaId);\n        const asignaturasActuales = yield firstValueFrom(_this.asignaturaServicio.obtenerAsignaturasPorIds(idsAsignaturasActuales));\n        if (!asignaturasActuales) return false;\n        // Verificar si hay conflicto de profesor\n        return asignaturasActuales.some(asignatura => asignatura.profesorId === nuevaAsignatura.profesorId);\n      } catch (error) {\n        console.error('Error al verificar conflicto de profesor:', error);\n        return false;\n      }\n    })();\n  }\n  desinscribirAsignatura(inscripcionId) {\n    if (!inscripcionId) {\n      this.error = 'ID de inscripción no válido';\n      return;\n    }\n    if (confirm('¿Estás seguro de que deseas eliminar esta materia?')) {\n      this.cargando = true;\n      this.error = '';\n      this.exito = '';\n      this.inscripcionServicio.desinscribirAsignatura(inscripcionId).subscribe({\n        next: () => {\n          this.exito = 'Materia eliminada correctamente';\n          this.cargando = false;\n          // Recargar los datos\n          this.cargarInscripcionesActuales();\n          this.cargarAsignaturasDisponibles();\n        },\n        error: err => {\n          this.error = 'Error al eliminar la materia';\n          this.cargando = false;\n          console.error(err);\n        }\n      });\n    }\n  }\n  // Método para abrir el modal de compañeros\n  abrirModalCompaneros(asignaturaId) {\n    if (!asignaturaId) {\n      this.error = 'Error: No se pudo identificar la materia seleccionada';\n      setTimeout(() => this.error = '', 3000); // Limpiar el mensaje después de 3 segundos\n      return;\n    }\n    this.asignaturaSeleccionadaId = asignaturaId;\n    try {\n      // Asegurarse de que Bootstrap esté disponible\n      if (typeof bootstrap === 'undefined') {\n        console.error('Bootstrap no está disponible');\n        this.error = 'Error al mostrar la ventana modal. Intente nuevamente.';\n        setTimeout(() => this.error = '', 3000);\n        return;\n      }\n      // Usar Bootstrap 5 para abrir el modal\n      const elementoModal = document.getElementById('modalCompaneros');\n      if (elementoModal) {\n        // Asegurarse de que cualquier modal previo se cierre\n        const modalExistente = bootstrap.Modal.getInstance(elementoModal);\n        if (modalExistente) {\n          modalExistente.dispose();\n        }\n        // Crear una nueva instancia del modal con opciones específicas\n        const opcionesModal = {\n          backdrop: 'static',\n          keyboard: true,\n          focus: true // Enfoca el modal cuando se abre\n        };\n\n        const instanciaModal = new bootstrap.Modal(elementoModal, opcionesModal);\n        // Asegurarse de que el modal esté visible\n        elementoModal.style.display = 'block';\n        elementoModal.style.zIndex = '1050';\n        // Mostrar el modal\n        instanciaModal.show();\n        // Verificar que el modal se haya abierto correctamente\n        setTimeout(() => {\n          if (elementoModal.classList.contains('show')) {\n            co;\n          }\n        });\n      }\n    } finally {}\n  }\n  static {\n    this.ɵfac = function RegistroMateriasComponente_Factory(t) {\n      return new (t || RegistroMateriasComponente)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.AsignaturaServicio), i0.ɵɵdirectiveInject(i3.InscripcionServicio), i0.ɵɵdirectiveInject(i4.AutenticacionServicio), i0.ɵɵdirectiveInject(i5.Router));\n    };\n  }\n  static {\n    this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: RegistroMateriasComponente,\n      selectors: [[\"app-registro-materias\"]],\n      decls: 7,\n      vars: 4,\n      consts: [[1, \"container\"], [1, \"mb-4\"], [\"class\", \"text-center p-5\", 4, \"ngIf\"], [\"class\", \"alert alert-danger\", 4, \"ngIf\"], [\"class\", \"alert alert-success\", 4, \"ngIf\"], [4, \"ngIf\"], [1, \"text-center\", \"p-5\"], [\"role\", \"status\", 1, \"spinner-border\", \"text-primary\"], [1, \"visually-hidden\"], [1, \"alert\", \"alert-danger\"], [1, \"alert\", \"alert-success\"], [1, \"row\"], [1, \"col-md-6\"], [3, \"estudianteId\"], [1, \"row\", \"mt-4\"], [1, \"card\"], [1, \"card-header\", \"bg-primary\", \"text-white\"], [1, \"mb-0\"], [1, \"card-body\"], [\"class\", \"text-center text-muted\", 4, \"ngIf\"], [\"class\", \"list-group\", 4, \"ngIf\"], [1, \"card-header\", \"bg-success\", \"text-white\"], [1, \"text-center\", \"text-muted\"], [1, \"list-group\"], [\"class\", \"list-group-item list-group-item-action flex-column align-items-start\", 4, \"ngFor\", \"ngForOf\"], [1, \"list-group-item\", \"list-group-item-action\", \"flex-column\", \"align-items-start\"], [1, \"d-flex\", \"w-100\", \"justify-content-between\"], [1, \"mb-1\"], [1, \"btn\", \"btn-sm\", \"btn-danger\", 3, \"click\"], [1, \"bi\", \"bi-trash\"], [\"class\", \"mb-1\", 4, \"ngIf\"], [1, \"mt-3\"], [\"type\", \"button\", \"data-bs-toggle\", \"collapse\", \"aria-expanded\", \"false\", 1, \"btn\", \"btn-sm\", \"btn-outline-primary\"], [1, \"collapse\", \"mt-2\", 3, \"id\"], [3, \"asignaturaId\", \"estudianteActualId\"], [1, \"form-group\", \"mb-3\"], [\"for\", \"asignaturaSelect\", 1, \"form-label\"], [\"id\", \"asignaturaSelect\", 1, \"form-select\", 3, \"ngModel\", \"ngModelChange\"], [3, \"ngValue\"], [3, \"ngValue\", 4, \"ngFor\", \"ngForOf\"], [1, \"btn\", \"btn-success\", 3, \"disabled\", \"click\"], [1, \"bi\", \"bi-plus-circle\", \"me-1\"]],\n      template: function RegistroMateriasComponente_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"div\", 0)(1, \"h2\", 1);\n          i0.ɵɵtext(2, \"Registro de Materias\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵtemplate(3, RegistroMateriasComponente_div_3_Template, 4, 0, \"div\", 2);\n          i0.ɵɵtemplate(4, RegistroMateriasComponente_div_4_Template, 2, 1, \"div\", 3);\n          i0.ɵɵtemplate(5, RegistroMateriasComponente_div_5_Template, 2, 1, \"div\", 4);\n          i0.ɵɵtemplate(6, RegistroMateriasComponente_div_6_Template, 21, 5, \"div\", 5);\n          i0.ɵɵelementEnd();\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(3);\n          i0.ɵɵproperty(\"ngIf\", ctx.cargando);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", ctx.error);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", ctx.mensaje);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", !ctx.cargando && !ctx.error);\n        }\n      },\n      dependencies: [i6.NgForOf, i6.NgIf, i1.NgSelectOption, i1.ɵNgSelectMultipleOption, i1.SelectControlValueAccessor, i1.NgControlStatus, i1.NgModel, i7.CompanerosComponente, i8.CreditosEstudianteComponente, i6.DatePipe],\n      styles: [\".card[_ngcontent-%COMP%] {\\n  margin-bottom: 20px;\\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\\n}\\n\\n.card-header[_ngcontent-%COMP%] {\\n  font-weight: 500;\\n}\\n\\n.list-group-item[_ngcontent-%COMP%] {\\n  transition: background-color 0.2s;\\n}\\n\\n.list-group-item[_ngcontent-%COMP%]:hover {\\n  background-color: #f8f9fa;\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvY29tcG9uZW50ZXMvZXN0dWRpYW50ZXMvcmVnaXN0cm8tbWF0ZXJpYXMvcmVnaXN0cm8tbWF0ZXJpYXMuY29tcG9uZW50ZS5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDRSxtQkFBbUI7RUFDbkIsd0NBQXdDO0FBQzFDOztBQUVBO0VBQ0UsZ0JBQWdCO0FBQ2xCOztBQUVBO0VBQ0UsaUNBQWlDO0FBQ25DOztBQUVBO0VBQ0UseUJBQXlCO0FBQzNCIiwic291cmNlc0NvbnRlbnQiOlsiLmNhcmQge1xuICBtYXJnaW4tYm90dG9tOiAyMHB4O1xuICBib3gtc2hhZG93OiAwIDJweCA0cHggcmdiYSgwLCAwLCAwLCAwLjEpO1xufVxuXG4uY2FyZC1oZWFkZXIge1xuICBmb250LXdlaWdodDogNTAwO1xufVxuXG4ubGlzdC1ncm91cC1pdGVtIHtcbiAgdHJhbnNpdGlvbjogYmFja2dyb3VuZC1jb2xvciAwLjJzO1xufVxuXG4ubGlzdC1ncm91cC1pdGVtOmhvdmVyIHtcbiAgYmFja2dyb3VuZC1jb2xvcjogI2Y4ZjlmYTtcbn0iXSwic291cmNlUm9vdCI6IiJ9 */\"]\n    });\n  }\n}","map":{"version":3,"mappings":";AACA,SAAiCA,UAAU,QAAQ,gBAAgB;AAOnE,SAASC,cAAc,QAAQ,MAAM;;;;;;;;;;;;ICLnCC,8BAA8C;IAEZA,2BAAW;IAAAA,iBAAO;;;;;IAIpDA,8BAA8C;IAC5CA,YACF;IAAAA,iBAAM;;;;IADJA,eACF;IADEA,6CACF;;;;;IAEAA,+BAAiD;IAC/CA,YACF;IAAAA,iBAAM;;;;IADJA,eACF;IADEA,+CACF;;;;;IAgBUA,+BAAwE;IACnEA,yDAAyC;IAAAA,iBAAI;;;;;IAW9CA,6BAAuD;IAAAA,YAAgD;IAAAA,iBAAI;;;;IAApDA,eAAgD;IAAhDA,sHAAgD;;;;;;IAPzGA,+BAA6H;IAExGA,YAAoC;IAAAA,iBAAK;IAC1DA,kCAAuF;IAAjDA;MAAA;MAAA;MAAA;MAAA,OAASA,gEAAsC;IAAA,EAAC;IACpFA,wBAA2B;IAC7BA,iBAAS;IAEXA,2FAA2G;IAC3GA,6BAAO;IAAAA,YAAgF;;IAAAA,iBAAQ;IAE/FA,gCAAkB;IAEdA,qCACF;IAAAA,iBAAS;IACTA,gCAAiE;IAC/DA,sCAA+G;IACjHA,iBAAM;;;;;IAdWA,eAAoC;IAApCA,iGAAoC;IAKtCA,eAAoC;IAApCA,kGAAoC;IAC9CA,eAAgF;IAAhFA,4HAAgF;IAGEA,eAAuD;IAAvDA,oEAAuD;IAGnHA,eAAqC;IAArCA,sDAAqC;IAC9CA,eAAyC;IAAzCA,0DAAyC;;;;;IAhBjEA,+BAA0D;IACxDA,2FAkBM;IACRA,iBAAM;;;;IAnByBA,eAAiB;IAAjBA,+CAAiB;;;;;IA8BhDA,+BAAgF;IAC3EA,2DAA2C;IAAAA,iBAAI;;;;;IAQ9CA,kCAAoF;IAClFA,YACF;IAAAA,iBAAS;;;;IAFiDA,2CAAyB;IACjFA,eACF;IADEA,iIACF;;;;;;IAPNA,2BAA+C;IAEMA,uCAAuB;IAAAA,iBAAQ;IAChFA,kCAAuF;IAArCA;MAAAA;MAAA;MAAA;IAAA,EAAoC;IACpFA,kCAAyB;IAAAA,4CAA4B;IAAAA,iBAAS;IAC9DA,+FAES;IACXA,iBAAS;IAGXA,kCAAiH;IAAhCA;MAAAA;MAAA;MAAA,OAASA,4CAAqB;IAAA,EAAC;IAC9GA,wBAAsC;IAACA,oCACzC;IAAAA,iBAAS;;;;IAV2CA,eAAoC;IAApCA,uDAAoC;IAC5EA,eAAgB;IAAhBA,8BAAgB;IACOA,eAAyB;IAAzBA,uDAAyB;IAM5BA,eAAgD;IAAhDA,4EAAgD;;;;;IAhE5FA,2BAAiC;IAG3BA,8CAAiF;IACnFA,iBAAM;IAGRA,+BAAsB;IAIGA,sCAAsB;IAAAA,iBAAK;IAE9CA,gCAAuB;IACrBA,oFAEM;IAENA,oFAoBM;IACRA,iBAAM;IAIVA,gCAAsB;IAGCA,wCAAuB;IAAAA,iBAAK;IAE/CA,gCAAuB;IACrBA,oFAEM;IAENA,oFAcM;IACRA,iBAAM;;;;IAjEiBA,eAA6B;IAA7BA,kDAA6B;IAW5CA,eAAiC;IAAjCA,yDAAiC;IAIjCA,eAA+B;IAA/BA,uDAA+B;IA+B/BA,eAAyC;IAAzCA,iEAAyC;IAIzCA,eAAuC;IAAvCA,+DAAuC;;;ADpDzD,OAAM,MAAOC,0BAA0B;EAWrCC,YACUC,WAAwB,EACxBC,kBAAsC,EACtCC,mBAAwC,EACxCC,qBAA4C,EAC5CC,MAAc;IAJd,gBAAW,GAAXJ,WAAW;IACX,uBAAkB,GAAlBC,kBAAkB;IAClB,wBAAmB,GAAnBC,mBAAmB;IACnB,0BAAqB,GAArBC,qBAAqB;IACrB,WAAM,GAANC,MAAM;IAdhB,2BAAsB,GAAiB,EAAE;IACzC,0BAAqB,GAAkB,EAAE;IACzC,aAAQ,GAAG,KAAK;IAChB,UAAK,GAAG,EAAE;IACV,UAAK,GAAG,EAAE;IACV,iBAAY,GAAW,CAAC;IACxB,mBAAc,GAAG,CAAC;IAClB,6BAAwB,GAAkB,IAAI,CAAC,CAAC;EAQ7C;;EAEHC,QAAQ;IACN,IAAI,CAACC,iBAAiB,EAAE;IACxB,IAAI,CAACC,yBAAyB,EAAE;EAClC;EAEAD,iBAAiB;IACf,IAAI,CAACE,qBAAqB,GAAG,IAAI,CAACR,WAAW,CAACS,KAAK,CAAC;MAClDC,YAAY,EAAE,CAAC,EAAE,EAAE,CAACf,UAAU,CAACgB,QAAQ,CAAC;KACzC,CAAC;EACJ;EAEAJ,yBAAyB;IACvB,IAAI,CAACK,QAAQ,GAAG,IAAI;IACpB,MAAMC,OAAO,GAAG,IAAI,CAACV,qBAAqB,CAACW,yBAAyB,EAAE;IACtEC,OAAO,CAACC,GAAG,CAAC,sBAAsB,EAAEH,OAAO,CAAC;IAE5C,IAAI,CAACA,OAAO,EAAE;MACZ,IAAI,CAACI,KAAK,GAAG,qFAAqF;MAClG,IAAI,CAACL,QAAQ,GAAG,KAAK;MACrB;;IAGFG,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAEH,OAAO,CAACK,SAAS,CAAC;IAEnD,IAAIL,OAAO,CAACM,IAAI,KAAK,SAAS,EAAE;MAC9B,IAAI,CAACF,KAAK,GAAG,uCAAuC;MACpD,IAAI,CAACL,QAAQ,GAAG,KAAK;MACrB;;IAGF,IAAI,CAACC,OAAO,CAACK,SAAS,EAAE;MACtB;MACA,IAAI,CAACf,qBAAqB,CAACiB,oBAAoB,CAACP,OAAO,CAACQ,EAAE,CAAC,CAACC,SAAS,CAAC;QACpEC,IAAI,EAAGC,MAAM,IAAI;UACfT,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAEQ,MAAM,CAAC;UACvC,IAAIA,MAAM,CAACN,SAAS,EAAE;YACpB,IAAI,CAACO,YAAY,GAAGD,MAAM,CAACN,SAAS;YACpC,IAAI,CAACQ,2BAA2B,EAAE;YAClC,IAAI,CAACC,4BAA4B,EAAE;WACpC,MAAM;YACL,IAAI,CAACV,KAAK,GAAG,6EAA6E;YAC1F,IAAI,CAACL,QAAQ,GAAG,KAAK;;QAEzB,CAAC;QACDK,KAAK,EAAGW,GAAG,IAAI;UACbb,OAAO,CAACE,KAAK,CAAC,0BAA0B,EAAEW,GAAG,CAAC;UAC9C,IAAI,CAACX,KAAK,GAAG,+CAA+C,GAAGW,GAAG,CAACC,OAAO;UAC1E,IAAI,CAACjB,QAAQ,GAAG,KAAK;QACvB;OACD,CAAC;KACH,MAAM;MACL,IAAI,CAACa,YAAY,GAAGZ,OAAO,CAACK,SAAS;MACrC,IAAI,CAACQ,2BAA2B,EAAE;MAClC,IAAI,CAACC,4BAA4B,EAAE;;EAEvC;EAEAD,2BAA2B;IACzB,IAAI,CAACxB,mBAAmB,CAAC4B,8BAA8B,CAAC,IAAI,CAACL,YAAY,CAAC,CAACH,SAAS,CAAC;MACnFC,IAAI,EAAGQ,aAAa,IAAI;QACtB,IAAI,CAACC,qBAAqB,GAAGD,aAAa;QAC1C,IAAI,CAACnB,QAAQ,GAAG,KAAK;MACvB,CAAC;MACDK,KAAK,EAAGW,GAAG,IAAI;QACb,IAAI,CAACX,KAAK,GAAG,wCAAwC;QACrD,IAAI,CAACL,QAAQ,GAAG,KAAK;QACrBG,OAAO,CAACE,KAAK,CAACW,GAAG,CAAC;MACpB;KACD,CAAC;EACJ;EAEAD,4BAA4B;IAC1B,IAAI,CAAC1B,kBAAkB,CAACgC,kBAAkB,EAAE,CAACX,SAAS,CAAC;MACrDC,IAAI,EAAGW,WAAW,IAAI;QACpB;QACA,MAAMC,yBAAyB,GAAG,IAAI,CAACH,qBAAqB,CAACI,GAAG,CAACC,GAAG,IAAIA,GAAG,CAAC3B,YAAY,CAAC;QACzF,IAAI,CAAC4B,sBAAsB,GAAGJ,WAAW,CAACK,MAAM,CAACC,UAAU,IAAI,CAACL,yBAAyB,CAACM,QAAQ,CAACD,UAAU,CAACnB,EAAE,CAAC,CAAC;QAClH,IAAI,CAACT,QAAQ,GAAG,KAAK;MACvB,CAAC;MACDK,KAAK,EAAGW,GAAG,IAAI;QACb,IAAI,CAACX,KAAK,GAAG,yCAAyC;QACtD,IAAI,CAACL,QAAQ,GAAG,KAAK;QACrBG,OAAO,CAACE,KAAK,CAACW,GAAG,CAAC;MACpB;KACD,CAAC;EACJ;EAEAc,QAAQ;IACN,IAAI,IAAI,CAAClC,qBAAqB,CAACmC,OAAO,EAAE;MACtC;;IAGF,IAAI,CAAC/B,QAAQ,GAAG,IAAI;IACpB,IAAI,CAACK,KAAK,GAAG,EAAE;IACf,IAAI,CAAC2B,KAAK,GAAG,EAAE;IAEf,MAAMlC,YAAY,GAAG,IAAI,CAACF,qBAAqB,CAACqC,KAAK,CAACnC,YAAY;IAElE;IACA,IAAI,IAAI,CAACsB,qBAAqB,CAACc,MAAM,IAAI,IAAI,CAACC,cAAc,EAAE;MAC5D,IAAI,CAAC9B,KAAK,GAAG,8BAA8B,IAAI,CAAC8B,cAAc,WAAW;MACzE,IAAI,CAACnC,QAAQ,GAAG,KAAK;MACrB;;IAGF;IACA,IAAI,CAACoC,0BAA0B,CAACtC,YAAY,CAAC,CAACuC,IAAI,CAACC,cAAc,IAAG;MAClE,IAAIA,cAAc,EAAE;QAClB,IAAI,CAACjC,KAAK,GAAG,0DAA0D;QACvE,IAAI,CAACL,QAAQ,GAAG,KAAK;QACrB;;MAGF;MACA,MAAMuC,sBAAsB,GAAG,IAAI,CAACb,sBAAsB,CAACc,IAAI,CAACC,CAAC,IAAIA,CAAC,CAAChC,EAAE,KAAKX,YAAY,CAAC;MAE3F,MAAM4C,oBAAoB,GAAyB;QACjD7B,YAAY,EAAE,IAAI,CAACA,YAAY;QAC/Bf,YAAY,EAAEA,YAAY;QAC1B6C,gBAAgB,EAAE,IAAI,CAACpD,qBAAqB,CAACW,yBAAyB,EAAE,EAAE0C,IAAI,IAAI,EAAE;QACpFC,gBAAgB,EAAEN,sBAAsB,EAAEO,MAAM,IAAI;OACrD;MAED,IAAI,CAACxD,mBAAmB,CAACyD,mBAAmB,CAACL,oBAAoB,CAAC,CAAChC,SAAS,CAAC;QAC3EC,IAAI,EAAGqC,WAAW,IAAI;UACpB,IAAI,CAAChB,KAAK,GAAG,kCAAkC;UAC/C,IAAI,CAAChC,QAAQ,GAAG,KAAK;UACrB,IAAI,CAACJ,qBAAqB,CAACqD,KAAK,EAAE;UAClC;UACA,IAAI,CAACnC,2BAA2B,EAAE;UAClC,IAAI,CAACC,4BAA4B,EAAE;QACrC,CAAC;QACDV,KAAK,EAAGW,GAAG,IAAI;UACb,IAAI,CAACX,KAAK,GAAGW,GAAG,CAACC,OAAO,IAAI,+BAA+B;UAC3D,IAAI,CAACjB,QAAQ,GAAG,KAAK;UACrBG,OAAO,CAACE,KAAK,CAACW,GAAG,CAAC;QACpB;OACD,CAAC;IACJ,CAAC,CAAC,CAACkC,KAAK,CAAClC,GAAG,IAAG;MACb,IAAI,CAACX,KAAK,GAAG,2CAA2C;MACxD,IAAI,CAACL,QAAQ,GAAG,KAAK;MACrBG,OAAO,CAACE,KAAK,CAACW,GAAG,CAAC;IACpB,CAAC,CAAC;EACJ;EAEMoB,0BAA0B,CAACe,iBAAyB;IAAA;IAAA;MACxD;MACA,IAAI,KAAI,CAAC/B,qBAAqB,CAACc,MAAM,KAAK,CAAC,EAAE;QAC3C,OAAO,KAAK;;MAGd,IAAI;QACF;QACA,MAAMkB,eAAe,SAASpE,cAAc,CAAC,KAAI,CAACK,kBAAkB,CAACgE,iBAAiB,CAACF,iBAAiB,CAAC,CAAC;QAC1G,IAAI,CAACC,eAAe,EAAE,OAAO,KAAK;QAElC;QACA,MAAME,sBAAsB,GAAG,KAAI,CAAClC,qBAAqB,CAACI,GAAG,CAACC,GAAG,IAAIA,GAAG,CAAC3B,YAAY,CAAC;QACtF,MAAMyD,mBAAmB,SAASvE,cAAc,CAAC,KAAI,CAACK,kBAAkB,CAACmE,wBAAwB,CAACF,sBAAsB,CAAC,CAAC;QAC1H,IAAI,CAACC,mBAAmB,EAAE,OAAO,KAAK;QAEtC;QACA,OAAOA,mBAAmB,CAACE,IAAI,CAAC7B,UAAU,IAAIA,UAAU,CAAC8B,UAAU,KAAKN,eAAe,CAACM,UAAU,CAAC;OACpG,CAAC,OAAOrD,KAAK,EAAE;QACdF,OAAO,CAACE,KAAK,CAAC,2CAA2C,EAAEA,KAAK,CAAC;QACjE,OAAO,KAAK;;IACb;EACH;EAEAsD,sBAAsB,CAACC,aAAiC;IACtD,IAAI,CAACA,aAAa,EAAE;MAClB,IAAI,CAACvD,KAAK,GAAG,6BAA6B;MAC1C;;IAGF,IAAIwD,OAAO,CAAC,oDAAoD,CAAC,EAAE;MACjE,IAAI,CAAC7D,QAAQ,GAAG,IAAI;MACpB,IAAI,CAACK,KAAK,GAAG,EAAE;MACf,IAAI,CAAC2B,KAAK,GAAG,EAAE;MAEf,IAAI,CAAC1C,mBAAmB,CAACqE,sBAAsB,CAACC,aAAa,CAAC,CAAClD,SAAS,CAAC;QACvEC,IAAI,EAAE,MAAK;UACT,IAAI,CAACqB,KAAK,GAAG,iCAAiC;UAC9C,IAAI,CAAChC,QAAQ,GAAG,KAAK;UACrB;UACA,IAAI,CAACc,2BAA2B,EAAE;UAClC,IAAI,CAACC,4BAA4B,EAAE;QACrC,CAAC;QACDV,KAAK,EAAGW,GAAG,IAAI;UACb,IAAI,CAACX,KAAK,GAAG,8BAA8B;UAC3C,IAAI,CAACL,QAAQ,GAAG,KAAK;UACrBG,OAAO,CAACE,KAAK,CAACW,GAAG,CAAC;QACpB;OACD,CAAC;;EAEN;EAEA;EACA8C,oBAAoB,CAAChE,YAAoB;IACvC,IAAI,CAACA,YAAY,EAAE;MACjB,IAAI,CAACO,KAAK,GAAG,uDAAuD;MACpE0D,UAAU,CAAC,MAAM,IAAI,CAAC1D,KAAK,GAAG,EAAE,EAAE,IAAI,CAAC,CAAC,CAAC;MACzC;;IAGF,IAAI,CAAC2D,wBAAwB,GAAGlE,YAAY;IAE5C,IAAI;MACF;MACA,IAAI,OAAOmE,SAAS,KAAK,WAAW,EAAE;QACpC9D,OAAO,CAACE,KAAK,CAAC,8BAA8B,CAAC;QAC7C,IAAI,CAACA,KAAK,GAAG,wDAAwD;QACrE0D,UAAU,CAAC,MAAM,IAAI,CAAC1D,KAAK,GAAG,EAAE,EAAE,IAAI,CAAC;QACvC;;MAGF;MACA,MAAM6D,aAAa,GAAuBC,QAAQ,CAACC,cAAc,CAAC,iBAAiB,CAAC;MACpF,IAAIF,aAAa,EAAE;QACjB;QACA,MAAMG,cAAc,GAAGJ,SAAS,CAACK,KAAK,CAACC,WAAW,CAACL,aAAa,CAAC;QACjE,IAAIG,cAAc,EAAE;UAClBA,cAAc,CAACG,OAAO,EAAE;;QAG1B;QACA,MAAMC,aAAa,GAAG;UACpBC,QAAQ,EAAE,QAAQ;UAClBC,QAAQ,EAAE,IAAI;UACdC,KAAK,EAAE,IAAI,CAAS;SACrB;;QAED,MAAMC,cAAc,GAAG,IAAIZ,SAAS,CAACK,KAAK,CAACJ,aAAa,EAAEO,aAAa,CAAC;QAExE;QACAP,aAAa,CAACY,KAAK,CAACC,OAAO,GAAG,OAAO;QACrCb,aAAa,CAACY,KAAK,CAACE,MAAM,GAAG,MAAM;QAEnC;QACAH,cAAc,CAACI,IAAI,EAAE;QAErB;QACAlB,UAAU,CAAC,MAAK;UACd,IAAIG,aAAa,CAACgB,SAAS,CAACC,QAAQ,CAAC,MAAM,CAAC,EAAE;YAC5CC,EAAE;;QAAA,CAAC,CAAD;;KAAA;EAAA;;;uBAvQDlG,0BAA0B;IAAA;EAAA;;;YAA1BA,0BAA0B;MAAAmG;MAAAC;MAAAC;MAAAC;MAAAC;QAAA;UClBvCxG,8BAAuB;UACJA,oCAAoB;UAAAA,iBAAK;UAE1CA,2EAIM;UAENA,2EAEM;UAENA,2EAEM;UAENA,4EAwEM;UACRA,iBAAM;;;UAvFEA,eAAc;UAAdA,mCAAc;UAMdA,eAAW;UAAXA,gCAAW;UAIXA,eAAa;UAAbA,kCAAa;UAIbA,eAAyB;UAAzBA,kDAAyB","names":["Validators","firstValueFrom","i0","RegistroMateriasComponente","constructor","formBuilder","asignaturaServicio","inscripcionServicio","autenticacionServicio","router","ngOnInit","iniciarFormulario","obtenerIdEstudianteActual","formularioInscripcion","group","asignaturaId","required","cargando","usuario","obtenerValorUsuarioActual","console","log","error","studentId","role","obtenerPerfilUsuario","id","subscribe","next","perfil","estudianteId","cargarInscripcionesActuales","cargarAsignaturasDisponibles","err","message","obtenerInscripcionesEstudiante","inscripciones","inscripcionesActuales","obtenerAsignaturas","asignaturas","idsAsignaturasRegistradas","map","reg","asignaturasDisponibles","filter","asignatura","includes","onSubmit","invalid","exito","value","length","maxAsignaturas","verificarConflictoProfesor","then","tieneConflicto","asignaturaSeleccionada","find","a","solicitudInscripcion","nombreEstudiante","name","nombreAsignatura","nombre","inscribirAsignatura","inscripcion","reset","catch","nuevaAsignaturaId","nuevaAsignatura","obtenerAsignatura","idsAsignaturasActuales","asignaturasActuales","obtenerAsignaturasPorIds","some","profesorId","desinscribirAsignatura","inscripcionId","confirm","abrirModalCompaneros","setTimeout","asignaturaSeleccionadaId","bootstrap","elementoModal","document","getElementById","modalExistente","Modal","getInstance","dispose","opcionesModal","backdrop","keyboard","focus","instanciaModal","style","display","zIndex","show","classList","contains","co","selectors","decls","vars","consts","template"],"sourceRoot":"","sources":["C:\\Users\\hansk\\Videos\\frontendsistemacolegio.interrapidisi\\frontendsistemacolegio.interrapidisi\\src\\app\\componentes\\estudiantes\\registro-materias\\registro-materias.componente.ts","C:\\Users\\hansk\\Videos\\frontendsistemacolegio.interrapidisi\\frontendsistemacolegio.interrapidisi\\src\\app\\componentes\\estudiantes\\registro-materias\\registro-materias.componente.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { Asignatura } from '../../../modelos/asignatura.modelo';\nimport { Inscripcion, SolicitudInscripcion } from '../../../modelos/inscripcion.modelo';\nimport { AsignaturaServicio } from '../../../servicios/asignatura.servicio';\nimport { InscripcionServicio } from '../../../servicios/inscripcion.servicio';\nimport { AutenticacionServicio } from '../../../servicios/autenticacion.servicio';\nimport { Router } from '@angular/router';\nimport { firstValueFrom } from 'rxjs';\n\n// Declaración para el objeto bootstrap global\ndeclare var bootstrap: any;\n\n@Component({\n  selector: 'app-registro-materias',\n  templateUrl: './registro-materias.componente.html',\n  styleUrls: ['./registro-materias.componente.css']\n})\nexport class RegistroMateriasComponente implements OnInit {\n  formularioInscripcion!: FormGroup;\n  asignaturasDisponibles: Asignatura[] = [];\n  inscripcionesActuales: Inscripcion[] = [];\n  cargando = false;\n  error = '';\n  exito = '';\n  estudianteId: number = 0;\n  maxAsignaturas = 3;\n  asignaturaSeleccionadaId: number | null = null; // Para el modal de compañeros\n\n  constructor(\n    private formBuilder: FormBuilder,\n    private asignaturaServicio: AsignaturaServicio,\n    private inscripcionServicio: InscripcionServicio,\n    private autenticacionServicio: AutenticacionServicio,\n    private router: Router\n  ) {}\n\n  ngOnInit(): void {\n    this.iniciarFormulario();\n    this.obtenerIdEstudianteActual();\n  }\n\n  iniciarFormulario(): void {\n    this.formularioInscripcion = this.formBuilder.group({\n      asignaturaId: ['', [Validators.required]]\n    });\n  }\n\n  obtenerIdEstudianteActual(): void {\n    this.cargando = true;\n    const usuario = this.autenticacionServicio.obtenerValorUsuarioActual();\n    console.log('Usuario autenticado:', usuario);\n    \n    if (!usuario) {\n      this.error = 'No se pudo obtener la información del usuario. Por favor, inicie sesión nuevamente.';\n      this.cargando = false;\n      return;\n    }\n    \n    console.log('ID de estudiante:', usuario.studentId);\n    \n    if (usuario.role !== 'student') {\n      this.error = 'Esta página es solo para estudiantes.';\n      this.cargando = false;\n      return;\n    }\n    \n    if (!usuario.studentId) {\n      // Si el usuario es estudiante pero no tiene studentId, intentamos obtenerlo del perfil\n      this.autenticacionServicio.obtenerPerfilUsuario(usuario.id).subscribe({\n        next: (perfil) => {\n          console.log('Perfil obtenido:', perfil);\n          if (perfil.studentId) {\n            this.estudianteId = perfil.studentId;\n            this.cargarInscripcionesActuales();\n            this.cargarAsignaturasDisponibles();\n          } else {\n            this.error = 'No se pudo identificar al estudiante. Por favor, contacte al administrador.';\n            this.cargando = false;\n          }\n        },\n        error: (err) => {\n          console.error('Error al obtener perfil:', err);\n          this.error = 'Error al obtener información del estudiante: ' + err.message;\n          this.cargando = false;\n        }\n      });\n    } else {\n      this.estudianteId = usuario.studentId;\n      this.cargarInscripcionesActuales();\n      this.cargarAsignaturasDisponibles();\n    }\n  }\n\n  cargarInscripcionesActuales(): void {\n    this.inscripcionServicio.obtenerInscripcionesEstudiante(this.estudianteId).subscribe({\n      next: (inscripciones) => {\n        this.inscripcionesActuales = inscripciones;\n        this.cargando = false;\n      },\n      error: (err) => {\n        this.error = 'Error al cargar inscripciones actuales';\n        this.cargando = false;\n        console.error(err);\n      }\n    });\n  }\n\n  cargarAsignaturasDisponibles(): void {\n    this.asignaturaServicio.obtenerAsignaturas().subscribe({\n      next: (asignaturas) => {\n        // Filtrar materias ya registradas\n        const idsAsignaturasRegistradas = this.inscripcionesActuales.map(reg => reg.asignaturaId);\n        this.asignaturasDisponibles = asignaturas.filter(asignatura => !idsAsignaturasRegistradas.includes(asignatura.id));\n        this.cargando = false;\n      },\n      error: (err) => {\n        this.error = 'Error al cargar asignaturas disponibles';\n        this.cargando = false;\n        console.error(err);\n      }\n    });\n  }\n\n  onSubmit(): void {\n    if (this.formularioInscripcion.invalid) {\n      return;\n    }\n\n    this.cargando = true;\n    this.error = '';\n    this.exito = '';\n\n    const asignaturaId = this.formularioInscripcion.value.asignaturaId;\n    \n    // Verificar si ya tiene el máximo de materias\n    if (this.inscripcionesActuales.length >= this.maxAsignaturas) {\n      this.error = `No puedes registrar más de ${this.maxAsignaturas} materias`;\n      this.cargando = false;\n      return;\n    }\n\n    // Verificar si ya tiene una materia con el mismo profesor\n    this.verificarConflictoProfesor(asignaturaId).then(tieneConflicto => {\n      if (tieneConflicto) {\n        this.error = 'No puedes tener más de una materia con el mismo profesor';\n        this.cargando = false;\n        return;\n      }\n\n      // Proceder con el registro\n      const asignaturaSeleccionada = this.asignaturasDisponibles.find(a => a.id === asignaturaId);\n      \n      const solicitudInscripcion: SolicitudInscripcion = {\n        estudianteId: this.estudianteId,\n        asignaturaId: asignaturaId,\n        nombreEstudiante: this.autenticacionServicio.obtenerValorUsuarioActual()?.name || '',\n        nombreAsignatura: asignaturaSeleccionada?.nombre || ''\n      };\n\n      this.inscripcionServicio.inscribirAsignatura(solicitudInscripcion).subscribe({\n        next: (inscripcion) => {\n          this.exito = 'Materia registrada correctamente';\n          this.cargando = false;\n          this.formularioInscripcion.reset();\n          // Recargar los datos\n          this.cargarInscripcionesActuales();\n          this.cargarAsignaturasDisponibles();\n        },\n        error: (err) => {\n          this.error = err.message || 'Error al registrar la materia';\n          this.cargando = false;\n          console.error(err);\n        }\n      });\n    }).catch(err => {\n      this.error = 'Error al verificar conflictos de profesor';\n      this.cargando = false;\n      console.error(err);\n    });\n  }\n\n  async verificarConflictoProfesor(nuevaAsignaturaId: number): Promise<boolean> {\n    // Si no hay registros actuales, no hay conflicto\n    if (this.inscripcionesActuales.length === 0) {\n      return false;\n    }\n\n    try {\n      // Obtener la nueva materia\n      const nuevaAsignatura = await firstValueFrom(this.asignaturaServicio.obtenerAsignatura(nuevaAsignaturaId));\n      if (!nuevaAsignatura) return false;\n\n      // Obtener las materias actuales\n      const idsAsignaturasActuales = this.inscripcionesActuales.map(reg => reg.asignaturaId);\n      const asignaturasActuales = await firstValueFrom(this.asignaturaServicio.obtenerAsignaturasPorIds(idsAsignaturasActuales));\n      if (!asignaturasActuales) return false;\n\n      // Verificar si hay conflicto de profesor\n      return asignaturasActuales.some(asignatura => asignatura.profesorId === nuevaAsignatura.profesorId);\n    } catch (error) {\n      console.error('Error al verificar conflicto de profesor:', error);\n      return false;\n    }\n  }\n\n  desinscribirAsignatura(inscripcionId: number | undefined): void {\n    if (!inscripcionId) {\n      this.error = 'ID de inscripción no válido';\n      return;\n    }\n    \n    if (confirm('¿Estás seguro de que deseas eliminar esta materia?')) {\n      this.cargando = true;\n      this.error = '';\n      this.exito = '';\n\n      this.inscripcionServicio.desinscribirAsignatura(inscripcionId).subscribe({\n        next: () => {\n          this.exito = 'Materia eliminada correctamente';\n          this.cargando = false;\n          // Recargar los datos\n          this.cargarInscripcionesActuales();\n          this.cargarAsignaturasDisponibles();\n        },\n        error: (err) => {\n          this.error = 'Error al eliminar la materia';\n          this.cargando = false;\n          console.error(err);\n        }\n      });\n    }\n  }\n\n  // Método para abrir el modal de compañeros\n  abrirModalCompaneros(asignaturaId: number): void {\n    if (!asignaturaId) {\n      this.error = 'Error: No se pudo identificar la materia seleccionada';\n      setTimeout(() => this.error = '', 3000); // Limpiar el mensaje después de 3 segundos\n      return;\n    }\n    \n    this.asignaturaSeleccionadaId = asignaturaId;\n    \n    try {\n      // Asegurarse de que Bootstrap esté disponible\n      if (typeof bootstrap === 'undefined') {\n        console.error('Bootstrap no está disponible');\n        this.error = 'Error al mostrar la ventana modal. Intente nuevamente.';\n        setTimeout(() => this.error = '', 3000);\n        return;\n      }\n      \n      // Usar Bootstrap 5 para abrir el modal\n      const elementoModal: HTMLElement | null = document.getElementById('modalCompaneros');\n      if (elementoModal) {\n        // Asegurarse de que cualquier modal previo se cierre\n        const modalExistente = bootstrap.Modal.getInstance(elementoModal);\n        if (modalExistente) {\n          modalExistente.dispose();\n        }\n        \n        // Crear una nueva instancia del modal con opciones específicas\n        const opcionesModal = {\n          backdrop: 'static',  // El modal no se cierra al hacer clic fuera\n          keyboard: true,     // Se puede cerrar con la tecla ESC\n          focus: true         // Enfoca el modal cuando se abre\n        };\n        \n        const instanciaModal = new bootstrap.Modal(elementoModal, opcionesModal);\n        \n        // Asegurarse de que el modal esté visible\n        elementoModal.style.display = 'block';\n        elementoModal.style.zIndex = '1050';\n        \n        // Mostrar el modal\n        instanciaModal.show();\n        \n        // Verificar que el modal se haya abierto correctamente\n        setTimeout(() => {\n          if (elementoModal.classList.contains('show')) {\n            co","<div class=\"container\">\n  <h2 class=\"mb-4\">Registro de Materias</h2>\n  \n  <div *ngIf=\"cargando\" class=\"text-center p-5\">\n    <div class=\"spinner-border text-primary\" role=\"status\">\n      <span class=\"visually-hidden\">Cargando...</span>\n    </div>\n  </div>\n  \n  <div *ngIf=\"error\" class=\"alert alert-danger\">\n    {{ error }}\n  </div>\n  \n  <div *ngIf=\"mensaje\" class=\"alert alert-success\">\n    {{ mensaje }}\n  </div>\n  \n  <div *ngIf=\"!cargando && !error\">\n    <div class=\"row\">\n      <div class=\"col-md-6\">\n        <app-creditos-estudiante [estudianteId]=\"estudianteId\"></app-creditos-estudiante>\n      </div>\n    </div>\n    \n    <div class=\"row mt-4\">\n      <div class=\"col-md-6\">\n        <div class=\"card\">\n          <div class=\"card-header bg-primary text-white\">\n            <h5 class=\"mb-0\">Mis Materias Inscritas</h5>\n          </div>\n          <div class=\"card-body\">\n            <div *ngIf=\"misAsignaturas.length === 0\" class=\"text-center text-muted\">\n              <p>No tienes materias inscritas actualmente.</p>\n            </div>\n            \n            <div *ngIf=\"misAsignaturas.length > 0\" class=\"list-group\">\n              <div *ngFor=\"let inscripcion of misAsignaturas\" class=\"list-group-item list-group-item-action flex-column align-items-start\">\n                <div class=\"d-flex w-100 justify-content-between\">\n                  <h5 class=\"mb-1\">{{ inscripcion.asignatura?.nombre }}</h5>\n                  <button class=\"btn btn-sm btn-danger\" (click)=\"desinscribirAsignatura(inscripcion.id)\">\n                    <i class=\"bi bi-trash\"></i>\n                  </button>\n                </div>\n                <p class=\"mb-1\" *ngIf=\"inscripcion.asignatura?.codigo\">Cu00f3digo: {{ inscripcion.asignatura?.codigo }}</p>\n                <small>Fecha de inscripciu00f3n: {{ inscripcion.fechaInscripcion | date:'dd/MM/yyyy' }}</small>\n                \n                <div class=\"mt-3\">\n                  <button class=\"btn btn-sm btn-outline-primary\" type=\"button\" data-bs-toggle=\"collapse\" [attr.data-bs-target]=\"'#companeros-' + inscripcion.id\" aria-expanded=\"false\">\n                    Ver compau00f1eros\n                  </button>\n                  <div class=\"collapse mt-2\" [id]=\"'companeros-' + inscripcion.id\">\n                    <app-companeros [asignaturaId]=\"inscripcion.asignaturaId\" [estudianteActualId]=\"estudianteId\"></app-companeros>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n      \n      <div class=\"col-md-6\">\n        <div class=\"card\">\n          <div class=\"card-header bg-success text-white\">\n            <h5 class=\"mb-0\">Inscribir Nueva Materia</h5>\n          </div>\n          <div class=\"card-body\">\n            <div *ngIf=\"asignaturasDisponibles.length === 0\" class=\"text-center text-muted\">\n              <p>No hay materias disponibles para inscribir.</p>\n            </div>\n            \n            <div *ngIf=\"asignaturasDisponibles.length > 0\">\n              <div class=\"form-group mb-3\">\n                <label for=\"asignaturaSelect\" class=\"form-label\">Selecciona una materia:</label>\n                <select class=\"form-select\" id=\"asignaturaSelect\" [(ngModel)]=\"asignaturaSeleccionada\">\n                  <option [ngValue]=\"null\">-- Selecciona una materia --</option>\n                  <option *ngFor=\"let asignatura of asignaturasDisponibles\" [ngValue]=\"asignatura.id\">\n                    {{ asignatura.nombre }} ({{ asignatura.codigo }}) - {{ asignatura.creditos }} cru00e9ditos\n                  </option>\n                </select>\n              </div>\n              \n              <button class=\"btn btn-success\" [disabled]=\"!asignaturaSeleccionada || cargando\" (click)=\"inscribirAsignatura()\">\n                <i class=\"bi bi-plus-circle me-1\"></i> Inscribir Materia\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}