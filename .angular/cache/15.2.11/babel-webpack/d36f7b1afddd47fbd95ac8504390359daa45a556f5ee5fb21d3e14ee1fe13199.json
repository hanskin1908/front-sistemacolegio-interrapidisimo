{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { Validators } from '@angular/forms';\nlet RegistroComponente = class RegistroComponente {\n  constructor(formBuilder, autenticacionServicio, router) {\n    this.formBuilder = formBuilder;\n    this.autenticacionServicio = autenticacionServicio;\n    this.router = router;\n    this.cargando = false;\n    this.error = null;\n  }\n  ngOnInit() {\n    this.formularioRegistro = this.formBuilder.group({\n      nombre: ['', [Validators.required]],\n      correo: ['', [Validators.required, Validators.email]],\n      contrasena: ['', [Validators.required, Validators.minLength(6)]],\n      confirmarContrasena: ['', [Validators.required]],\n      idEstudiante: [''],\n      idProfesor: [''],\n      rol: ['estudiante', [Validators.required]]\n    }, {\n      validators: this.validadorCoincidenciaContrasena\n    });\n    this.formularioRegistro.get('rol')?.valueChanges.subscribe(rol => {\n      if (rol === 'estudiante') {\n        this.formularioRegistro.get('idEstudiante')?.setValidators([Validators.required]);\n        this.formularioRegistro.get('idProfesor')?.clearValidators();\n      } else if (rol === 'profesor') {\n        this.formularioRegistro.get('idProfesor')?.setValidators([Validators.required]);\n        this.formularioRegistro.get('idEstudiante')?.clearValidators();\n      } else {\n        this.formularioRegistro.get('idEstudiante')?.clearValidators();\n        this.formularioRegistro.get('idProfesor')?.clearValidators();\n      }\n      this.formularioRegistro.get('idEstudiante')?.updateValueAndValidity();\n      this.formularioRegistro.get('idProfesor')?.updateValueAndValidity();\n    });\n  }\n  validadorCoincidenciaContrasena(form) {\n    const contrasena = form.get('contrasena')?.value;\n    const confirmarContrasena = form.get('confirmarContrasena')?.value;\n    if (contrasena !== confirmarContrasena) {\n      form.get('confirmarContrasena')?.setErrors({\n        noCoincide: true\n      });\n      return {\n        noCoincide: true\n      };\n    } else {\n      form.get('confirmarContrasena')?.setErrors(null);\n      return null;\n    }\n  }\n  onSubmit() {\n    if (this.formularioRegistro.invalid) {\n      return;\n    }\n    this.cargando = true;\n    this.error = null;\n    const datosRegistro = {\n      nombre: this.formularioRegistro.value.nombre,\n      correo: this.formularioRegistro.value.correo,\n      contrasena: this.formularioRegistro.value.contrasena,\n      rol: this.formularioRegistro.value.rol\n    };\n    if (this.formularioRegistro.value.rol === 'estudiante' && this.formularioRegistro.value.idEstudiante) {\n      datosRegistro.idEstudiante = parseInt(this.formularioRegistro.value.idEstudiante, 10);\n    }\n    if (this.formularioRegistro.value.rol === 'profesor' && this.formularioRegistro.value.idProfesor) {\n      datosRegistro.idProfesor = parseInt(this.formularioRegistro.value.idProfesor, 10);\n    }\n    this.autenticacionServicio.registrar(datosRegistro).subscribe({\n      next: () => {\n        this.cargando = false;\n        this.router.navigate(['/estudiantes']);\n      },\n      error: mensajeError => {\n        this.cargando = false;\n        this.error = mensajeError;\n      }\n    });\n  }\n};\nRegistroComponente = __decorate([Component({\n  selector: 'app-registro',\n  templateUrl: './registro.componente.html',\n  styleUrls: ['./registro.componente.css']\n})], RegistroComponente);\nexport { RegistroComponente };","map":{"version":3,"mappings":"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","names":["Component","Validators","RegistroComponente","constructor","formBuilder","autenticacionServicio","router","ngOnInit","formularioRegistro","group","nombre","required","correo","email","contrasena","minLength","confirmarContrasena","idEstudiante","idProfesor","rol","validators","validadorCoincidenciaContrasena","get","valueChanges","subscribe","setValidators","clearValidators","updateValueAndValidity","form","value","setErrors","noCoincide","onSubmit","invalid","cargando","error","datosRegistro","parseInt","registrar","next","navigate","mensajeError","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["C:\\Users\\hansk\\Videos\\frontendsistemacolegio.interrapidisi\\frontendsistemacolegio.interrapidisi\\src\\app\\componentes\\autenticacion\\registro.componente.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { AutenticacionServicio } from '../../../servicios/autenticacion.servicio';\nimport { SolicitudRegistro } from '../../../models/auth.model';\n\n@Component({\n  selector: 'app-registro',\n  templateUrl: './registro.componente.html',\n  styleUrls: ['./registro.componente.css']\n})\nexport class RegistroComponente implements OnInit {\n  formularioRegistro!: FormGroup;\n  cargando = false;\n  error: string | null = null;\n\n  constructor(\n    private formBuilder: FormBuilder,\n    private autenticacionServicio: AutenticacionServicio,\n    private router: Router\n  ) {}\n\n  ngOnInit(): void {\n    this.formularioRegistro = this.formBuilder.group({\n      nombre: ['', [Validators.required]],\n      correo: ['', [Validators.required, Validators.email]],\n      contrasena: ['', [Validators.required, Validators.minLength(6)]],\n      confirmarContrasena: ['', [Validators.required]],\n      idEstudiante: [''],\n      idProfesor: [''],\n      rol: ['estudiante', [Validators.required]]\n    }, { validators: this.validadorCoincidenciaContrasena });\n\n    this.formularioRegistro.get('rol')?.valueChanges.subscribe(rol => {\n      if (rol === 'estudiante') {\n        this.formularioRegistro.get('idEstudiante')?.setValidators([Validators.required]);\n        this.formularioRegistro.get('idProfesor')?.clearValidators();\n      } else if (rol === 'profesor') {\n        this.formularioRegistro.get('idProfesor')?.setValidators([Validators.required]);\n        this.formularioRegistro.get('idEstudiante')?.clearValidators();\n      } else {\n        this.formularioRegistro.get('idEstudiante')?.clearValidators();\n        this.formularioRegistro.get('idProfesor')?.clearValidators();\n      }\n      this.formularioRegistro.get('idEstudiante')?.updateValueAndValidity();\n      this.formularioRegistro.get('idProfesor')?.updateValueAndValidity();\n    });\n  }\n\n  validadorCoincidenciaContrasena(form: FormGroup) {\n    const contrasena = form.get('contrasena')?.value;\n    const confirmarContrasena = form.get('confirmarContrasena')?.value;\n    if (contrasena !== confirmarContrasena) {\n      form.get('confirmarContrasena')?.setErrors({ noCoincide: true });\n      return { noCoincide: true };\n    } else {\n      form.get('confirmarContrasena')?.setErrors(null);\n      return null;\n    }\n  }\n\n  onSubmit(): void {\n    if (this.formularioRegistro.invalid) {\n      return;\n    }\n    this.cargando = true;\n    this.error = null;\n    const datosRegistro: SolicitudRegistro = {\n      nombre: this.formularioRegistro.value.nombre,\n      correo: this.formularioRegistro.value.correo,\n      contrasena: this.formularioRegistro.value.contrasena,\n      rol: this.formularioRegistro.value.rol\n    };\n    if (this.formularioRegistro.value.rol === 'estudiante' && this.formularioRegistro.value.idEstudiante) {\n      datosRegistro.idEstudiante = parseInt(this.formularioRegistro.value.idEstudiante, 10);\n    }\n    if (this.formularioRegistro.value.rol === 'profesor' && this.formularioRegistro.value.idProfesor) {\n      datosRegistro.idProfesor = parseInt(this.formularioRegistro.value.idProfesor, 10);\n    }\n    this.autenticacionServicio.registrar(datosRegistro).subscribe({\n      next: () => {\n        this.cargando = false;\n        this.router.navigate(['/estudiantes']);\n      },\n      error: (mensajeError) => {\n        this.cargando = false;\n        this.error = mensajeError;\n      }\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}