{"ast":null,"code":"import { throwError } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport { environment } from '../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class ProfesorServicio {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = `${environment.apiUrl}/Profesores`;\n  }\n  obtenerProfesores() {\n    return this.http.get(this.apiUrl).pipe(map(respuesta => {\n      if (respuesta && respuesta.exito && respuesta.data) {\n        return respuesta.data.map(item => ({\n          id: item.id,\n          nombre: item.nombre,\n          apellido: item.apellido || '',\n          correo: item.correo || '',\n          departamento: item.departamento || '',\n          nombreCompleto: `${item.nombre} ${item.apellido || ''}`.trim()\n        }));\n      }\n      return [];\n    }), catchError(this.manejarError));\n  }\n  obtenerProfesor(id) {\n    return this.http.get(`${this.apiUrl}/${id}`).pipe(map(respuesta => {\n      if (respuesta && respuesta.exito && respuesta.data) {\n        const item = respuesta.data;\n        return {\n          id: item.id,\n          nombre: item.nombre,\n          apellido: item.apellido || '',\n          correo: item.correo || '',\n          departamento: item.departamento || '',\n          nombreCompleto: `${item.nombre} ${item.apellido || ''}`.trim()\n        };\n      }\n      throw new Error('Profesor no encontrado');\n    }), catchError(this.manejarError));\n  }\n  crearProfesor(profesor) {\n    // Filtrar solo los campos necesarios para el backend\n    const profesorData = {\n      nombre: profesor.nombre,\n      correo: profesor.correo,\n      departamento: profesor.departamento\n    };\n    return this.http.post(this.apiUrl, profesorData).pipe(catchError(this.manejarError));\n  }\n  actualizarProfesor(id, profesor) {\n    // Filtrar solo los campos necesarios para el backend\n    const profesorData = {\n      nombre: profesor.nombre,\n      correo: profesor.correo,\n      departamento: profesor.departamento\n    };\n    return this.http.put(`${this.apiUrl}/${id}`, profesorData).pipe(catchError(this.manejarError));\n  }\n  eliminarProfesor(id) {\n    return this.http.delete(`${this.apiUrl}/${id}`).pipe(catchError(this.manejarError));\n  }\n  manejarError(error) {\n    let mensajeError = 'u00a1Ocurriu00f3 un error desconocido!';\n    if (error.error instanceof ErrorEvent) {\n      mensajeError = `Error: ${error.error.message}`;\n    } else if (error.error && error.error.message) {\n      mensajeError = error.error.message;\n    } else if (error.status) {\n      mensajeError = `Error ${error.status}: ${error.statusText}`;\n    }\n    return throwError(() => new Error(mensajeError));\n  }\n  static {\n    this.ɵfac = function ProfesorServicio_Factory(t) {\n      return new (t || ProfesorServicio)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: ProfesorServicio,\n      factory: ProfesorServicio.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"mappings":"AAEA,SAAqBA,UAAU,QAAQ,MAAM;AAC7C,SAASC,UAAU,EAAEC,GAAG,QAAQ,gBAAgB;AAEhD,SAASC,WAAW,QAAQ,gCAAgC;;;AAK5D,OAAM,MAAOC,gBAAgB;EAG3BC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IAFhB,WAAM,GAAG,GAAGH,WAAW,CAACI,MAAM,aAAa;EAEX;EAExCC,iBAAiB;IACf,OAAO,IAAI,CAACF,IAAI,CAACG,GAAG,CAAM,IAAI,CAACF,MAAM,CAAC,CACnCG,IAAI,CACHR,GAAG,CAACS,SAAS,IAAG;MACd,IAAIA,SAAS,IAAIA,SAAS,CAACC,KAAK,IAAID,SAAS,CAACE,IAAI,EAAE;QAClD,OAAOF,SAAS,CAACE,IAAI,CAACX,GAAG,CAAEY,IAAS,KAAM;UACxCC,EAAE,EAAED,IAAI,CAACC,EAAE;UACXC,MAAM,EAAEF,IAAI,CAACE,MAAM;UACnBC,QAAQ,EAAEH,IAAI,CAACG,QAAQ,IAAI,EAAE;UAC7BC,MAAM,EAAEJ,IAAI,CAACI,MAAM,IAAI,EAAE;UACzBC,YAAY,EAAEL,IAAI,CAACK,YAAY,IAAI,EAAE;UACrCC,cAAc,EAAE,GAAGN,IAAI,CAACE,MAAM,IAAIF,IAAI,CAACG,QAAQ,IAAI,EAAE,EAAE,CAACI,IAAI;SAC7D,CAAC,CAAC;;MAEL,OAAO,EAAE;IACX,CAAC,CAAC,EACFpB,UAAU,CAAC,IAAI,CAACqB,YAAY,CAAC,CAC9B;EACL;EAEAC,eAAe,CAACR,EAAU;IACxB,OAAO,IAAI,CAACT,IAAI,CAACG,GAAG,CAAM,GAAG,IAAI,CAACF,MAAM,IAAIQ,EAAE,EAAE,CAAC,CAC9CL,IAAI,CACHR,GAAG,CAACS,SAAS,IAAG;MACd,IAAIA,SAAS,IAAIA,SAAS,CAACC,KAAK,IAAID,SAAS,CAACE,IAAI,EAAE;QAClD,MAAMC,IAAI,GAAGH,SAAS,CAACE,IAAI;QAC3B,OAAO;UACLE,EAAE,EAAED,IAAI,CAACC,EAAE;UACXC,MAAM,EAAEF,IAAI,CAACE,MAAM;UACnBC,QAAQ,EAAEH,IAAI,CAACG,QAAQ,IAAI,EAAE;UAC7BC,MAAM,EAAEJ,IAAI,CAACI,MAAM,IAAI,EAAE;UACzBC,YAAY,EAAEL,IAAI,CAACK,YAAY,IAAI,EAAE;UACrCC,cAAc,EAAE,GAAGN,IAAI,CAACE,MAAM,IAAIF,IAAI,CAACG,QAAQ,IAAI,EAAE,EAAE,CAACI,IAAI;SAC7D;;MAEH,MAAM,IAAIG,KAAK,CAAC,wBAAwB,CAAC;IAC3C,CAAC,CAAC,EACFvB,UAAU,CAAC,IAAI,CAACqB,YAAY,CAAC,CAC9B;EACL;EAEAG,aAAa,CAACC,QAAkB;IAC9B;IACA,MAAMC,YAAY,GAAG;MACnBX,MAAM,EAAEU,QAAQ,CAACV,MAAM;MACvBE,MAAM,EAAEQ,QAAQ,CAACR,MAAM;MACvBC,YAAY,EAAEO,QAAQ,CAACP;KACxB;IAED,OAAO,IAAI,CAACb,IAAI,CAACsB,IAAI,CAAM,IAAI,CAACrB,MAAM,EAAEoB,YAAY,CAAC,CAClDjB,IAAI,CACHT,UAAU,CAAC,IAAI,CAACqB,YAAY,CAAC,CAC9B;EACL;EAEAO,kBAAkB,CAACd,EAAU,EAAEW,QAAkB;IAC/C;IACA,MAAMC,YAAY,GAAG;MACnBX,MAAM,EAAEU,QAAQ,CAACV,MAAM;MACvBE,MAAM,EAAEQ,QAAQ,CAACR,MAAM;MACvBC,YAAY,EAAEO,QAAQ,CAACP;KACxB;IAED,OAAO,IAAI,CAACb,IAAI,CAACwB,GAAG,CAAM,GAAG,IAAI,CAACvB,MAAM,IAAIQ,EAAE,EAAE,EAAEY,YAAY,CAAC,CAC5DjB,IAAI,CACHT,UAAU,CAAC,IAAI,CAACqB,YAAY,CAAC,CAC9B;EACL;EAEAS,gBAAgB,CAAChB,EAAU;IACzB,OAAO,IAAI,CAACT,IAAI,CAAC0B,MAAM,CAAM,GAAG,IAAI,CAACzB,MAAM,IAAIQ,EAAE,EAAE,CAAC,CACjDL,IAAI,CACHT,UAAU,CAAC,IAAI,CAACqB,YAAY,CAAC,CAC9B;EACL;EAEQA,YAAY,CAACW,KAAU;IAC7B,IAAIC,YAAY,GAAG,wCAAwC;IAC3D,IAAID,KAAK,CAACA,KAAK,YAAYE,UAAU,EAAE;MACrCD,YAAY,GAAG,UAAUD,KAAK,CAACA,KAAK,CAACG,OAAO,EAAE;KAC/C,MAAM,IAAIH,KAAK,CAACA,KAAK,IAAIA,KAAK,CAACA,KAAK,CAACG,OAAO,EAAE;MAC7CF,YAAY,GAAGD,KAAK,CAACA,KAAK,CAACG,OAAO;KACnC,MAAM,IAAIH,KAAK,CAACI,MAAM,EAAE;MACvBH,YAAY,GAAG,SAASD,KAAK,CAACI,MAAM,KAAKJ,KAAK,CAACK,UAAU,EAAE;;IAE7D,OAAOtC,UAAU,CAAC,MAAM,IAAIwB,KAAK,CAACU,YAAY,CAAC,CAAC;EAClD;;;uBA3FW9B,gBAAgB;IAAA;EAAA;;;aAAhBA,gBAAgB;MAAAmC,SAAhBnC,gBAAgB;MAAAoC,YAFf;IAAM;EAAA","names":["throwError","catchError","map","environment","ProfesorServicio","constructor","http","apiUrl","obtenerProfesores","get","pipe","respuesta","exito","data","item","id","nombre","apellido","correo","departamento","nombreCompleto","trim","manejarError","obtenerProfesor","Error","crearProfesor","profesor","profesorData","post","actualizarProfesor","put","eliminarProfesor","delete","error","mensajeError","ErrorEvent","message","status","statusText","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\hansk\\Videos\\frontendsistemacolegio.interrapidisi\\frontendsistemacolegio.interrapidisi\\src\\app\\servicios\\profesor.servicio.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport { Profesor } from '../modelos/profesor.modelo';\nimport { environment } from '../../environments/environment';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ProfesorServicio {\n  private apiUrl = `${environment.apiUrl}/Profesores`;\n\n  constructor(private http: HttpClient) { }\n\n  obtenerProfesores(): Observable<Profesor[]> {\n    return this.http.get<any>(this.apiUrl)\n      .pipe(\n        map(respuesta => {\n          if (respuesta && respuesta.exito && respuesta.data) {\n            return respuesta.data.map((item: any) => ({\n              id: item.id,\n              nombre: item.nombre,\n              apellido: item.apellido || '',\n              correo: item.correo || '',\n              departamento: item.departamento || '',\n              nombreCompleto: `${item.nombre} ${item.apellido || ''}`.trim()\n            }));\n          }\n          return [];\n        }),\n        catchError(this.manejarError)\n      );\n  }\n\n  obtenerProfesor(id: number): Observable<Profesor> {\n    return this.http.get<any>(`${this.apiUrl}/${id}`)\n      .pipe(\n        map(respuesta => {\n          if (respuesta && respuesta.exito && respuesta.data) {\n            const item = respuesta.data;\n            return {\n              id: item.id,\n              nombre: item.nombre,\n              apellido: item.apellido || '',\n              correo: item.correo || '',\n              departamento: item.departamento || '',\n              nombreCompleto: `${item.nombre} ${item.apellido || ''}`.trim()\n            };\n          }\n          throw new Error('Profesor no encontrado');\n        }),\n        catchError(this.manejarError)\n      );\n  }\n\n  crearProfesor(profesor: Profesor): Observable<any> {\n    // Filtrar solo los campos necesarios para el backend\n    const profesorData = {\n      nombre: profesor.nombre,\n      correo: profesor.correo,\n      departamento: profesor.departamento\n    };\n    \n    return this.http.post<any>(this.apiUrl, profesorData)\n      .pipe(\n        catchError(this.manejarError)\n      );\n  }\n\n  actualizarProfesor(id: number, profesor: Profesor): Observable<any> {\n    // Filtrar solo los campos necesarios para el backend\n    const profesorData = {\n      nombre: profesor.nombre,\n      correo: profesor.correo,\n      departamento: profesor.departamento\n    };\n    \n    return this.http.put<any>(`${this.apiUrl}/${id}`, profesorData)\n      .pipe(\n        catchError(this.manejarError)\n      );\n  }\n\n  eliminarProfesor(id: number): Observable<any> {\n    return this.http.delete<any>(`${this.apiUrl}/${id}`)\n      .pipe(\n        catchError(this.manejarError)\n      );\n  }\n\n  private manejarError(error: any) {\n    let mensajeError = 'u00a1Ocurriu00f3 un error desconocido!';\n    if (error.error instanceof ErrorEvent) {\n      mensajeError = `Error: ${error.error.message}`;\n    } else if (error.error && error.error.message) {\n      mensajeError = error.error.message;\n    } else if (error.status) {\n      mensajeError = `Error ${error.status}: ${error.statusText}`;\n    }\n    return throwError(() => new Error(mensajeError));\n  }\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}