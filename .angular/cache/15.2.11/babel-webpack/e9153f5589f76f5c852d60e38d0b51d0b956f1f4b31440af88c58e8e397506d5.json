{"ast":null,"code":"\"use strict\";\n\n// COMPONENTE ORIGINAL COMENTADO POR MIGRACIÓN\n/*\r\nimport { Component, OnInit } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { Professor } from '../../models/professor.model';\r\nimport { ProfessorService } from '../../services/professor.service';\r\nimport { AuthService } from '../../services/auth.service';\r\n\r\n@Component({\r\n  selector: 'app-professor-list',\r\n  templateUrl: './professor-list.component.html',\r\n  styleUrls: ['./professor-list.component.css']\r\n})\r\nexport class ProfessorListComponent implements OnInit {\r\n  professors: Professor[] = [];\r\n  isLoading = false;\r\n  error: string | null = null;\r\n  isAdmin = false;\r\n\r\n  constructor(\r\n    private professorService: ProfessorService,\r\n    private authService: AuthService,\r\n    private router: Router\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    this.isAdmin = this.authService.isAdmin();\r\n    this.loadProfessors();\r\n  }\r\n\r\n  loadProfessors(): void {\r\n    this.isLoading = true;\r\n    this.error = null;\r\n\r\n    this.professorService.getProfessors().subscribe({\r\n      next: (data) => {\r\n        this.professors = data;\r\n        this.isLoading = false;\r\n      },\r\n      error: (error) => {\r\n        this.error = error.message || 'Error al cargar los profesores';\r\n        this.isLoading = false;\r\n      }\r\n    });\r\n  }\r\n\r\n  onAddProfessor(): void {\r\n    this.router.navigate(['/professors/new']);\r\n  }\r\n\r\n  onEditProfessor(id: number): void {\r\n    this.router.navigate(['/professors/edit', id]);\r\n  }\r\n\r\n  onDeleteProfessor(id: number): void {\r\n    if (confirm('¿Está seguro de que desea eliminar este profesor?')) {\r\n      this.isLoading = true;\r\n      this.error = null;\r\n\r\n      this.professorService.deleteProfessor(id).subscribe({\r\n        next: () => {\r\n          this.loadProfessors();\r\n        },\r\n        error: (error) => {\r\n          this.error = error.message || 'Error al eliminar el profesor';\r\n          this.isLoading = false;\r\n        }\r\n      });\r\n    }\r\n  }\r\n}\r\n*/","map":{"version":3,"mappings":";;AAAA;AACA","names":[],"sourceRoot":"","sources":["C:\\Users\\hansk\\Videos\\frontendsistemacolegio.interrapidisi\\frontendsistemacolegio.interrapidisi\\src\\app\\components\\professor-list\\professor-list.component.ts"],"sourcesContent":["// COMPONENTE ORIGINAL COMENTADO POR MIGRACIÓN\n/*\nimport { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { Professor } from '../../models/professor.model';\nimport { ProfessorService } from '../../services/professor.service';\nimport { AuthService } from '../../services/auth.service';\n\n@Component({\n  selector: 'app-professor-list',\n  templateUrl: './professor-list.component.html',\n  styleUrls: ['./professor-list.component.css']\n})\nexport class ProfessorListComponent implements OnInit {\n  professors: Professor[] = [];\n  isLoading = false;\n  error: string | null = null;\n  isAdmin = false;\n\n  constructor(\n    private professorService: ProfessorService,\n    private authService: AuthService,\n    private router: Router\n  ) {}\n\n  ngOnInit(): void {\n    this.isAdmin = this.authService.isAdmin();\n    this.loadProfessors();\n  }\n\n  loadProfessors(): void {\n    this.isLoading = true;\n    this.error = null;\n\n    this.professorService.getProfessors().subscribe({\n      next: (data) => {\n        this.professors = data;\n        this.isLoading = false;\n      },\n      error: (error) => {\n        this.error = error.message || 'Error al cargar los profesores';\n        this.isLoading = false;\n      }\n    });\n  }\n\n  onAddProfessor(): void {\n    this.router.navigate(['/professors/new']);\n  }\n\n  onEditProfessor(id: number): void {\n    this.router.navigate(['/professors/edit', id]);\n  }\n\n  onDeleteProfessor(id: number): void {\n    if (confirm('¿Está seguro de que desea eliminar este profesor?')) {\n      this.isLoading = true;\n      this.error = null;\n\n      this.professorService.deleteProfessor(id).subscribe({\n        next: () => {\n          this.loadProfessors();\n        },\n        error: (error) => {\n          this.error = error.message || 'Error al eliminar el profesor';\n          this.isLoading = false;\n        }\n      });\n    }\n  }\n}\n*/"]},"metadata":{},"sourceType":"script","externalDependencies":[]}