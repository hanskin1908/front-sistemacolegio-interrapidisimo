{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/hansk/Videos/Prueba interrapidisimp/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { Validators } from '@angular/forms';\nimport { firstValueFrom } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"../../services/subject.service\";\nimport * as i3 from \"../../services/registration.service\";\nimport * as i4 from \"../../services/auth.service\";\nimport * as i5 from \"@angular/router\";\nimport * as i6 from \"../../services/modal.service\";\nimport * as i7 from \"@angular/common\";\nimport * as i8 from \"../classmates/classmates.component\";\nimport * as i9 from \"../student-credits/student-credits.component\";\nfunction SubjectRegistrationComponent_div_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 1)(1, \"div\", 33)(2, \"div\", 34)(3, \"span\", 35);\n    i0.ɵɵtext(4, \"Cargando...\");\n    i0.ɵɵelementEnd()()()();\n  }\n}\nfunction SubjectRegistrationComponent_div_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 1)(1, \"div\", 2)(2, \"div\", 36);\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r1.error, \" \");\n  }\n}\nfunction SubjectRegistrationComponent_div_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 1)(1, \"div\", 2)(2, \"div\", 37);\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r2.success, \" \");\n  }\n}\nfunction SubjectRegistrationComponent_div_17_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 38)(1, \"p\");\n    i0.ɵɵtext(2, \"No tienes materias registradas.\");\n    i0.ɵɵelementEnd()();\n  }\n}\nfunction SubjectRegistrationComponent_div_18_tr_13_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r12 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"tr\")(1, \"td\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"td\");\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"td\");\n    i0.ɵɵtext(6);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(7, \"td\")(8, \"button\", 42);\n    i0.ɵɵlistener(\"click\", function SubjectRegistrationComponent_div_18_tr_13_Template_button_click_8_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r12);\n      const reg_r10 = restoredCtx.$implicit;\n      const ctx_r11 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r11.openClassmatesModal(reg_r10.subjectId));\n    });\n    i0.ɵɵelement(9, \"i\", 43);\n    i0.ɵɵtext(10, \" Ver Compa\\u00F1eros \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(11, \"button\", 44);\n    i0.ɵɵlistener(\"click\", function SubjectRegistrationComponent_div_18_tr_13_Template_button_click_11_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r12);\n      const reg_r10 = restoredCtx.$implicit;\n      const ctx_r13 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r13.unregisterSubject(reg_r10.id));\n    });\n    i0.ɵɵelement(12, \"i\", 45);\n    i0.ɵɵtext(13, \" Eliminar \");\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const reg_r10 = ctx.$implicit;\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(reg_r10.subject == null ? null : reg_r10.subject.name);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(reg_r10.subject == null ? null : reg_r10.subject.professor == null ? null : reg_r10.subject.professor.name);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(reg_r10.subject == null ? null : reg_r10.subject.credits);\n    i0.ɵɵadvance(2);\n    i0.ɵɵpropertyInterpolate1(\"id\", \"btnVerCompaneros-\", reg_r10.subjectId, \"\");\n  }\n}\nfunction SubjectRegistrationComponent_div_18_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 39)(1, \"table\", 40)(2, \"thead\")(3, \"tr\")(4, \"th\");\n    i0.ɵɵtext(5, \"Materia\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(6, \"th\");\n    i0.ɵɵtext(7, \"Profesor\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(8, \"th\");\n    i0.ɵɵtext(9, \"Cr\\u00E9ditos\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(10, \"th\");\n    i0.ɵɵtext(11, \"Acciones\");\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementStart(12, \"tbody\");\n    i0.ɵɵtemplate(13, SubjectRegistrationComponent_div_18_tr_13_Template, 14, 4, \"tr\", 41);\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const ctx_r4 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(13);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r4.currentRegistrations);\n  }\n}\nfunction SubjectRegistrationComponent_option_33_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"option\", 46);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const subject_r14 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", subject_r14.id);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate3(\" \", subject_r14.name, \" - Prof. \", subject_r14.professor == null ? null : subject_r14.professor.name, \" (\", subject_r14.credits, \" cr\\u00E9ditos) \");\n  }\n}\nfunction SubjectRegistrationComponent_div_34_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 47);\n    i0.ɵɵtext(1, \" Debes seleccionar una materia. \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction SubjectRegistrationComponent_div_39_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 48);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r7 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" Has alcanzado el l\\u00EDmite m\\u00E1ximo de \", ctx_r7.maxSubjects, \" materias. \");\n  }\n}\nfunction SubjectRegistrationComponent_app_classmates_48_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"app-classmates\", 49);\n  }\n  if (rf & 2) {\n    const ctx_r8 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"subjectId\", ctx_r8.selectedSubjectId)(\"currentStudentId\", ctx_r8.studentId);\n  }\n}\nexport class SubjectRegistrationComponent {\n  constructor(formBuilder, subjectService, registrationService, authService, router, modalService) {\n    this.formBuilder = formBuilder;\n    this.subjectService = subjectService;\n    this.registrationService = registrationService;\n    this.authService = authService;\n    this.router = router;\n    this.modalService = modalService;\n    this.availableSubjects = [];\n    this.currentRegistrations = [];\n    this.loading = false;\n    this.error = '';\n    this.success = '';\n    this.studentId = 0;\n    this.maxSubjects = 3;\n    this.selectedSubjectId = null; // Para el modal de compañeros\n  }\n\n  ngOnInit() {\n    this.initForm();\n    this.getCurrentStudentId();\n  }\n  initForm() {\n    this.registrationForm = this.formBuilder.group({\n      subjectId: ['', [Validators.required]]\n    });\n  }\n  getCurrentStudentId() {\n    this.loading = true;\n    this.authService.getCurrentUser().subscribe({\n      next: user => {\n        if (user && user.id) {\n          this.studentId = user.id;\n          this.loadCurrentRegistrations();\n          this.loadAvailableSubjects();\n        } else {\n          this.error = 'No se pudo obtener la información del estudiante';\n          this.loading = false;\n        }\n      },\n      error: err => {\n        this.error = 'Error al obtener información del usuario';\n        this.loading = false;\n        console.error(err);\n      }\n    });\n  }\n  loadCurrentRegistrations() {\n    this.registrationService.getStudentRegistrations(this.studentId).subscribe({\n      next: registrations => {\n        this.currentRegistrations = registrations;\n        this.loading = false;\n      },\n      error: err => {\n        this.error = 'Error al cargar registros actuales';\n        this.loading = false;\n        console.error(err);\n      }\n    });\n  }\n  loadAvailableSubjects() {\n    this.subjectService.getSubjects().subscribe({\n      next: subjects => {\n        // Filtrar materias ya registradas\n        const registeredSubjectIds = this.currentRegistrations.map(reg => reg.subjectId);\n        this.availableSubjects = subjects.filter(subject => !registeredSubjectIds.includes(subject.id));\n        this.loading = false;\n      },\n      error: err => {\n        this.error = 'Error al cargar materias disponibles';\n        this.loading = false;\n        console.error(err);\n      }\n    });\n  }\n  onSubmit() {\n    if (this.registrationForm.invalid) {\n      return;\n    }\n    this.loading = true;\n    this.error = '';\n    this.success = '';\n    const subjectId = this.registrationForm.value.subjectId;\n    // Verificar si ya tiene el máximo de materias\n    if (this.currentRegistrations.length >= this.maxSubjects) {\n      this.error = `No puedes registrar más de ${this.maxSubjects} materias`;\n      this.loading = false;\n      return;\n    }\n    // Verificar si ya tiene una materia con el mismo profesor\n    this.checkProfessorConflict(subjectId).then(hasConflict => {\n      if (hasConflict) {\n        this.error = 'No puedes tener más de una materia con el mismo profesor';\n        this.loading = false;\n        return;\n      }\n      // Proceder con el registro\n      const selectedSubject = this.availableSubjects.find(s => s.id === subjectId);\n      const registrationRequest = {\n        studentId: this.studentId,\n        subjectId: subjectId,\n        studentName: this.authService.getCurrentUserValue()?.name || '',\n        subjectName: selectedSubject?.name || ''\n      };\n      this.registrationService.registerSubject(registrationRequest).subscribe({\n        next: registration => {\n          this.success = 'Materia registrada correctamente';\n          this.loading = false;\n          this.registrationForm.reset();\n          // Recargar los datos\n          this.loadCurrentRegistrations();\n          this.loadAvailableSubjects();\n        },\n        error: err => {\n          this.error = err.message || 'Error al registrar la materia';\n          this.loading = false;\n          console.error(err);\n        }\n      });\n    }).catch(err => {\n      this.error = 'Error al verificar conflictos de profesor';\n      this.loading = false;\n      console.error(err);\n    });\n  }\n  checkProfessorConflict(newSubjectId) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      // Si no hay registros actuales, no hay conflicto\n      if (_this.currentRegistrations.length === 0) {\n        return false;\n      }\n      try {\n        // Obtener la nueva materia\n        const newSubject = yield firstValueFrom(_this.subjectService.getSubject(newSubjectId));\n        if (!newSubject) return false;\n        // Obtener las materias actuales\n        const currentSubjectIds = _this.currentRegistrations.map(reg => reg.subjectId);\n        const currentSubjects = yield firstValueFrom(_this.subjectService.getSubjectsByIds(currentSubjectIds));\n        if (!currentSubjects) return false;\n        // Verificar si hay conflicto de profesor\n        return currentSubjects.some(subject => subject.professorId === newSubject.professorId);\n      } catch (error) {\n        console.error('Error checking professor conflict:', error);\n        return false;\n      }\n    })();\n  }\n  unregisterSubject(registrationId) {\n    if (!registrationId) {\n      this.error = 'ID de registro no válido';\n      return;\n    }\n    if (confirm('¿Estás seguro de que deseas eliminar esta materia?')) {\n      this.loading = true;\n      this.error = '';\n      this.success = '';\n      this.registrationService.unregisterSubject(registrationId).subscribe({\n        next: () => {\n          this.success = 'Materia eliminada correctamente';\n          this.loading = false;\n          // Recargar los datos\n          this.loadCurrentRegistrations();\n          this.loadAvailableSubjects();\n        },\n        error: err => {\n          this.error = 'Error al eliminar la materia';\n          this.loading = false;\n          console.error(err);\n        }\n      });\n    }\n  }\n  // Método para abrir el modal de compañeros\n  openClassmatesModal(subjectId) {\n    if (!subjectId) {\n      this.error = 'Error: No se pudo identificar la materia seleccionada';\n      setTimeout(() => this.error = '', 3000); // Limpiar el mensaje después de 3 segundos\n      return;\n    }\n    this.selectedSubjectId = subjectId;\n    try {\n      // Usar Bootstrap 5 para abrir el modal\n      const modalElement = document.getElementById('classmatesModal');\n      if (modalElement) {\n        // Crear una nueva instancia del modal\n        const modalInstance = new bootstrap.Modal(modalElement);\n        // Mostrar el modal\n        modalInstance.show();\n        // Verificar que el modal se haya abierto correctamente\n        setTimeout(() => {\n          if (modalElement.classList.contains('show')) {\n            console.log('Modal mostrado correctamente');\n          } else {\n            console.error('El modal no se mostró correctamente');\n            this.error = 'Error al mostrar la lista de compañeros. Intente nuevamente.';\n            setTimeout(() => this.error = '', 3000);\n          }\n        }, 500);\n      } else {\n        console.error('No se encontró el elemento del modal con ID: classmatesModal');\n        this.error = 'Error al mostrar la lista de compañeros. Intente nuevamente.';\n        setTimeout(() => this.error = '', 3000);\n      }\n    } catch (e) {\n      console.error('Error al abrir el modal:', e);\n      this.error = 'Error al mostrar la lista de compañeros. Intente nuevamente.';\n      setTimeout(() => this.error = '', 3000);\n    }\n  }\n  static {\n    this.ɵfac = function SubjectRegistrationComponent_Factory(t) {\n      return new (t || SubjectRegistrationComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.SubjectService), i0.ɵɵdirectiveInject(i3.RegistrationService), i0.ɵɵdirectiveInject(i4.AuthService), i0.ɵɵdirectiveInject(i5.Router), i0.ɵɵdirectiveInject(i6.ModalService));\n    };\n  }\n  static {\n    this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: SubjectRegistrationComponent,\n      selectors: [[\"app-subject-registration\"]],\n      decls: 52,\n      vars: 14,\n      consts: [[1, \"container\", \"mt-4\"], [1, \"row\"], [1, \"col-md-12\"], [\"class\", \"row\", 4, \"ngIf\"], [1, \"row\", \"mb-4\"], [1, \"card\"], [1, \"card-header\", \"bg-primary\", \"text-white\"], [1, \"card-body\"], [3, \"studentId\"], [\"class\", \"text-center mt-3\", 4, \"ngIf\"], [\"class\", \"table-responsive\", 4, \"ngIf\"], [1, \"card-header\", \"bg-success\", \"text-white\"], [3, \"formGroup\", \"ngSubmit\"], [1, \"mb-3\"], [\"for\", \"subjectId\", 1, \"form-label\"], [\"id\", \"subjectId\", \"formControlName\", \"subjectId\", 1, \"form-select\"], [\"value\", \"\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [\"class\", \"invalid-feedback\", 4, \"ngIf\"], [1, \"d-grid\", \"gap-2\"], [\"type\", \"submit\", 1, \"btn\", \"btn-success\", 3, \"disabled\"], [1, \"bi\", \"bi-plus-circle\"], [\"class\", \"alert alert-warning mt-3\", 4, \"ngIf\"], [\"id\", \"classmatesModal\", \"tabindex\", \"-1\", \"aria-labelledby\", \"classmatesModalLabel\", \"aria-hidden\", \"true\", 1, \"modal\", \"fade\"], [1, \"modal-dialog\", \"modal-dialog-centered\"], [1, \"modal-content\"], [1, \"modal-header\"], [\"id\", \"classmatesModalLabel\", 1, \"modal-title\"], [\"type\", \"button\", \"data-bs-dismiss\", \"modal\", \"aria-label\", \"Close\", 1, \"btn-close\"], [1, \"modal-body\"], [3, \"subjectId\", \"currentStudentId\", 4, \"ngIf\"], [1, \"modal-footer\"], [\"type\", \"button\", \"data-bs-dismiss\", \"modal\", 1, \"btn\", \"btn-secondary\"], [1, \"col-md-12\", \"text-center\"], [\"role\", \"status\", 1, \"spinner-border\", \"text-primary\"], [1, \"visually-hidden\"], [1, \"alert\", \"alert-danger\"], [1, \"alert\", \"alert-success\"], [1, \"text-center\", \"mt-3\"], [1, \"table-responsive\"], [1, \"table\", \"table-striped\"], [4, \"ngFor\", \"ngForOf\"], [\"data-testid\", \"ver-companeros-btn\", 1, \"btn\", \"btn-sm\", \"btn-info\", \"me-2\", 3, \"id\", \"click\"], [1, \"bi\", \"bi-people\"], [1, \"btn\", \"btn-sm\", \"btn-danger\", 3, \"click\"], [1, \"bi\", \"bi-trash\"], [3, \"value\"], [1, \"invalid-feedback\"], [1, \"alert\", \"alert-warning\", \"mt-3\"], [3, \"subjectId\", \"currentStudentId\"]],\n      template: function SubjectRegistrationComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"div\", 2)(3, \"h2\");\n          i0.ɵɵtext(4, \"Registro de Materias\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(5, \"hr\");\n          i0.ɵɵelementEnd()();\n          i0.ɵɵtemplate(6, SubjectRegistrationComponent_div_6_Template, 5, 0, \"div\", 3);\n          i0.ɵɵtemplate(7, SubjectRegistrationComponent_div_7_Template, 4, 1, \"div\", 3);\n          i0.ɵɵtemplate(8, SubjectRegistrationComponent_div_8_Template, 4, 1, \"div\", 3);\n          i0.ɵɵelementStart(9, \"div\", 4)(10, \"div\", 2)(11, \"div\", 5)(12, \"div\", 6)(13, \"h4\");\n          i0.ɵɵtext(14, \"Mis Materias Registradas\");\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(15, \"div\", 7);\n          i0.ɵɵelement(16, \"app-student-credits\", 8);\n          i0.ɵɵtemplate(17, SubjectRegistrationComponent_div_17_Template, 3, 0, \"div\", 9);\n          i0.ɵɵtemplate(18, SubjectRegistrationComponent_div_18_Template, 14, 1, \"div\", 10);\n          i0.ɵɵelementEnd()()()();\n          i0.ɵɵelementStart(19, \"div\", 1)(20, \"div\", 2)(21, \"div\", 5)(22, \"div\", 11)(23, \"h4\");\n          i0.ɵɵtext(24, \"Registrar Nueva Materia\");\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(25, \"div\", 7)(26, \"form\", 12);\n          i0.ɵɵlistener(\"ngSubmit\", function SubjectRegistrationComponent_Template_form_ngSubmit_26_listener() {\n            return ctx.onSubmit();\n          });\n          i0.ɵɵelementStart(27, \"div\", 13)(28, \"label\", 14);\n          i0.ɵɵtext(29, \"Selecciona una Materia\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(30, \"select\", 15)(31, \"option\", 16);\n          i0.ɵɵtext(32, \"-- Selecciona una materia --\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵtemplate(33, SubjectRegistrationComponent_option_33_Template, 2, 4, \"option\", 17);\n          i0.ɵɵelementEnd();\n          i0.ɵɵtemplate(34, SubjectRegistrationComponent_div_34_Template, 2, 0, \"div\", 18);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(35, \"div\", 19)(36, \"button\", 20);\n          i0.ɵɵelement(37, \"i\", 21);\n          i0.ɵɵtext(38, \" Registrar Materia \");\n          i0.ɵɵelementEnd()();\n          i0.ɵɵtemplate(39, SubjectRegistrationComponent_div_39_Template, 2, 1, \"div\", 22);\n          i0.ɵɵelementEnd()()()()()();\n          i0.ɵɵelementStart(40, \"div\", 23)(41, \"div\", 24)(42, \"div\", 25)(43, \"div\", 26)(44, \"h5\", 27);\n          i0.ɵɵtext(45, \"Compa\\u00F1eros de Clase\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(46, \"button\", 28);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(47, \"div\", 29);\n          i0.ɵɵtemplate(48, SubjectRegistrationComponent_app_classmates_48_Template, 1, 2, \"app-classmates\", 30);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(49, \"div\", 31)(50, \"button\", 32);\n          i0.ɵɵtext(51, \"Cerrar\");\n          i0.ɵɵelementEnd()()()()();\n        }\n        if (rf & 2) {\n          let tmp_7_0;\n          let tmp_9_0;\n          i0.ɵɵadvance(6);\n          i0.ɵɵproperty(\"ngIf\", ctx.loading);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", ctx.error);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", ctx.success);\n          i0.ɵɵadvance(8);\n          i0.ɵɵproperty(\"studentId\", ctx.studentId);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", ctx.currentRegistrations.length === 0);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", ctx.currentRegistrations.length > 0);\n          i0.ɵɵadvance(8);\n          i0.ɵɵproperty(\"formGroup\", ctx.registrationForm);\n          i0.ɵɵadvance(4);\n          i0.ɵɵclassProp(\"is-invalid\", ((tmp_7_0 = ctx.registrationForm.get(\"subjectId\")) == null ? null : tmp_7_0.invalid) && ((tmp_7_0 = ctx.registrationForm.get(\"subjectId\")) == null ? null : tmp_7_0.touched));\n          i0.ɵɵadvance(3);\n          i0.ɵɵproperty(\"ngForOf\", ctx.availableSubjects);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", ((tmp_9_0 = ctx.registrationForm.get(\"subjectId\")) == null ? null : tmp_9_0.invalid) && ((tmp_9_0 = ctx.registrationForm.get(\"subjectId\")) == null ? null : tmp_9_0.touched));\n          i0.ɵɵadvance(2);\n          i0.ɵɵproperty(\"disabled\", ctx.registrationForm.invalid || ctx.loading || ctx.currentRegistrations.length >= ctx.maxSubjects);\n          i0.ɵɵadvance(3);\n          i0.ɵɵproperty(\"ngIf\", ctx.currentRegistrations.length >= ctx.maxSubjects);\n          i0.ɵɵadvance(9);\n          i0.ɵɵproperty(\"ngIf\", ctx.selectedSubjectId);\n        }\n      },\n      dependencies: [i7.NgForOf, i7.NgIf, i1.ɵNgNoValidate, i1.NgSelectOption, i1.ɵNgSelectMultipleOption, i1.SelectControlValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.FormGroupDirective, i1.FormControlName, i8.ClassmatesComponent, i9.StudentCreditsComponent],\n      styles: [\".card[_ngcontent-%COMP%] {\\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\\n  margin-bottom: 20px;\\n}\\n\\n.card-header[_ngcontent-%COMP%] {\\n  font-weight: bold;\\n}\\n\\n.table[_ngcontent-%COMP%] {\\n  margin-bottom: 0;\\n}\\n\\n.btn-success[_ngcontent-%COMP%] {\\n  transition: all 0.3s;\\n}\\n\\n.btn-success[_ngcontent-%COMP%]:hover {\\n  transform: translateY(-2px);\\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);\\n}\\n\\n.alert[_ngcontent-%COMP%] {\\n  margin-top: 15px;\\n}\\n\\n\\n@media (max-width: 768px) {\\n  .card-body[_ngcontent-%COMP%] {\\n    padding: 1rem;\\n  }\\n  \\n  .table[_ngcontent-%COMP%] {\\n    font-size: 0.9rem;\\n  }\\n  \\n  .btn-sm[_ngcontent-%COMP%] {\\n    padding: 0.25rem 0.5rem;\\n    font-size: 0.75rem;\\n  }\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvY29tcG9uZW50cy9zdWJqZWN0LXJlZ2lzdHJhdGlvbi9zdWJqZWN0LXJlZ2lzdHJhdGlvbi5jb21wb25lbnQuY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQ0Usd0NBQXdDO0VBQ3hDLG1CQUFtQjtBQUNyQjs7QUFFQTtFQUNFLGlCQUFpQjtBQUNuQjs7QUFFQTtFQUNFLGdCQUFnQjtBQUNsQjs7QUFFQTtFQUNFLG9CQUFvQjtBQUN0Qjs7QUFFQTtFQUNFLDJCQUEyQjtFQUMzQix3Q0FBd0M7QUFDMUM7O0FBRUE7RUFDRSxnQkFBZ0I7QUFDbEI7O0FBRUEsc0NBQXNDO0FBQ3RDO0VBQ0U7SUFDRSxhQUFhO0VBQ2Y7O0VBRUE7SUFDRSxpQkFBaUI7RUFDbkI7O0VBRUE7SUFDRSx1QkFBdUI7SUFDdkIsa0JBQWtCO0VBQ3BCO0FBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyIuY2FyZCB7XG4gIGJveC1zaGFkb3c6IDAgNHB4IDhweCByZ2JhKDAsIDAsIDAsIDAuMSk7XG4gIG1hcmdpbi1ib3R0b206IDIwcHg7XG59XG5cbi5jYXJkLWhlYWRlciB7XG4gIGZvbnQtd2VpZ2h0OiBib2xkO1xufVxuXG4udGFibGUge1xuICBtYXJnaW4tYm90dG9tOiAwO1xufVxuXG4uYnRuLXN1Y2Nlc3Mge1xuICB0cmFuc2l0aW9uOiBhbGwgMC4zcztcbn1cblxuLmJ0bi1zdWNjZXNzOmhvdmVyIHtcbiAgdHJhbnNmb3JtOiB0cmFuc2xhdGVZKC0ycHgpO1xuICBib3gtc2hhZG93OiAwIDRweCA4cHggcmdiYSgwLCAwLCAwLCAwLjIpO1xufVxuXG4uYWxlcnQge1xuICBtYXJnaW4tdG9wOiAxNXB4O1xufVxuXG4vKiBFc3RpbG9zIHBhcmEgZGlzcG9zaXRpdm9zIG3Dg8KzdmlsZXMgKi9cbkBtZWRpYSAobWF4LXdpZHRoOiA3NjhweCkge1xuICAuY2FyZC1ib2R5IHtcbiAgICBwYWRkaW5nOiAxcmVtO1xuICB9XG4gIFxuICAudGFibGUge1xuICAgIGZvbnQtc2l6ZTogMC45cmVtO1xuICB9XG4gIFxuICAuYnRuLXNtIHtcbiAgICBwYWRkaW5nOiAwLjI1cmVtIDAuNXJlbTtcbiAgICBmb250LXNpemU6IDAuNzVyZW07XG4gIH1cbn0iXSwic291cmNlUm9vdCI6IiJ9 */\"]\n    });\n  }\n}","map":{"version":3,"mappings":";AACA,SAAiCA,UAAU,QAAQ,gBAAgB;AAOnE,SAASC,cAAc,QAAQ,MAAM;;;;;;;;;;;;;ICAnCC,8BAAiC;IAGGA,2BAAW;IAAAA,iBAAO;;;;;IAKtDA,8BAA+B;IAGzBA,YACF;IAAAA,iBAAM;;;;IADJA,eACF;IADEA,6CACF;;;;;IAIJA,8BAAiC;IAG3BA,YACF;IAAAA,iBAAM;;;;IADJA,eACF;IADEA,+CACF;;;;;IAcIA,+BAAwE;IACnEA,+CAA+B;IAAAA,iBAAI;;;;;;IAclCA,0BAA6C;IACvCA,YAAuB;IAAAA,iBAAK;IAChCA,0BAAI;IAAAA,YAAkC;IAAAA,iBAAK;IAC3CA,0BAAI;IAAAA,YAA0B;IAAAA,iBAAK;IACnCA,0BAAI;IACuCA;MAAA;MAAA;MAAA;MAAA,OAASA,6DAAkC;IAAA,EAAC;IACnFA,wBAA4B;IAACA,sCAC/B;IAAAA,iBAAS;IACTA,mCAA0E;IAApCA;MAAA;MAAA;MAAA;MAAA,OAASA,oDAAyB;IAAA,EAAC;IACvEA,yBAA2B;IAACA,2BAC9B;IAAAA,iBAAS;;;;IATPA,eAAuB;IAAvBA,2EAAuB;IACvBA,eAAkC;IAAlCA,gIAAkC;IAClCA,eAA0B;IAA1BA,8EAA0B;IAE0DA,eAAuC;IAAvCA,2EAAuC;;;;;IAhBvIA,+BAAsE;IAI1DA,uBAAO;IAAAA,iBAAK;IAChBA,0BAAI;IAAAA,wBAAQ;IAAAA,iBAAK;IACjBA,0BAAI;IAAAA,6BAAQ;IAAAA,iBAAK;IACjBA,2BAAI;IAAAA,yBAAQ;IAAAA,iBAAK;IAGrBA,8BAAO;IACLA,sFAYK;IACPA,iBAAQ;;;;IAbcA,gBAAuB;IAAvBA,qDAAuB;;;;;IAmC3CA,kCAAuE;IACrEA,YACF;IAAAA,iBAAS;;;;IAFyCA,sCAAoB;IACpEA,eACF;IADEA,2KACF;;;;;IAEFA,+BAA+H;IAC7HA,gDACF;IAAAA,iBAAM;;;;;IASRA,+BAAyF;IACvFA,YACF;IAAAA,iBAAM;;;;IADJA,eACF;IADEA,yGACF;;;;;IAiBJA,qCAA0H;;;;IAAhFA,oDAA+B;;;AD3GjF,OAAM,MAAOC,4BAA4B;EAWvCC,YACUC,WAAwB,EACxBC,cAA8B,EAC9BC,mBAAwC,EACxCC,WAAwB,EACxBC,MAAc,EACdC,YAA0B;IAL1B,gBAAW,GAAXL,WAAW;IACX,mBAAc,GAAdC,cAAc;IACd,wBAAmB,GAAnBC,mBAAmB;IACnB,gBAAW,GAAXC,WAAW;IACX,WAAM,GAANC,MAAM;IACN,iBAAY,GAAZC,YAAY;IAftB,sBAAiB,GAAc,EAAE;IACjC,yBAAoB,GAAmB,EAAE;IACzC,YAAO,GAAG,KAAK;IACf,UAAK,GAAG,EAAE;IACV,YAAO,GAAG,EAAE;IACZ,cAAS,GAAW,CAAC;IACrB,gBAAW,GAAG,CAAC;IACf,sBAAiB,GAAkB,IAAI,CAAC,CAAC;EAStC;;EAEHC,QAAQ;IACN,IAAI,CAACC,QAAQ,EAAE;IACf,IAAI,CAACC,mBAAmB,EAAE;EAC5B;EAEAD,QAAQ;IACN,IAAI,CAACE,gBAAgB,GAAG,IAAI,CAACT,WAAW,CAACU,KAAK,CAAC;MAC7CC,SAAS,EAAE,CAAC,EAAE,EAAE,CAAChB,UAAU,CAACiB,QAAQ,CAAC;KACtC,CAAC;EACJ;EAEAJ,mBAAmB;IACjB,IAAI,CAACK,OAAO,GAAG,IAAI;IACnB,IAAI,CAACV,WAAW,CAACW,cAAc,EAAE,CAACC,SAAS,CAAC;MAC1CC,IAAI,EAAGC,IAAI,IAAI;QACb,IAAIA,IAAI,IAAIA,IAAI,CAACC,EAAE,EAAE;UACnB,IAAI,CAACC,SAAS,GAAGF,IAAI,CAACC,EAAE;UACxB,IAAI,CAACE,wBAAwB,EAAE;UAC/B,IAAI,CAACC,qBAAqB,EAAE;SAC7B,MAAM;UACL,IAAI,CAACC,KAAK,GAAG,kDAAkD;UAC/D,IAAI,CAACT,OAAO,GAAG,KAAK;;MAExB,CAAC;MACDS,KAAK,EAAGC,GAAG,IAAI;QACb,IAAI,CAACD,KAAK,GAAG,0CAA0C;QACvD,IAAI,CAACT,OAAO,GAAG,KAAK;QACpBW,OAAO,CAACF,KAAK,CAACC,GAAG,CAAC;MACpB;KACD,CAAC;EACJ;EAEAH,wBAAwB;IACtB,IAAI,CAAClB,mBAAmB,CAACuB,uBAAuB,CAAC,IAAI,CAACN,SAAS,CAAC,CAACJ,SAAS,CAAC;MACzEC,IAAI,EAAGU,aAAa,IAAI;QACtB,IAAI,CAACC,oBAAoB,GAAGD,aAAa;QACzC,IAAI,CAACb,OAAO,GAAG,KAAK;MACtB,CAAC;MACDS,KAAK,EAAGC,GAAG,IAAI;QACb,IAAI,CAACD,KAAK,GAAG,oCAAoC;QACjD,IAAI,CAACT,OAAO,GAAG,KAAK;QACpBW,OAAO,CAACF,KAAK,CAACC,GAAG,CAAC;MACpB;KACD,CAAC;EACJ;EAEAF,qBAAqB;IACnB,IAAI,CAACpB,cAAc,CAAC2B,WAAW,EAAE,CAACb,SAAS,CAAC;MAC1CC,IAAI,EAAGa,QAAQ,IAAI;QACjB;QACA,MAAMC,oBAAoB,GAAG,IAAI,CAACH,oBAAoB,CAACI,GAAG,CAACC,GAAG,IAAIA,GAAG,CAACrB,SAAS,CAAC;QAChF,IAAI,CAACsB,iBAAiB,GAAGJ,QAAQ,CAACK,MAAM,CAACC,OAAO,IAAI,CAACL,oBAAoB,CAACM,QAAQ,CAACD,OAAO,CAACjB,EAAE,CAAC,CAAC;QAC/F,IAAI,CAACL,OAAO,GAAG,KAAK;MACtB,CAAC;MACDS,KAAK,EAAGC,GAAG,IAAI;QACb,IAAI,CAACD,KAAK,GAAG,sCAAsC;QACnD,IAAI,CAACT,OAAO,GAAG,KAAK;QACpBW,OAAO,CAACF,KAAK,CAACC,GAAG,CAAC;MACpB;KACD,CAAC;EACJ;EAEAc,QAAQ;IACN,IAAI,IAAI,CAAC5B,gBAAgB,CAAC6B,OAAO,EAAE;MACjC;;IAGF,IAAI,CAACzB,OAAO,GAAG,IAAI;IACnB,IAAI,CAACS,KAAK,GAAG,EAAE;IACf,IAAI,CAACiB,OAAO,GAAG,EAAE;IAEjB,MAAM5B,SAAS,GAAG,IAAI,CAACF,gBAAgB,CAAC+B,KAAK,CAAC7B,SAAS;IAEvD;IACA,IAAI,IAAI,CAACgB,oBAAoB,CAACc,MAAM,IAAI,IAAI,CAACC,WAAW,EAAE;MACxD,IAAI,CAACpB,KAAK,GAAG,8BAA8B,IAAI,CAACoB,WAAW,WAAW;MACtE,IAAI,CAAC7B,OAAO,GAAG,KAAK;MACpB;;IAGF;IACA,IAAI,CAAC8B,sBAAsB,CAAChC,SAAS,CAAC,CAACiC,IAAI,CAACC,WAAW,IAAG;MACxD,IAAIA,WAAW,EAAE;QACf,IAAI,CAACvB,KAAK,GAAG,0DAA0D;QACvE,IAAI,CAACT,OAAO,GAAG,KAAK;QACpB;;MAGF;MACA,MAAMiC,eAAe,GAAG,IAAI,CAACb,iBAAiB,CAACc,IAAI,CAACC,CAAC,IAAIA,CAAC,CAAC9B,EAAE,KAAKP,SAAS,CAAC;MAE5E,MAAMsC,mBAAmB,GAAwB;QAC/C9B,SAAS,EAAE,IAAI,CAACA,SAAS;QACzBR,SAAS,EAAEA,SAAS;QACpBuC,WAAW,EAAE,IAAI,CAAC/C,WAAW,CAACgD,mBAAmB,EAAE,EAAEC,IAAI,IAAI,EAAE;QAC/DC,WAAW,EAAEP,eAAe,EAAEM,IAAI,IAAI;OACvC;MAED,IAAI,CAAClD,mBAAmB,CAACoD,eAAe,CAACL,mBAAmB,CAAC,CAAClC,SAAS,CAAC;QACtEC,IAAI,EAAGuC,YAAY,IAAI;UACrB,IAAI,CAAChB,OAAO,GAAG,kCAAkC;UACjD,IAAI,CAAC1B,OAAO,GAAG,KAAK;UACpB,IAAI,CAACJ,gBAAgB,CAAC+C,KAAK,EAAE;UAC7B;UACA,IAAI,CAACpC,wBAAwB,EAAE;UAC/B,IAAI,CAACC,qBAAqB,EAAE;QAC9B,CAAC;QACDC,KAAK,EAAGC,GAAG,IAAI;UACb,IAAI,CAACD,KAAK,GAAGC,GAAG,CAACkC,OAAO,IAAI,+BAA+B;UAC3D,IAAI,CAAC5C,OAAO,GAAG,KAAK;UACpBW,OAAO,CAACF,KAAK,CAACC,GAAG,CAAC;QACpB;OACD,CAAC;IACJ,CAAC,CAAC,CAACmC,KAAK,CAACnC,GAAG,IAAG;MACb,IAAI,CAACD,KAAK,GAAG,2CAA2C;MACxD,IAAI,CAACT,OAAO,GAAG,KAAK;MACpBW,OAAO,CAACF,KAAK,CAACC,GAAG,CAAC;IACpB,CAAC,CAAC;EACJ;EAEMoB,sBAAsB,CAACgB,YAAoB;IAAA;IAAA;MAC/C;MACA,IAAI,KAAI,CAAChC,oBAAoB,CAACc,MAAM,KAAK,CAAC,EAAE;QAC1C,OAAO,KAAK;;MAGd,IAAI;QACF;QACA,MAAMmB,UAAU,SAAShE,cAAc,CAAC,KAAI,CAACK,cAAc,CAAC4D,UAAU,CAACF,YAAY,CAAC,CAAC;QACrF,IAAI,CAACC,UAAU,EAAE,OAAO,KAAK;QAE7B;QACA,MAAME,iBAAiB,GAAG,KAAI,CAACnC,oBAAoB,CAACI,GAAG,CAACC,GAAG,IAAIA,GAAG,CAACrB,SAAS,CAAC;QAC7E,MAAMoD,eAAe,SAASnE,cAAc,CAAC,KAAI,CAACK,cAAc,CAAC+D,gBAAgB,CAACF,iBAAiB,CAAC,CAAC;QACrG,IAAI,CAACC,eAAe,EAAE,OAAO,KAAK;QAElC;QACA,OAAOA,eAAe,CAACE,IAAI,CAAC9B,OAAO,IAAIA,OAAO,CAAC+B,WAAW,KAAKN,UAAU,CAACM,WAAW,CAAC;OACvF,CAAC,OAAO5C,KAAK,EAAE;QACdE,OAAO,CAACF,KAAK,CAAC,oCAAoC,EAAEA,KAAK,CAAC;QAC1D,OAAO,KAAK;;IACb;EACH;EAEA6C,iBAAiB,CAACC,cAAkC;IAClD,IAAI,CAACA,cAAc,EAAE;MACnB,IAAI,CAAC9C,KAAK,GAAG,0BAA0B;MACvC;;IAGF,IAAI+C,OAAO,CAAC,oDAAoD,CAAC,EAAE;MACjE,IAAI,CAACxD,OAAO,GAAG,IAAI;MACnB,IAAI,CAACS,KAAK,GAAG,EAAE;MACf,IAAI,CAACiB,OAAO,GAAG,EAAE;MAEjB,IAAI,CAACrC,mBAAmB,CAACiE,iBAAiB,CAACC,cAAc,CAAC,CAACrD,SAAS,CAAC;QACnEC,IAAI,EAAE,MAAK;UACT,IAAI,CAACuB,OAAO,GAAG,iCAAiC;UAChD,IAAI,CAAC1B,OAAO,GAAG,KAAK;UACpB;UACA,IAAI,CAACO,wBAAwB,EAAE;UAC/B,IAAI,CAACC,qBAAqB,EAAE;QAC9B,CAAC;QACDC,KAAK,EAAGC,GAAG,IAAI;UACb,IAAI,CAACD,KAAK,GAAG,8BAA8B;UAC3C,IAAI,CAACT,OAAO,GAAG,KAAK;UACpBW,OAAO,CAACF,KAAK,CAACC,GAAG,CAAC;QACpB;OACD,CAAC;;EAEN;EAEA;EACA+C,mBAAmB,CAAC3D,SAAiB;IACnC,IAAI,CAACA,SAAS,EAAE;MACd,IAAI,CAACW,KAAK,GAAG,uDAAuD;MACpEiD,UAAU,CAAC,MAAM,IAAI,CAACjD,KAAK,GAAG,EAAE,EAAE,IAAI,CAAC,CAAC,CAAC;MACzC;;IAGF,IAAI,CAACkD,iBAAiB,GAAG7D,SAAS;IAElC,IAAI;MACF;MACA,MAAM8D,YAAY,GAAuBC,QAAQ,CAACC,cAAc,CAAC,iBAAiB,CAAC;MACnF,IAAIF,YAAY,EAAE;QAChB;QACA,MAAMG,aAAa,GAAG,IAAIC,SAAS,CAACC,KAAK,CAACL,YAAY,CAAC;QACvD;QACAG,aAAa,CAACG,IAAI,EAAE;QAEpB;QACAR,UAAU,CAAC,MAAK;UACd,IAAIE,YAAY,CAACO,SAAS,CAACC,QAAQ,CAAC,MAAM,CAAC,EAAE;YAC3CzD,OAAO,CAAC0D,GAAG,CAAC,8BAA8B,CAAC;WAC5C,MAAM;YACL1D,OAAO,CAACF,KAAK,CAAC,qCAAqC,CAAC;YACpD,IAAI,CAACA,KAAK,GAAG,8DAA8D;YAC3EiD,UAAU,CAAC,MAAM,IAAI,CAACjD,KAAK,GAAG,EAAE,EAAE,IAAI,CAAC;;QAE3C,CAAC,EAAE,GAAG,CAAC;OACR,MAAM;QACLE,OAAO,CAACF,KAAK,CAAC,8DAA8D,CAAC;QAC7E,IAAI,CAACA,KAAK,GAAG,8DAA8D;QAC3EiD,UAAU,CAAC,MAAM,IAAI,CAACjD,KAAK,GAAG,EAAE,EAAE,IAAI,CAAC;;KAE1C,CAAC,OAAO6D,CAAC,EAAE;MACV3D,OAAO,CAACF,KAAK,CAAC,0BAA0B,EAAE6D,CAAC,CAAC;MAC5C,IAAI,CAAC7D,KAAK,GAAG,8DAA8D;MAC3EiD,UAAU,CAAC,MAAM,IAAI,CAACjD,KAAK,GAAG,EAAE,EAAE,IAAI,CAAC;;EAE3C;;;uBAvOWxB,4BAA4B;IAAA;EAAA;;;YAA5BA,4BAA4B;MAAAsF;MAAAC;MAAAC;MAAAC;MAAAC;QAAA;UCnBzC3F,8BAA4B;UAGlBA,oCAAoB;UAAAA,iBAAK;UAC7BA,qBAAI;UACNA,iBAAM;UAGRA,6EAMM;UAENA,6EAMM;UAENA,6EAMM;UAGNA,8BAAsB;UAIVA,yCAAwB;UAAAA,iBAAK;UAEnCA,+BAAuB;UACrBA,0CAAmE;UAEnEA,+EAEM;UAENA,iFA0BM;UACRA,iBAAM;UAMZA,+BAAiB;UAILA,wCAAuB;UAAAA,iBAAK;UAElCA,+BAAuB;UACgBA;YAAA,OAAY4F,cAAU;UAAA,EAAC;UAC1D5F,gCAAkB;UAC0BA,uCAAsB;UAAAA,iBAAQ;UACxEA,mCACsH;UACnGA,6CAA4B;UAAAA,iBAAS;UACtDA,sFAES;UACXA,iBAAS;UACTA,gFAEM;UACRA,iBAAM;UAENA,gCAA0B;UAEtBA,yBAAiC;UAACA,oCACpC;UAAAA,iBAAS;UAGXA,gFAEM;UACRA,iBAAO;UAQjBA,gCAAqH;UAI3DA,yCAAmB;UAAAA,iBAAK;UAC1EA,8BAA4F;UAC9FA,iBAAM;UACNA,gCAAwB;UACtBA,sGAA0H;UAC5HA,iBAAM;UACNA,gCAA0B;UACgDA,uBAAM;UAAAA,iBAAS;;;;;UAzH3EA,eAAa;UAAbA,kCAAa;UAQbA,eAAW;UAAXA,gCAAW;UAQXA,eAAa;UAAbA,kCAAa;UAgBFA,eAAuB;UAAvBA,yCAAuB;UAEtCA,eAAuC;UAAvCA,4DAAuC;UAIvCA,eAAqC;UAArCA,0DAAqC;UAwCrCA,eAA8B;UAA9BA,gDAA8B;UAIxBA,eAA6G;UAA7GA,0MAA6G;UAEvFA,eAAoB;UAApBA,+CAAoB;UAI5CA,eAA8F;UAA9FA,mMAA8F;UAMtDA,eAA8F;UAA9FA,4HAA8F;UAKxIA,eAAgD;UAAhDA,yEAAgD;UAmBzCA,eAAuB;UAAvBA,4CAAuB","names":["Validators","firstValueFrom","i0","SubjectRegistrationComponent","constructor","formBuilder","subjectService","registrationService","authService","router","modalService","ngOnInit","initForm","getCurrentStudentId","registrationForm","group","subjectId","required","loading","getCurrentUser","subscribe","next","user","id","studentId","loadCurrentRegistrations","loadAvailableSubjects","error","err","console","getStudentRegistrations","registrations","currentRegistrations","getSubjects","subjects","registeredSubjectIds","map","reg","availableSubjects","filter","subject","includes","onSubmit","invalid","success","value","length","maxSubjects","checkProfessorConflict","then","hasConflict","selectedSubject","find","s","registrationRequest","studentName","getCurrentUserValue","name","subjectName","registerSubject","registration","reset","message","catch","newSubjectId","newSubject","getSubject","currentSubjectIds","currentSubjects","getSubjectsByIds","some","professorId","unregisterSubject","registrationId","confirm","openClassmatesModal","setTimeout","selectedSubjectId","modalElement","document","getElementById","modalInstance","bootstrap","Modal","show","classList","contains","log","e","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["C:\\Users\\hansk\\Videos\\Prueba interrapidisimp\\frontend\\src\\app\\components\\subject-registration\\subject-registration.component.ts","C:\\Users\\hansk\\Videos\\Prueba interrapidisimp\\frontend\\src\\app\\components\\subject-registration\\subject-registration.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { Subject } from '../../models/subject.model';\nimport { Registration, RegistrationRequest } from '../../models/registration.model';\nimport { SubjectService } from '../../services/subject.service';\nimport { RegistrationService } from '../../services/registration.service';\nimport { AuthService } from '../../services/auth.service';\nimport { Router } from '@angular/router';\nimport { firstValueFrom } from 'rxjs';\nimport { ModalService } from '../../services/modal.service';\n\n// Declaración para el objeto bootstrap global\ndeclare var bootstrap: any;\n\n@Component({\n  selector: 'app-subject-registration',\n  templateUrl: './subject-registration.component.html',\n  styleUrls: ['./subject-registration.component.css']\n})\nexport class SubjectRegistrationComponent implements OnInit {\n  registrationForm!: FormGroup;\n  availableSubjects: Subject[] = [];\n  currentRegistrations: Registration[] = [];\n  loading = false;\n  error = '';\n  success = '';\n  studentId: number = 0;\n  maxSubjects = 3;\n  selectedSubjectId: number | null = null; // Para el modal de compañeros\n\n  constructor(\n    private formBuilder: FormBuilder,\n    private subjectService: SubjectService,\n    private registrationService: RegistrationService,\n    private authService: AuthService,\n    private router: Router,\n    private modalService: ModalService\n  ) {}\n\n  ngOnInit(): void {\n    this.initForm();\n    this.getCurrentStudentId();\n  }\n\n  initForm(): void {\n    this.registrationForm = this.formBuilder.group({\n      subjectId: ['', [Validators.required]]\n    });\n  }\n\n  getCurrentStudentId(): void {\n    this.loading = true;\n    this.authService.getCurrentUser().subscribe({\n      next: (user) => {\n        if (user && user.id) {\n          this.studentId = user.id;\n          this.loadCurrentRegistrations();\n          this.loadAvailableSubjects();\n        } else {\n          this.error = 'No se pudo obtener la información del estudiante';\n          this.loading = false;\n        }\n      },\n      error: (err) => {\n        this.error = 'Error al obtener información del usuario';\n        this.loading = false;\n        console.error(err);\n      }\n    });\n  }\n\n  loadCurrentRegistrations(): void {\n    this.registrationService.getStudentRegistrations(this.studentId).subscribe({\n      next: (registrations) => {\n        this.currentRegistrations = registrations;\n        this.loading = false;\n      },\n      error: (err) => {\n        this.error = 'Error al cargar registros actuales';\n        this.loading = false;\n        console.error(err);\n      }\n    });\n  }\n\n  loadAvailableSubjects(): void {\n    this.subjectService.getSubjects().subscribe({\n      next: (subjects) => {\n        // Filtrar materias ya registradas\n        const registeredSubjectIds = this.currentRegistrations.map(reg => reg.subjectId);\n        this.availableSubjects = subjects.filter(subject => !registeredSubjectIds.includes(subject.id));\n        this.loading = false;\n      },\n      error: (err) => {\n        this.error = 'Error al cargar materias disponibles';\n        this.loading = false;\n        console.error(err);\n      }\n    });\n  }\n\n  onSubmit(): void {\n    if (this.registrationForm.invalid) {\n      return;\n    }\n\n    this.loading = true;\n    this.error = '';\n    this.success = '';\n\n    const subjectId = this.registrationForm.value.subjectId;\n    \n    // Verificar si ya tiene el máximo de materias\n    if (this.currentRegistrations.length >= this.maxSubjects) {\n      this.error = `No puedes registrar más de ${this.maxSubjects} materias`;\n      this.loading = false;\n      return;\n    }\n\n    // Verificar si ya tiene una materia con el mismo profesor\n    this.checkProfessorConflict(subjectId).then(hasConflict => {\n      if (hasConflict) {\n        this.error = 'No puedes tener más de una materia con el mismo profesor';\n        this.loading = false;\n        return;\n      }\n\n      // Proceder con el registro\n      const selectedSubject = this.availableSubjects.find(s => s.id === subjectId);\n      \n      const registrationRequest: RegistrationRequest = {\n        studentId: this.studentId,\n        subjectId: subjectId,\n        studentName: this.authService.getCurrentUserValue()?.name || '',\n        subjectName: selectedSubject?.name || ''\n      };\n\n      this.registrationService.registerSubject(registrationRequest).subscribe({\n        next: (registration) => {\n          this.success = 'Materia registrada correctamente';\n          this.loading = false;\n          this.registrationForm.reset();\n          // Recargar los datos\n          this.loadCurrentRegistrations();\n          this.loadAvailableSubjects();\n        },\n        error: (err) => {\n          this.error = err.message || 'Error al registrar la materia';\n          this.loading = false;\n          console.error(err);\n        }\n      });\n    }).catch(err => {\n      this.error = 'Error al verificar conflictos de profesor';\n      this.loading = false;\n      console.error(err);\n    });\n  }\n\n  async checkProfessorConflict(newSubjectId: number): Promise<boolean> {\n    // Si no hay registros actuales, no hay conflicto\n    if (this.currentRegistrations.length === 0) {\n      return false;\n    }\n\n    try {\n      // Obtener la nueva materia\n      const newSubject = await firstValueFrom(this.subjectService.getSubject(newSubjectId));\n      if (!newSubject) return false;\n\n      // Obtener las materias actuales\n      const currentSubjectIds = this.currentRegistrations.map(reg => reg.subjectId);\n      const currentSubjects = await firstValueFrom(this.subjectService.getSubjectsByIds(currentSubjectIds));\n      if (!currentSubjects) return false;\n\n      // Verificar si hay conflicto de profesor\n      return currentSubjects.some(subject => subject.professorId === newSubject.professorId);\n    } catch (error) {\n      console.error('Error checking professor conflict:', error);\n      return false;\n    }\n  }\n\n  unregisterSubject(registrationId: number | undefined): void {\n    if (!registrationId) {\n      this.error = 'ID de registro no válido';\n      return;\n    }\n    \n    if (confirm('¿Estás seguro de que deseas eliminar esta materia?')) {\n      this.loading = true;\n      this.error = '';\n      this.success = '';\n\n      this.registrationService.unregisterSubject(registrationId).subscribe({\n        next: () => {\n          this.success = 'Materia eliminada correctamente';\n          this.loading = false;\n          // Recargar los datos\n          this.loadCurrentRegistrations();\n          this.loadAvailableSubjects();\n        },\n        error: (err) => {\n          this.error = 'Error al eliminar la materia';\n          this.loading = false;\n          console.error(err);\n        }\n      });\n    }\n  }\n\n  // Método para abrir el modal de compañeros\n  openClassmatesModal(subjectId: number): void {\n    if (!subjectId) {\n      this.error = 'Error: No se pudo identificar la materia seleccionada';\n      setTimeout(() => this.error = '', 3000); // Limpiar el mensaje después de 3 segundos\n      return;\n    }\n    \n    this.selectedSubjectId = subjectId;\n    \n    try {\n      // Usar Bootstrap 5 para abrir el modal\n      const modalElement: HTMLElement | null = document.getElementById('classmatesModal');\n      if (modalElement) {\n        // Crear una nueva instancia del modal\n        const modalInstance = new bootstrap.Modal(modalElement);\n        // Mostrar el modal\n        modalInstance.show();\n        \n        // Verificar que el modal se haya abierto correctamente\n        setTimeout(() => {\n          if (modalElement.classList.contains('show')) {\n            console.log('Modal mostrado correctamente');\n          } else {\n            console.error('El modal no se mostró correctamente');\n            this.error = 'Error al mostrar la lista de compañeros. Intente nuevamente.';\n            setTimeout(() => this.error = '', 3000);\n          }\n        }, 500);\n      } else {\n        console.error('No se encontró el elemento del modal con ID: classmatesModal');\n        this.error = 'Error al mostrar la lista de compañeros. Intente nuevamente.';\n        setTimeout(() => this.error = '', 3000);\n      }\n    } catch (e) {\n      console.error('Error al abrir el modal:', e);\n      this.error = 'Error al mostrar la lista de compañeros. Intente nuevamente.';\n      setTimeout(() => this.error = '', 3000);\n    }\n  }\n}","<div class=\"container mt-4\">\n  <div class=\"row\">\n    <div class=\"col-md-12\">\n      <h2>Registro de Materias</h2>\n      <hr>\n    </div>\n  </div>\n\n  <div class=\"row\" *ngIf=\"loading\">\n    <div class=\"col-md-12 text-center\">\n      <div class=\"spinner-border text-primary\" role=\"status\">\n        <span class=\"visually-hidden\">Cargando...</span>\n      </div>\n    </div>\n  </div>\n\n  <div class=\"row\" *ngIf=\"error\">\n    <div class=\"col-md-12\">\n      <div class=\"alert alert-danger\">\n        {{ error }}\n      </div>\n    </div>\n  </div>\n\n  <div class=\"row\" *ngIf=\"success\">\n    <div class=\"col-md-12\">\n      <div class=\"alert alert-success\">\n        {{ success }}\n      </div>\n    </div>\n  </div>\n\n  <!-- Materias Actuales -->\n  <div class=\"row mb-4\">\n    <div class=\"col-md-12\">\n      <div class=\"card\">\n        <div class=\"card-header bg-primary text-white\">\n          <h4>Mis Materias Registradas</h4>\n        </div>\n        <div class=\"card-body\">\n          <app-student-credits [studentId]=\"studentId\"></app-student-credits>\n          \n          <div *ngIf=\"currentRegistrations.length === 0\" class=\"text-center mt-3\">\n            <p>No tienes materias registradas.</p>\n          </div>\n          \n          <div *ngIf=\"currentRegistrations.length > 0\" class=\"table-responsive\">\n            <table class=\"table table-striped\">\n              <thead>\n                <tr>\n                  <th>Materia</th>\n                  <th>Profesor</th>\n                  <th>Créditos</th>\n                  <th>Acciones</th>\n                </tr>\n              </thead>\n              <tbody>\n                <tr *ngFor=\"let reg of currentRegistrations\">\n                  <td>{{ reg.subject?.name }}</td>\n                  <td>{{ reg.subject?.professor?.name }}</td>\n                  <td>{{ reg.subject?.credits }}</td>\n                  <td>\n                    <button class=\"btn btn-sm btn-info me-2\" (click)=\"openClassmatesModal(reg.subjectId)\" id=\"btnVerCompaneros-{{reg.subjectId}}\" data-testid=\"ver-companeros-btn\">\n                      <i class=\"bi bi-people\"></i> Ver Compañeros\n                    </button>\n                    <button class=\"btn btn-sm btn-danger\" (click)=\"unregisterSubject(reg.id)\">\n                      <i class=\"bi bi-trash\"></i> Eliminar\n                    </button>\n                  </td>\n                </tr>\n              </tbody>\n            </table>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n\n  <!-- Formulario de Registro -->\n  <div class=\"row\">\n    <div class=\"col-md-12\">\n      <div class=\"card\">\n        <div class=\"card-header bg-success text-white\">\n          <h4>Registrar Nueva Materia</h4>\n        </div>\n        <div class=\"card-body\">\n          <form [formGroup]=\"registrationForm\" (ngSubmit)=\"onSubmit()\">\n            <div class=\"mb-3\">\n              <label for=\"subjectId\" class=\"form-label\">Selecciona una Materia</label>\n              <select id=\"subjectId\" formControlName=\"subjectId\" class=\"form-select\" \n                      [class.is-invalid]=\"registrationForm.get('subjectId')?.invalid && registrationForm.get('subjectId')?.touched\">\n                <option value=\"\">-- Selecciona una materia --</option>\n                <option *ngFor=\"let subject of availableSubjects\" [value]=\"subject.id\">\n                  {{ subject.name }} - Prof. {{ subject.professor?.name }} ({{ subject.credits }} créditos)\n                </option>\n              </select>\n              <div *ngIf=\"registrationForm.get('subjectId')?.invalid && registrationForm.get('subjectId')?.touched\" class=\"invalid-feedback\">\n                Debes seleccionar una materia.\n              </div>\n            </div>\n            \n            <div class=\"d-grid gap-2\">\n              <button type=\"submit\" class=\"btn btn-success\" [disabled]=\"registrationForm.invalid || loading || currentRegistrations.length >= maxSubjects\">\n                <i class=\"bi bi-plus-circle\"></i> Registrar Materia\n              </button>\n            </div>\n            \n            <div *ngIf=\"currentRegistrations.length >= maxSubjects\" class=\"alert alert-warning mt-3\">\n              Has alcanzado el límite máximo de {{ maxSubjects }} materias.\n            </div>\n          </form>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n\n<!-- Modal para mostrar compañeros -->\n<div class=\"modal fade\" id=\"classmatesModal\" tabindex=\"-1\" aria-labelledby=\"classmatesModalLabel\" aria-hidden=\"true\">\n  <div class=\"modal-dialog modal-dialog-centered\">\n    <div class=\"modal-content\">\n      <div class=\"modal-header\">\n        <h5 class=\"modal-title\" id=\"classmatesModalLabel\">Compañeros de Clase</h5>\n        <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"modal\" aria-label=\"Close\"></button>\n      </div>\n      <div class=\"modal-body\">\n        <app-classmates *ngIf=\"selectedSubjectId\" [subjectId]=\"selectedSubjectId\" [currentStudentId]=\"studentId\"></app-classmates>\n      </div>\n      <div class=\"modal-footer\">\n        <button type=\"button\" class=\"btn btn-secondary\" data-bs-dismiss=\"modal\">Cerrar</button>\n      </div>\n    </div>\n  </div>\n</div>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}