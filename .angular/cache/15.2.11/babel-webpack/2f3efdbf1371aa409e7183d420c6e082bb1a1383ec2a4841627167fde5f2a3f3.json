{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/hansk/Videos/frontendsistemacolegio.interrapidisi/frontendsistemacolegio.interrapidisi/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { Validators } from '@angular/forms';\nimport { firstValueFrom } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"../../../servicios/asignatura.servicio\";\nimport * as i3 from \"../../../servicios/inscripcion.servicio\";\nimport * as i4 from \"../../../servicios/autenticacion.servicio\";\nimport * as i5 from \"@angular/router\";\nimport * as i6 from \"@angular/common\";\nimport * as i7 from \"../../compartidos/companeros/companeros.componente\";\nimport * as i8 from \"../creditos-estudiante/creditos-estudiante.componente\";\nfunction RegistroMateriasComponente_div_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 1)(1, \"div\", 36)(2, \"div\", 37)(3, \"span\", 38);\n    i0.ɵɵtext(4, \"Cargando...\");\n    i0.ɵɵelementEnd()()()();\n  }\n}\nfunction RegistroMateriasComponente_div_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 1)(1, \"div\", 2)(2, \"div\", 39);\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r1.error, \" \");\n  }\n}\nfunction RegistroMateriasComponente_div_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 1)(1, \"div\", 2)(2, \"div\", 40);\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r2.exito, \" \");\n  }\n}\nfunction RegistroMateriasComponente_div_17_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 41)(1, \"p\");\n    i0.ɵɵtext(2, \"No tienes materias registradas.\");\n    i0.ɵɵelementEnd()();\n  }\n}\nfunction RegistroMateriasComponente_div_18_tr_13_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r13 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"tr\")(1, \"td\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"td\");\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"td\");\n    i0.ɵɵtext(6);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(7, \"td\")(8, \"button\", 45);\n    i0.ɵɵlistener(\"click\", function RegistroMateriasComponente_div_18_tr_13_Template_button_click_8_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r13);\n      const inscripcion_r11 = restoredCtx.$implicit;\n      const ctx_r12 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r12.abrirModalCompaneros(inscripcion_r11.asignaturaId));\n    });\n    i0.ɵɵelement(9, \"i\", 46);\n    i0.ɵɵtext(10, \" Ver Compa\\u00F1eros \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(11, \"button\", 47);\n    i0.ɵɵlistener(\"click\", function RegistroMateriasComponente_div_18_tr_13_Template_button_click_11_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r13);\n      const inscripcion_r11 = restoredCtx.$implicit;\n      const ctx_r14 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r14.desinscribirAsignatura(inscripcion_r11.id));\n    });\n    i0.ɵɵelement(12, \"i\", 48);\n    i0.ɵɵtext(13, \" Eliminar \");\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const inscripcion_r11 = ctx.$implicit;\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(inscripcion_r11.asignatura == null ? null : inscripcion_r11.asignatura.nombre);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(inscripcion_r11.asignatura == null ? null : inscripcion_r11.asignatura.profesor == null ? null : inscripcion_r11.asignatura.profesor.nombre);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(inscripcion_r11.asignatura == null ? null : inscripcion_r11.asignatura.creditos);\n    i0.ɵɵadvance(2);\n    i0.ɵɵpropertyInterpolate1(\"id\", \"btnVerCompaneros-\", inscripcion_r11.asignaturaId, \"\");\n  }\n}\nfunction RegistroMateriasComponente_div_18_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 42)(1, \"table\", 43)(2, \"thead\")(3, \"tr\")(4, \"th\");\n    i0.ɵɵtext(5, \"Materia\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(6, \"th\");\n    i0.ɵɵtext(7, \"Profesor\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(8, \"th\");\n    i0.ɵɵtext(9, \"Cr\\u00E9ditos\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(10, \"th\");\n    i0.ɵɵtext(11, \"Acciones\");\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementStart(12, \"tbody\");\n    i0.ɵɵtemplate(13, RegistroMateriasComponente_div_18_tr_13_Template, 14, 4, \"tr\", 44);\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const ctx_r4 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(13);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r4.inscripcionesActuales);\n  }\n}\nfunction RegistroMateriasComponente_option_33_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"option\", 49);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const asignatura_r15 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", asignatura_r15.id);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate3(\" \", asignatura_r15.nombre, \" - Prof. \", asignatura_r15.profesor == null ? null : asignatura_r15.profesor.nombre, \" (\", asignatura_r15.creditos, \" cr\\u00E9ditos) \");\n  }\n}\nfunction RegistroMateriasComponente_div_34_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 50);\n    i0.ɵɵtext(1, \" Debes seleccionar una materia. \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction RegistroMateriasComponente_div_39_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 51);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r7 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" Has alcanzado el l\\u00EDmite m\\u00E1ximo de \", ctx_r7.maxAsignaturas, \" materias. \");\n  }\n}\nfunction RegistroMateriasComponente_div_49_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 52);\n    i0.ɵɵtext(1, \" No se ha seleccionado ninguna materia. \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction RegistroMateriasComponente_app_companeros_50_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"app-companeros\", 53);\n  }\n  if (rf & 2) {\n    const ctx_r9 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"asignaturaId\", ctx_r9.asignaturaSeleccionadaId)(\"estudianteActualId\", ctx_r9.estudianteId);\n  }\n}\nexport class RegistroMateriasComponente {\n  constructor(formBuilder, asignaturaServicio, inscripcionServicio, autenticacionServicio, router) {\n    this.formBuilder = formBuilder;\n    this.asignaturaServicio = asignaturaServicio;\n    this.inscripcionServicio = inscripcionServicio;\n    this.autenticacionServicio = autenticacionServicio;\n    this.router = router;\n    this.asignaturasDisponibles = [];\n    this.inscripcionesActuales = [];\n    this.asignaturas = []; // Para el cálculo de créditos\n    this.cargando = false;\n    this.error = '';\n    this.exito = '';\n    this.estudianteId = 0;\n    this.maxAsignaturas = 3;\n    this.asignaturaSeleccionadaId = null; // Para el modal de compañeros\n  }\n\n  ngOnInit() {\n    this.iniciarFormulario();\n    this.obtenerIdEstudianteActual();\n  }\n  iniciarFormulario() {\n    this.formularioInscripcion = this.formBuilder.group({\n      asignaturaId: ['', [Validators.required]]\n    });\n  }\n  obtenerIdEstudianteActual() {\n    this.cargando = true;\n    const usuario = this.autenticacionServicio.obtenerValorUsuarioActual();\n    console.log('Usuario autenticado:', usuario);\n    if (!usuario) {\n      this.error = 'No se pudo obtener la información del usuario. Por favor, inicie sesión nuevamente.';\n      this.cargando = false;\n      return;\n    }\n    console.log('ID de estudiante:', usuario.studentId);\n    if (usuario.role !== 'student') {\n      this.error = 'Esta página es solo para estudiantes.';\n      this.cargando = false;\n      return;\n    }\n    if (!usuario.studentId) {\n      // Si el usuario es estudiante pero no tiene studentId, intentamos obtenerlo del perfil\n      this.autenticacionServicio.obtenerPerfilUsuario(usuario.id).subscribe({\n        next: perfil => {\n          console.log('Perfil obtenido:', perfil);\n          if (perfil.studentId) {\n            this.estudianteId = perfil.studentId;\n            this.cargarInscripcionesActuales();\n            this.cargarAsignaturasDisponibles();\n          } else {\n            this.error = 'No se pudo identificar al estudiante. Por favor, contacte al administrador.';\n            this.cargando = false;\n          }\n        },\n        error: err => {\n          console.error('Error al obtener perfil:', err);\n          this.error = 'Error al obtener información del estudiante: ' + err.message;\n          this.cargando = false;\n        }\n      });\n    } else {\n      this.estudianteId = usuario.studentId;\n      this.cargarInscripcionesActuales();\n      this.cargarAsignaturasDisponibles();\n    }\n  }\n  cargarInscripcionesActuales() {\n    this.inscripcionServicio.obtenerInscripcionesEstudiante(this.estudianteId).subscribe({\n      next: inscripciones => {\n        this.inscripcionesActuales = inscripciones;\n        console.log('Inscripciones actuales cargadas:', this.inscripcionesActuales);\n        // Cargar las asignaturas del estudiante para el cu00e1lculo de cru00e9ditos\n        this.asignaturaServicio.obtenerAsignaturasEstudiante(this.estudianteId).subscribe({\n          next: asignaturas => {\n            this.asignaturas = asignaturas;\n            console.log('Asignaturas del estudiante cargadas:', this.asignaturas);\n            this.cargando = false;\n          },\n          error: err => {\n            this.error = 'Error al cargar asignaturas del estudiante';\n            this.cargando = false;\n            console.error(err);\n          }\n        });\n      },\n      error: err => {\n        this.error = 'Error al cargar inscripciones actuales';\n        this.cargando = false;\n        console.error(err);\n      }\n    });\n  }\n  cargarAsignaturasDisponibles() {\n    this.asignaturaServicio.obtenerAsignaturas().subscribe({\n      next: asignaturas => {\n        // Filtrar materias ya registradas\n        const idsAsignaturasRegistradas = this.inscripcionesActuales.map(reg => reg.asignaturaId);\n        this.asignaturasDisponibles = asignaturas.filter(asignatura => !idsAsignaturasRegistradas.includes(asignatura.id));\n        console.log('Asignaturas disponibles:', this.asignaturasDisponibles);\n        this.cargando = false;\n      },\n      error: err => {\n        this.error = 'Error al cargar asignaturas disponibles';\n        this.cargando = false;\n        console.error(err);\n      }\n    });\n  }\n  onSubmit() {\n    if (this.formularioInscripcion.invalid) {\n      return;\n    }\n    this.cargando = true;\n    this.error = '';\n    this.exito = '';\n    const asignaturaId = this.formularioInscripcion.value.asignaturaId;\n    console.log('Procesando inscripción de asignatura:', asignaturaId);\n    // Verificar si ya tiene el máximo de materias\n    if (this.inscripcionesActuales.length >= this.maxAsignaturas) {\n      this.error = `No puedes registrar más de ${this.maxAsignaturas} materias`;\n      this.cargando = false;\n      return;\n    }\n    // Obtener la asignatura seleccionada para verificar sus créditos\n    console.log('Obteniendo asignatura seleccionada para verificar créditos', asignaturaId);\n    const asignaturaSeleccionada = this.asignaturasDisponibles.find(a => a.id === asignaturaId);\n    console.log('Verificando asignatura seleccionada:', asignaturaSeleccionada);\n    console.log('Asignatura seleccionada:', this.asignaturasDisponibles.find(a => a.id === asignaturaId));\n    if (!asignaturaSeleccionada) {\n      this.error = 'No se pudo encontrar la información de la materia seleccionada';\n      this.cargando = false;\n      return;\n    }\n    // Calcular el total de créditos actuales\n    const creditosActuales = this.asignaturas.reduce((total, asignatura) => total + asignatura.creditos, 0);\n    const nuevoTotalCreditos = creditosActuales + asignaturaSeleccionada.creditos;\n    // Verificar si supera el límite de 9 créditos\n    if (nuevoTotalCreditos > 9) {\n      this.error = `No puedes registrar esta materia porque superarías el límite de 9 créditos. Actualmente tienes ${creditosActuales} créditos y esta materia tiene ${asignaturaSeleccionada.creditos} créditos.`;\n      this.cargando = false;\n      return;\n    }\n    // Verificar si ya tiene una materia con el mismo profesor\n    this.verificarConflictoProfesor(asignaturaId).then(tieneConflicto => {\n      if (tieneConflicto) {\n        this.error = 'No puedes tener más de una materia con el mismo profesor';\n        this.cargando = false;\n        return;\n      }\n      // Proceder con el registro\n      const solicitudInscripcion = {\n        estudianteId: this.estudianteId,\n        asignaturaId: asignaturaId,\n        nombreEstudiante: this.autenticacionServicio.obtenerValorUsuarioActual()?.name || '',\n        nombreAsignatura: asignaturaSeleccionada?.nombre || ''\n      };\n      this.inscripcionServicio.inscribirAsignatura(solicitudInscripcion).subscribe({\n        next: inscripcion => {\n          this.exito = 'Materia registrada correctamente';\n          this.cargando = false;\n          this.formularioInscripcion.reset();\n          // Recargar los datos\n          this.cargarInscripcionesActuales();\n          this.cargarAsignaturasDisponibles();\n        },\n        error: err => {\n          this.error = err.message || 'Error al registrar la materia';\n          this.cargando = false;\n          console.error(err);\n        }\n      });\n    }).catch(err => {\n      this.error = 'Error al verificar conflictos de profesor';\n      this.cargando = false;\n      console.error(err);\n    });\n  }\n  verificarConflictoProfesor(nuevaAsignaturaId) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      // Si no hay registros actuales, no hay conflicto\n      if (_this.inscripcionesActuales.length === 0) {\n        return false;\n      }\n      try {\n        // Obtener la nueva materia\n        const nuevaAsignatura = yield firstValueFrom(_this.asignaturaServicio.obtenerAsignatura(nuevaAsignaturaId));\n        if (!nuevaAsignatura) return false;\n        // Obtener las materias actuales\n        const idsAsignaturasActuales = _this.inscripcionesActuales.map(reg => reg.asignaturaId);\n        const asignaturasActuales = yield firstValueFrom(_this.asignaturaServicio.obtenerAsignaturasPorIds(idsAsignaturasActuales));\n        if (!asignaturasActuales) return false;\n        // Verificar si hay conflicto de profesor\n        return asignaturasActuales.some(asignatura => asignatura.profesorId === nuevaAsignatura.profesorId);\n      } catch (error) {\n        console.error('Error al verificar conflicto de profesor:', error);\n        return false;\n      }\n    })();\n  }\n  desinscribirAsignatura(inscripcionId) {\n    if (!inscripcionId) {\n      this.error = 'ID de inscripción no válido';\n      return;\n    }\n    if (confirm('¿Estás seguro de que deseas eliminar esta materia?')) {\n      this.cargando = true;\n      this.error = '';\n      this.exito = '';\n      this.inscripcionServicio.desinscribirAsignatura(inscripcionId).subscribe({\n        next: () => {\n          this.exito = 'Materia eliminada correctamente';\n          this.cargando = false;\n          // Recargar los datos\n          this.cargarInscripcionesActuales();\n          this.cargarAsignaturasDisponibles();\n        },\n        error: err => {\n          this.error = 'Error al eliminar la materia';\n          this.cargando = false;\n          console.error(err);\n        }\n      });\n    }\n  }\n  // Método para abrir el modal de compañeros\n  abrirModalCompaneros(asignaturaId) {\n    if (!asignaturaId) {\n      this.error = 'Error: No se pudo identificar la materia seleccionada';\n      setTimeout(() => this.error = '', 3000); // Limpiar el mensaje después de 3 segundos\n      return;\n    }\n    this.asignaturaSeleccionadaId = asignaturaId;\n    try {\n      // Asegurarse de que Bootstrap esté disponible\n      if (typeof bootstrap === 'undefined') {\n        console.error('Bootstrap no está disponible');\n        this.error = 'Error al mostrar la ventana modal. Intente nuevamente.';\n        setTimeout(() => this.error = '', 3000);\n        return;\n      }\n      // Usar Bootstrap 5 para abrir el modal\n      const elementoModal = document.getElementById('modalCompaneros');\n      if (elementoModal) {\n        // Asegurarse de que cualquier modal previo se cierre\n        const modalExistente = bootstrap.Modal.getInstance(elementoModal);\n        if (modalExistente) {\n          modalExistente.dispose();\n        }\n        // Crear una nueva instancia del modal con opciones específicas\n        const opcionesModal = {\n          backdrop: 'static',\n          keyboard: true,\n          focus: true // Enfoca el modal cuando se abre\n        };\n\n        const instanciaModal = new bootstrap.Modal(elementoModal, opcionesModal);\n        // Asegurarse de que el modal esté visible\n        elementoModal.style.display = 'block';\n        elementoModal.style.zIndex = '1050';\n        instanciaModal.show();\n        // Verificar que el modal se haya abierto correctamente\n        setTimeout(() => {\n          if (elementoModal.classList.contains('show')) {\n            console.log('Modal mostrado correctamente');\n          } else {\n            console.error('El modal no se mostró correctamente');\n            this.error = 'Error al mostrar la lista de compañeros. Intente nuevamente.';\n            setTimeout(() => this.error = '', 3000);\n          }\n        }, 500);\n      } else {\n        console.error('No se encontró el elemento del modal con ID: classmatesModal');\n        this.error = 'Error al mostrar la lista de compañeros. Intente nuevamente.';\n        setTimeout(() => this.error = '', 3000);\n      }\n    } catch (e) {\n      console.error('Error al abrir el modal:', e);\n      this.error = 'Error al mostrar la lista de compañeros. Intente nuevamente.';\n      setTimeout(() => this.error = '', 3000);\n    }\n  }\n  static {\n    this.ɵfac = function RegistroMateriasComponente_Factory(t) {\n      return new (t || RegistroMateriasComponente)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.AsignaturaServicio), i0.ɵɵdirectiveInject(i3.InscripcionServicio), i0.ɵɵdirectiveInject(i4.AutenticacionServicio), i0.ɵɵdirectiveInject(i5.Router));\n    };\n  }\n  static {\n    this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: RegistroMateriasComponente,\n      selectors: [[\"app-registro-materias\"]],\n      decls: 55,\n      vars: 15,\n      consts: [[1, \"container\", \"mt-4\"], [1, \"row\"], [1, \"col-md-12\"], [\"class\", \"row\", 4, \"ngIf\"], [1, \"row\", \"mb-4\"], [1, \"card\"], [1, \"card-header\", \"bg-primary\", \"text-white\"], [1, \"card-body\"], [3, \"estudianteId\"], [\"class\", \"text-center mt-3\", 4, \"ngIf\"], [\"class\", \"table-responsive\", 4, \"ngIf\"], [1, \"card-header\", \"bg-success\", \"text-white\"], [3, \"formGroup\", \"ngSubmit\"], [1, \"mb-3\"], [\"for\", \"asignaturaId\", 1, \"form-label\"], [\"id\", \"asignaturaId\", \"formControlName\", \"asignaturaId\", 1, \"form-select\"], [\"value\", \"\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [\"class\", \"invalid-feedback\", 4, \"ngIf\"], [1, \"d-grid\", \"gap-2\"], [\"type\", \"submit\", 1, \"btn\", \"btn-success\", 3, \"disabled\"], [1, \"bi\", \"bi-plus-circle\"], [\"class\", \"alert alert-warning mt-3\", 4, \"ngIf\"], [\"id\", \"modalCompaneros\", \"tabindex\", \"-1\", \"aria-labelledby\", \"modalCompanerosLabel\", \"aria-hidden\", \"true\", \"data-testid\", \"classmates-modal\", 1, \"modal\", \"fade\"], [1, \"modal-dialog\", \"modal-dialog-centered\", \"modal-lg\"], [1, \"modal-content\", \"shadow\"], [1, \"modal-header\", \"bg-primary\", \"text-white\"], [\"id\", \"modalCompanerosLabel\", 1, \"modal-title\"], [1, \"bi\", \"bi-people-fill\", \"me-2\"], [\"type\", \"button\", \"data-bs-dismiss\", \"modal\", \"aria-label\", \"Close\", 1, \"btn-close\", \"btn-close-white\"], [1, \"modal-body\", \"p-4\"], [\"class\", \"alert alert-warning\", 4, \"ngIf\"], [3, \"asignaturaId\", \"estudianteActualId\", 4, \"ngIf\"], [1, \"modal-footer\"], [\"type\", \"button\", \"data-bs-dismiss\", \"modal\", 1, \"btn\", \"btn-secondary\"], [1, \"bi\", \"bi-x-circle\", \"me-1\"], [1, \"col-md-12\", \"text-center\"], [\"role\", \"status\", 1, \"spinner-border\", \"text-primary\"], [1, \"visually-hidden\"], [1, \"alert\", \"alert-danger\"], [1, \"alert\", \"alert-success\"], [1, \"text-center\", \"mt-3\"], [1, \"table-responsive\"], [1, \"table\", \"table-striped\"], [4, \"ngFor\", \"ngForOf\"], [\"data-testid\", \"ver-companeros-btn\", 1, \"btn\", \"btn-sm\", \"btn-info\", \"me-2\", 3, \"id\", \"click\"], [1, \"bi\", \"bi-people\"], [1, \"btn\", \"btn-sm\", \"btn-danger\", 3, \"click\"], [1, \"bi\", \"bi-trash\"], [3, \"value\"], [1, \"invalid-feedback\"], [1, \"alert\", \"alert-warning\", \"mt-3\"], [1, \"alert\", \"alert-warning\"], [3, \"asignaturaId\", \"estudianteActualId\"]],\n      template: function RegistroMateriasComponente_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"div\", 2)(3, \"h2\");\n          i0.ɵɵtext(4, \"Registro de Materias\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(5, \"hr\");\n          i0.ɵɵelementEnd()();\n          i0.ɵɵtemplate(6, RegistroMateriasComponente_div_6_Template, 5, 0, \"div\", 3);\n          i0.ɵɵtemplate(7, RegistroMateriasComponente_div_7_Template, 4, 1, \"div\", 3);\n          i0.ɵɵtemplate(8, RegistroMateriasComponente_div_8_Template, 4, 1, \"div\", 3);\n          i0.ɵɵelementStart(9, \"div\", 4)(10, \"div\", 2)(11, \"div\", 5)(12, \"div\", 6)(13, \"h4\");\n          i0.ɵɵtext(14, \"Mis Materias Registradas\");\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(15, \"div\", 7);\n          i0.ɵɵelement(16, \"app-creditos-estudiante\", 8);\n          i0.ɵɵtemplate(17, RegistroMateriasComponente_div_17_Template, 3, 0, \"div\", 9);\n          i0.ɵɵtemplate(18, RegistroMateriasComponente_div_18_Template, 14, 1, \"div\", 10);\n          i0.ɵɵelementEnd()()()();\n          i0.ɵɵelementStart(19, \"div\", 1)(20, \"div\", 2)(21, \"div\", 5)(22, \"div\", 11)(23, \"h4\");\n          i0.ɵɵtext(24, \"Registrar Nueva Materia\");\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(25, \"div\", 7)(26, \"form\", 12);\n          i0.ɵɵlistener(\"ngSubmit\", function RegistroMateriasComponente_Template_form_ngSubmit_26_listener() {\n            return ctx.onSubmit();\n          });\n          i0.ɵɵelementStart(27, \"div\", 13)(28, \"label\", 14);\n          i0.ɵɵtext(29, \"Selecciona una Materia\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(30, \"select\", 15)(31, \"option\", 16);\n          i0.ɵɵtext(32, \"-- Selecciona una materia --\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵtemplate(33, RegistroMateriasComponente_option_33_Template, 2, 4, \"option\", 17);\n          i0.ɵɵelementEnd();\n          i0.ɵɵtemplate(34, RegistroMateriasComponente_div_34_Template, 2, 0, \"div\", 18);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(35, \"div\", 19)(36, \"button\", 20);\n          i0.ɵɵelement(37, \"i\", 21);\n          i0.ɵɵtext(38, \" Registrar Materia \");\n          i0.ɵɵelementEnd()();\n          i0.ɵɵtemplate(39, RegistroMateriasComponente_div_39_Template, 2, 1, \"div\", 22);\n          i0.ɵɵelementEnd()()()()()();\n          i0.ɵɵelementStart(40, \"div\", 23)(41, \"div\", 24)(42, \"div\", 25)(43, \"div\", 26)(44, \"h5\", 27);\n          i0.ɵɵelement(45, \"i\", 28);\n          i0.ɵɵtext(46, \"Compa\\u00F1eros de Clase \");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(47, \"button\", 29);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(48, \"div\", 30);\n          i0.ɵɵtemplate(49, RegistroMateriasComponente_div_49_Template, 2, 0, \"div\", 31);\n          i0.ɵɵtemplate(50, RegistroMateriasComponente_app_companeros_50_Template, 1, 2, \"app-companeros\", 32);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(51, \"div\", 33)(52, \"button\", 34);\n          i0.ɵɵelement(53, \"i\", 35);\n          i0.ɵɵtext(54, \"Cerrar \");\n          i0.ɵɵelementEnd()()()()();\n        }\n        if (rf & 2) {\n          let tmp_7_0;\n          let tmp_9_0;\n          i0.ɵɵadvance(6);\n          i0.ɵɵproperty(\"ngIf\", ctx.cargando);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", ctx.error);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", ctx.exito);\n          i0.ɵɵadvance(8);\n          i0.ɵɵproperty(\"estudianteId\", ctx.estudianteId);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", ctx.inscripcionesActuales.length === 0);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", ctx.inscripcionesActuales.length > 0);\n          i0.ɵɵadvance(8);\n          i0.ɵɵproperty(\"formGroup\", ctx.formularioInscripcion);\n          i0.ɵɵadvance(4);\n          i0.ɵɵclassProp(\"is-invalid\", ((tmp_7_0 = ctx.formularioInscripcion.get(\"asignaturaId\")) == null ? null : tmp_7_0.invalid) && ((tmp_7_0 = ctx.formularioInscripcion.get(\"asignaturaId\")) == null ? null : tmp_7_0.touched));\n          i0.ɵɵadvance(3);\n          i0.ɵɵproperty(\"ngForOf\", ctx.asignaturasDisponibles);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", ((tmp_9_0 = ctx.formularioInscripcion.get(\"asignaturaId\")) == null ? null : tmp_9_0.invalid) && ((tmp_9_0 = ctx.formularioInscripcion.get(\"asignaturaId\")) == null ? null : tmp_9_0.touched));\n          i0.ɵɵadvance(2);\n          i0.ɵɵproperty(\"disabled\", ctx.formularioInscripcion.invalid || ctx.cargando || ctx.inscripcionesActuales.length >= ctx.maxAsignaturas);\n          i0.ɵɵadvance(3);\n          i0.ɵɵproperty(\"ngIf\", ctx.inscripcionesActuales.length >= ctx.maxAsignaturas);\n          i0.ɵɵadvance(10);\n          i0.ɵɵproperty(\"ngIf\", !ctx.asignaturaSeleccionadaId);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", ctx.asignaturaSeleccionadaId);\n        }\n      },\n      dependencies: [i6.NgForOf, i6.NgIf, i1.ɵNgNoValidate, i1.NgSelectOption, i1.ɵNgSelectMultipleOption, i1.SelectControlValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.FormGroupDirective, i1.FormControlName, i7.CompanerosComponente, i8.CreditosEstudianteComponente],\n      styles: [\".card[_ngcontent-%COMP%] {\\n  margin-bottom: 20px;\\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\\n}\\n\\n.card-header[_ngcontent-%COMP%] {\\n  font-weight: 500;\\n}\\n\\n.list-group-item[_ngcontent-%COMP%] {\\n  transition: background-color 0.2s;\\n}\\n\\n.list-group-item[_ngcontent-%COMP%]:hover {\\n  background-color: #f8f9fa;\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvY29tcG9uZW50ZXMvZXN0dWRpYW50ZXMvcmVnaXN0cm8tbWF0ZXJpYXMvcmVnaXN0cm8tbWF0ZXJpYXMuY29tcG9uZW50ZS5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDRSxtQkFBbUI7RUFDbkIsd0NBQXdDO0FBQzFDOztBQUVBO0VBQ0UsZ0JBQWdCO0FBQ2xCOztBQUVBO0VBQ0UsaUNBQWlDO0FBQ25DOztBQUVBO0VBQ0UseUJBQXlCO0FBQzNCIiwic291cmNlc0NvbnRlbnQiOlsiLmNhcmQge1xuICBtYXJnaW4tYm90dG9tOiAyMHB4O1xuICBib3gtc2hhZG93OiAwIDJweCA0cHggcmdiYSgwLCAwLCAwLCAwLjEpO1xufVxuXG4uY2FyZC1oZWFkZXIge1xuICBmb250LXdlaWdodDogNTAwO1xufVxuXG4ubGlzdC1ncm91cC1pdGVtIHtcbiAgdHJhbnNpdGlvbjogYmFja2dyb3VuZC1jb2xvciAwLjJzO1xufVxuXG4ubGlzdC1ncm91cC1pdGVtOmhvdmVyIHtcbiAgYmFja2dyb3VuZC1jb2xvcjogI2Y4ZjlmYTtcbn0iXSwic291cmNlUm9vdCI6IiJ9 */\"]\n    });\n  }\n}","map":{"version":3,"mappings":"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","names":["Validators","firstValueFrom","i0","RegistroMateriasComponente","constructor","formBuilder","asignaturaServicio","inscripcionServicio","autenticacionServicio","router","ngOnInit","iniciarFormulario","obtenerIdEstudianteActual","formularioInscripcion","group","asignaturaId","required","cargando","usuario","obtenerValorUsuarioActual","console","log","error","studentId","role","obtenerPerfilUsuario","id","subscribe","next","perfil","estudianteId","cargarInscripcionesActuales","cargarAsignaturasDisponibles","err","message","obtenerInscripcionesEstudiante","inscripciones","inscripcionesActuales","obtenerAsignaturasEstudiante","asignaturas","obtenerAsignaturas","idsAsignaturasRegistradas","map","reg","asignaturasDisponibles","filter","asignatura","includes","onSubmit","invalid","exito","value","length","maxAsignaturas","asignaturaSeleccionada","find","a","creditosActuales","reduce","total","creditos","nuevoTotalCreditos","verificarConflictoProfesor","then","tieneConflicto","solicitudInscripcion","nombreEstudiante","name","nombreAsignatura","nombre","inscribirAsignatura","inscripcion","reset","catch","nuevaAsignaturaId","nuevaAsignatura","obtenerAsignatura","idsAsignaturasActuales","asignaturasActuales","obtenerAsignaturasPorIds","some","profesorId","desinscribirAsignatura","inscripcionId","confirm","abrirModalCompaneros","setTimeout","asignaturaSeleccionadaId","bootstrap","elementoModal","document","getElementById","modalExistente","Modal","getInstance","dispose","opcionesModal","backdrop","keyboard","focus","instanciaModal","style","display","zIndex","show","classList","contains","e","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["C:\\Users\\hansk\\Videos\\frontendsistemacolegio.interrapidisi\\frontendsistemacolegio.interrapidisi\\src\\app\\componentes\\estudiantes\\registro-materias\\registro-materias.componente.ts","C:\\Users\\hansk\\Videos\\frontendsistemacolegio.interrapidisi\\frontendsistemacolegio.interrapidisi\\src\\app\\componentes\\estudiantes\\registro-materias\\registro-materias.componente.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { Asignatura } from '../../../modelos/asignatura.modelo';\nimport { Inscripcion, SolicitudInscripcion } from '../../../modelos/inscripcion.modelo';\nimport { AsignaturaServicio } from '../../../servicios/asignatura.servicio';\nimport { InscripcionServicio } from '../../../servicios/inscripcion.servicio';\nimport { AutenticacionServicio } from '../../../servicios/autenticacion.servicio';\nimport { Router } from '@angular/router';\nimport { firstValueFrom } from 'rxjs';\n\n// Declaración para el objeto bootstrap global\ndeclare var bootstrap: any;\n\n@Component({\n  selector: 'app-registro-materias',\n  templateUrl: './registro-materias.componente.html',\n  styleUrls: ['./registro-materias.componente.css']\n})\nexport class RegistroMateriasComponente implements OnInit {\n  formularioInscripcion!: FormGroup;\n  asignaturasDisponibles: Asignatura[] = [];\n  inscripcionesActuales: Inscripcion[] = [];\n  asignaturas: Asignatura[] = []; // Para el cálculo de créditos\n  cargando = false;\n  error = '';\n  exito = '';\n  estudianteId: number = 0;\n  maxAsignaturas = 3;\n  asignaturaSeleccionadaId: number | null = null; // Para el modal de compañeros\n\n  constructor(\n    private formBuilder: FormBuilder,\n    private asignaturaServicio: AsignaturaServicio,\n    private inscripcionServicio: InscripcionServicio,\n    private autenticacionServicio: AutenticacionServicio,\n    private router: Router\n  ) {}\n\n  ngOnInit(): void {\n    this.iniciarFormulario();\n    this.obtenerIdEstudianteActual();\n  }\n\n  iniciarFormulario(): void {\n    this.formularioInscripcion = this.formBuilder.group({\n      asignaturaId: ['', [Validators.required]]\n    });\n  }\n\n  obtenerIdEstudianteActual(): void {\n    this.cargando = true;\n    const usuario = this.autenticacionServicio.obtenerValorUsuarioActual();\n    console.log('Usuario autenticado:', usuario);\n    \n    if (!usuario) {\n      this.error = 'No se pudo obtener la información del usuario. Por favor, inicie sesión nuevamente.';\n      this.cargando = false;\n      return;\n    }\n    \n    console.log('ID de estudiante:', usuario.studentId);\n    \n    if (usuario.role !== 'student') {\n      this.error = 'Esta página es solo para estudiantes.';\n      this.cargando = false;\n      return;\n    }\n    \n    if (!usuario.studentId) {\n      // Si el usuario es estudiante pero no tiene studentId, intentamos obtenerlo del perfil\n      this.autenticacionServicio.obtenerPerfilUsuario(usuario.id).subscribe({\n        next: (perfil) => {\n          console.log('Perfil obtenido:', perfil);\n          if (perfil.studentId) {\n            this.estudianteId = perfil.studentId;\n            this.cargarInscripcionesActuales();\n            this.cargarAsignaturasDisponibles();\n          } else {\n            this.error = 'No se pudo identificar al estudiante. Por favor, contacte al administrador.';\n            this.cargando = false;\n          }\n        },\n        error: (err) => {\n          console.error('Error al obtener perfil:', err);\n          this.error = 'Error al obtener información del estudiante: ' + err.message;\n          this.cargando = false;\n        }\n      });\n    } else {\n      this.estudianteId = usuario.studentId;\n      this.cargarInscripcionesActuales();\n      this.cargarAsignaturasDisponibles();\n    }\n  }\n\n  cargarInscripcionesActuales(): void {\n    this.inscripcionServicio.obtenerInscripcionesEstudiante(this.estudianteId).subscribe({\n      next: (inscripciones) => {\n        this.inscripcionesActuales = inscripciones;\n        console.log('Inscripciones actuales cargadas:', this.inscripcionesActuales);\n        \n        // Cargar las asignaturas del estudiante para el cu00e1lculo de cru00e9ditos\n        this.asignaturaServicio.obtenerAsignaturasEstudiante(this.estudianteId).subscribe({\n          next: (asignaturas) => {\n            this.asignaturas = asignaturas;\n            console.log('Asignaturas del estudiante cargadas:', this.asignaturas);\n            this.cargando = false;\n          },\n          error: (err) => {\n            this.error = 'Error al cargar asignaturas del estudiante';\n            this.cargando = false;\n            console.error(err);\n          }\n        });\n      },\n      error: (err) => {\n        this.error = 'Error al cargar inscripciones actuales';\n        this.cargando = false;\n        console.error(err);\n      }\n    });\n  }\n\n  cargarAsignaturasDisponibles(): void {\n    this.asignaturaServicio.obtenerAsignaturas().subscribe({\n      next: (asignaturas) => {\n        // Filtrar materias ya registradas\n        const idsAsignaturasRegistradas = this.inscripcionesActuales.map(reg => reg.asignaturaId);\n        this.asignaturasDisponibles = asignaturas.filter(asignatura => !idsAsignaturasRegistradas.includes(asignatura.id));\n       console.log('Asignaturas disponibles:', this.asignaturasDisponibles);\n        this.cargando = false;\n      },\n      error: (err) => {\n        this.error = 'Error al cargar asignaturas disponibles';\n        this.cargando = false;\n        console.error(err);\n      }\n    });\n  }\n\n  onSubmit(): void {\n    if (this.formularioInscripcion.invalid) {\n      return;\n    }\n\n    this.cargando = true;\n    this.error = '';\n    this.exito = '';\n\n    const asignaturaId = this.formularioInscripcion.value.asignaturaId;\n    console.log('Procesando inscripción de asignatura:', asignaturaId); \n    // Verificar si ya tiene el máximo de materias\n    if (this.inscripcionesActuales.length >= this.maxAsignaturas) {\n      this.error = `No puedes registrar más de ${this.maxAsignaturas} materias`;\n      this.cargando = false;\n      return;\n    }\n\n    // Obtener la asignatura seleccionada para verificar sus créditos\n    console.log('Obteniendo asignatura seleccionada para verificar créditos',asignaturaId);\n    const asignaturaSeleccionada = this.asignaturasDisponibles.find(a => a.id === asignaturaId);\n   console.log('Verificando asignatura seleccionada:', asignaturaSeleccionada);\n    console.log('Asignatura seleccionada:', this.asignaturasDisponibles.find(a => a.id === asignaturaId));\n    if (!asignaturaSeleccionada) {\n      this.error = 'No se pudo encontrar la información de la materia seleccionada';\n      this.cargando = false;\n      return;\n    }\n\n    // Calcular el total de créditos actuales\n    const creditosActuales = this.asignaturas.reduce((total, asignatura) => total + asignatura.creditos, 0);\n    const nuevoTotalCreditos = creditosActuales + asignaturaSeleccionada.creditos;\n\n    // Verificar si supera el límite de 9 créditos\n    if (nuevoTotalCreditos > 9) {\n      this.error = `No puedes registrar esta materia porque superarías el límite de 9 créditos. Actualmente tienes ${creditosActuales} créditos y esta materia tiene ${asignaturaSeleccionada.creditos} créditos.`;\n      this.cargando = false;\n      return;\n    }\n\n    // Verificar si ya tiene una materia con el mismo profesor\n    this.verificarConflictoProfesor(asignaturaId).then(tieneConflicto => {\n      if (tieneConflicto) {\n        this.error = 'No puedes tener más de una materia con el mismo profesor';\n        this.cargando = false;\n        return;\n      }\n\n      // Proceder con el registro\n      const solicitudInscripcion: SolicitudInscripcion = {\n        estudianteId: this.estudianteId,\n        asignaturaId: asignaturaId,\n        nombreEstudiante: this.autenticacionServicio.obtenerValorUsuarioActual()?.name || '',\n        nombreAsignatura: asignaturaSeleccionada?.nombre || ''\n      };\n\n      this.inscripcionServicio.inscribirAsignatura(solicitudInscripcion).subscribe({\n        next: (inscripcion) => {\n          this.exito = 'Materia registrada correctamente';\n          this.cargando = false;\n          this.formularioInscripcion.reset();\n          // Recargar los datos\n          this.cargarInscripcionesActuales();\n          this.cargarAsignaturasDisponibles();\n        },\n        error: (err) => {\n          this.error = err.message || 'Error al registrar la materia';\n          this.cargando = false;\n          console.error(err);\n        }\n      });\n    }).catch(err => {\n      this.error = 'Error al verificar conflictos de profesor';\n      this.cargando = false;\n      console.error(err);\n    });\n  }\n\n  async verificarConflictoProfesor(nuevaAsignaturaId: number): Promise<boolean> {\n    // Si no hay registros actuales, no hay conflicto\n    if (this.inscripcionesActuales.length === 0) {\n      return false;\n    }\n\n    try {\n      // Obtener la nueva materia\n      const nuevaAsignatura = await firstValueFrom(this.asignaturaServicio.obtenerAsignatura(nuevaAsignaturaId));\n      if (!nuevaAsignatura) return false;\n\n      // Obtener las materias actuales\n      const idsAsignaturasActuales = this.inscripcionesActuales.map(reg => reg.asignaturaId);\n      const asignaturasActuales = await firstValueFrom(this.asignaturaServicio.obtenerAsignaturasPorIds(idsAsignaturasActuales));\n      if (!asignaturasActuales) return false;\n\n      // Verificar si hay conflicto de profesor\n      return asignaturasActuales.some(asignatura => asignatura.profesorId === nuevaAsignatura.profesorId);\n    } catch (error) {\n      console.error('Error al verificar conflicto de profesor:', error);\n      return false;\n    }\n  }\n\n  desinscribirAsignatura(inscripcionId: number | undefined): void {\n    if (!inscripcionId) {\n      this.error = 'ID de inscripción no válido';\n      return;\n    }\n    \n    if (confirm('¿Estás seguro de que deseas eliminar esta materia?')) {\n      this.cargando = true;\n      this.error = '';\n      this.exito = '';\n\n      this.inscripcionServicio.desinscribirAsignatura(inscripcionId).subscribe({\n        next: () => {\n          this.exito = 'Materia eliminada correctamente';\n          this.cargando = false;\n          // Recargar los datos\n          this.cargarInscripcionesActuales();\n          this.cargarAsignaturasDisponibles();\n        },\n        error: (err) => {\n          this.error = 'Error al eliminar la materia';\n          this.cargando = false;\n          console.error(err);\n        }\n      });\n    }\n  }\n\n  // Método para abrir el modal de compañeros\n  abrirModalCompaneros(asignaturaId: number): void {\n    if (!asignaturaId) {\n      this.error = 'Error: No se pudo identificar la materia seleccionada';\n      setTimeout(() => this.error = '', 3000); // Limpiar el mensaje después de 3 segundos\n      return;\n    }\n    \n    this.asignaturaSeleccionadaId = asignaturaId;\n    \n    try {\n      // Asegurarse de que Bootstrap esté disponible\n      if (typeof bootstrap === 'undefined') {\n        console.error('Bootstrap no está disponible');\n        this.error = 'Error al mostrar la ventana modal. Intente nuevamente.';\n        setTimeout(() => this.error = '', 3000);\n        return;\n      }\n      \n      // Usar Bootstrap 5 para abrir el modal\n      const elementoModal: HTMLElement | null = document.getElementById('modalCompaneros');\n      if (elementoModal) {\n        // Asegurarse de que cualquier modal previo se cierre\n        const modalExistente = bootstrap.Modal.getInstance(elementoModal);\n        if (modalExistente) {\n          modalExistente.dispose();\n        }\n        \n        // Crear una nueva instancia del modal con opciones específicas\n        const opcionesModal = {\n          backdrop: 'static',  // El modal no se cierra al hacer clic fuera\n          keyboard: true,     // Se puede cerrar con la tecla ESC\n          focus: true         // Enfoca el modal cuando se abre\n        };\n        \n        const instanciaModal = new bootstrap.Modal(elementoModal, opcionesModal);\n        \n        // Asegurarse de que el modal esté visible\n        elementoModal.style.display = 'block';\n        elementoModal.style.zIndex = '1050';\n        \n        instanciaModal.show();\n        \n        // Verificar que el modal se haya abierto correctamente\n        setTimeout(() => {\n          if (elementoModal.classList.contains('show')) {\n            console.log('Modal mostrado correctamente');\n          } else {\n            console.error('El modal no se mostró correctamente');\n            this.error = 'Error al mostrar la lista de compañeros. Intente nuevamente.';\n            setTimeout(() => this.error = '', 3000);\n          }\n        }, 500);\n      } else {\n        console.error('No se encontró el elemento del modal con ID: classmatesModal');\n        this.error = 'Error al mostrar la lista de compañeros. Intente nuevamente.';\n        setTimeout(() => this.error = '', 3000);\n      }\n    } catch (e) {\n      console.error('Error al abrir el modal:', e);\n      this.error = 'Error al mostrar la lista de compañeros. Intente nuevamente.';\n      setTimeout(() => this.error = '', 3000);\n    }\n  }\n}","<div class=\"container mt-4\">\n  <div class=\"row\">\n    <div class=\"col-md-12\">\n      <h2>Registro de Materias</h2>\n      <hr>\n    </div>\n  </div>\n\n  <div class=\"row\" *ngIf=\"cargando\">\n    <div class=\"col-md-12 text-center\">\n      <div class=\"spinner-border text-primary\" role=\"status\">\n        <span class=\"visually-hidden\">Cargando...</span>\n      </div>\n    </div>\n  </div>\n\n  <div class=\"row\" *ngIf=\"error\">\n    <div class=\"col-md-12\">\n      <div class=\"alert alert-danger\">\n        {{ error }}\n      </div>\n    </div>\n  </div>\n\n  <div class=\"row\" *ngIf=\"exito\">\n    <div class=\"col-md-12\">\n      <div class=\"alert alert-success\">\n        {{ exito }}\n      </div>\n    </div>\n  </div>\n\n  <!-- Materias Actuales -->\n  <div class=\"row mb-4\">\n    <div class=\"col-md-12\">\n      <div class=\"card\">\n        <div class=\"card-header bg-primary text-white\">\n          <h4>Mis Materias Registradas</h4>\n        </div>\n        <div class=\"card-body\">\n          <app-creditos-estudiante [estudianteId]=\"estudianteId\"></app-creditos-estudiante>\n          \n          <div *ngIf=\"inscripcionesActuales.length === 0\" class=\"text-center mt-3\">\n            <p>No tienes materias registradas.</p>\n          </div>\n          \n          <div *ngIf=\"inscripcionesActuales.length > 0\" class=\"table-responsive\">\n            <table class=\"table table-striped\">\n              <thead>\n                <tr>\n                  <th>Materia</th>\n                  <th>Profesor</th>\n                  <th>Créditos</th>\n                  <th>Acciones</th>\n                </tr>\n              </thead>\n              <tbody>\n                <tr *ngFor=\"let inscripcion of inscripcionesActuales\">\n                  <td>{{ inscripcion.asignatura?.nombre }}</td>\n                  <td>{{ inscripcion.asignatura?.profesor?.nombre  }}</td>\n                  <td>{{ inscripcion.asignatura?.creditos }}</td>\n                  <td>\n                    <button class=\"btn btn-sm btn-info me-2\" (click)=\"abrirModalCompaneros(inscripcion.asignaturaId)\" id=\"btnVerCompaneros-{{inscripcion.asignaturaId}}\" data-testid=\"ver-companeros-btn\">\n                      <i class=\"bi bi-people\"></i> Ver Compañeros\n                    </button>\n                    <button class=\"btn btn-sm btn-danger\" (click)=\"desinscribirAsignatura(inscripcion.id)\">\n                      <i class=\"bi bi-trash\"></i> Eliminar\n                    </button>\n                  </td>\n                </tr>\n              </tbody>\n            </table>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n\n  <!-- Formulario de Registro -->\n  <div class=\"row\">\n    <div class=\"col-md-12\">\n      <div class=\"card\">\n        <div class=\"card-header bg-success text-white\">\n          <h4>Registrar Nueva Materia</h4>\n        </div>\n        <div class=\"card-body\">\n          <form [formGroup]=\"formularioInscripcion\" (ngSubmit)=\"onSubmit()\">\n            <div class=\"mb-3\">\n              <label for=\"asignaturaId\" class=\"form-label\">Selecciona una Materia</label>\n              <select id=\"asignaturaId\" formControlName=\"asignaturaId\" class=\"form-select\" \n                      [class.is-invalid]=\"formularioInscripcion.get('asignaturaId')?.invalid && formularioInscripcion.get('asignaturaId')?.touched\">\n                <option value=\"\">-- Selecciona una materia --</option>\n                <option *ngFor=\"let asignatura of asignaturasDisponibles\" [value]=\"asignatura.id\">\n                  {{ asignatura.nombre }} - Prof. {{ asignatura.profesor?.nombre }} ({{ asignatura.creditos }} créditos)\n                </option>\n              </select>\n              <div *ngIf=\"formularioInscripcion.get('asignaturaId')?.invalid && formularioInscripcion.get('asignaturaId')?.touched\" class=\"invalid-feedback\">\n                Debes seleccionar una materia.\n              </div>\n            </div>\n            \n            <div class=\"d-grid gap-2\">\n              <button type=\"submit\" class=\"btn btn-success\" [disabled]=\"formularioInscripcion.invalid || cargando || inscripcionesActuales.length >= maxAsignaturas\">\n                <i class=\"bi bi-plus-circle\"></i> Registrar Materia\n              </button>\n            </div>\n            \n            <div *ngIf=\"inscripcionesActuales.length >= maxAsignaturas\" class=\"alert alert-warning mt-3\">\n              Has alcanzado el límite máximo de {{ maxAsignaturas }} materias.\n            </div>\n          </form>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n\n<!-- Modal para mostrar compañeros -->\n<div class=\"modal fade\" id=\"modalCompaneros\" tabindex=\"-1\" aria-labelledby=\"modalCompanerosLabel\" aria-hidden=\"true\" data-testid=\"classmates-modal\">\n  <div class=\"modal-dialog modal-dialog-centered modal-lg\">\n    <div class=\"modal-content shadow\">\n      <div class=\"modal-header bg-primary text-white\">\n        <h5 class=\"modal-title\" id=\"modalCompanerosLabel\">\n          <i class=\"bi bi-people-fill me-2\"></i>Compañeros de Clase\n        </h5>\n        <button type=\"button\" class=\"btn-close btn-close-white\" data-bs-dismiss=\"modal\" aria-label=\"Close\"></button>\n      </div>\n      <div class=\"modal-body p-4\">\n        <div *ngIf=\"!asignaturaSeleccionadaId\" class=\"alert alert-warning\">\n          No se ha seleccionado ninguna materia.\n        </div>\n        <app-companeros *ngIf=\"asignaturaSeleccionadaId\" [asignaturaId]=\"asignaturaSeleccionadaId\" [estudianteActualId]=\"estudianteId\"></app-companeros>\n      </div>\n      <div class=\"modal-footer\">\n        <button type=\"button\" class=\"btn btn-secondary\" data-bs-dismiss=\"modal\">\n          <i class=\"bi bi-x-circle me-1\"></i>Cerrar\n        </button>\n      </div>\n    </div>\n  </div>\n</div>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}