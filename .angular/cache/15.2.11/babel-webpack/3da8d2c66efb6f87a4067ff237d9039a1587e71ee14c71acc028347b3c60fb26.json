{"ast":null,"code":"\"use strict\";\n\n// Componente comentado tras migración a español\n/*\r\nimport { Component, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { Router, ActivatedRoute } from '@angular/router';\r\nimport { AuthService } from '../../services/auth.service';\r\n\r\n@Component({\r\n  selector: 'app-login',\r\n  templateUrl: './login.component.html',\r\n  styleUrls: ['./login.component.css']\r\n})\r\nexport class LoginComponent implements OnInit {\r\n  loginForm!: FormGroup;\r\n  isLoading = false;\r\n  error: string | null = null;\r\n  returnUrl: string = '/';\r\n  accessDenied = false;\r\n\r\n  constructor(\r\n    private formBuilder: FormBuilder,\r\n    private authService: AuthService,\r\n    private router: Router,\r\n    private route: ActivatedRoute\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    this.loginForm = this.formBuilder.group({\r\n      email: ['', [Validators.required, Validators.email]],\r\n      password: ['', [Validators.required, Validators.minLength(6)]]\r\n    });\r\n\r\n    // Get return url from route parameters or default to '/'\r\n    this.returnUrl = this.route.snapshot.queryParams['returnUrl'] || '/';\r\n    this.accessDenied = !!this.route.snapshot.queryParams['accessDenied'];\r\n    \r\n    if (this.accessDenied) {\r\n      this.error = 'Acceso denegado. No tiene permisos para acceder a esta página.';\r\n    }\r\n    \r\n    // Auto redirect if already logged in\r\n    if (this.authService.isAuthenticated()) {\r\n      this.router.navigate([this.returnUrl]);\r\n    }\r\n  }\r\n\r\n  onSubmit(): void {\r\n    if (this.loginForm.invalid) {\r\n      return;\r\n    }\r\n\r\n    this.isLoading = true;\r\n    this.error = null;\r\n\r\n    this.authService.login(this.loginForm.value).subscribe({\r\n      next: () => {\r\n        this.isLoading = false;\r\n        this.router.navigate([this.returnUrl]);\r\n      },\r\n      error: (errorMessage) => {\r\n        this.isLoading = false;\r\n        this.error = errorMessage;\r\n      }\r\n    });\r\n  }\r\n}\r\n*/","map":{"version":3,"mappings":";;AAAA;AACA","names":[],"sourceRoot":"","sources":["C:\\Users\\hansk\\Videos\\frontendsistemacolegio.interrapidisi\\frontendsistemacolegio.interrapidisi\\src\\app\\components\\auth\\login.component.ts"],"sourcesContent":["// Componente comentado tras migración a español\n/*\nimport { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { AuthService } from '../../services/auth.service';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})\nexport class LoginComponent implements OnInit {\n  loginForm!: FormGroup;\n  isLoading = false;\n  error: string | null = null;\n  returnUrl: string = '/';\n  accessDenied = false;\n\n  constructor(\n    private formBuilder: FormBuilder,\n    private authService: AuthService,\n    private router: Router,\n    private route: ActivatedRoute\n  ) {}\n\n  ngOnInit(): void {\n    this.loginForm = this.formBuilder.group({\n      email: ['', [Validators.required, Validators.email]],\n      password: ['', [Validators.required, Validators.minLength(6)]]\n    });\n\n    // Get return url from route parameters or default to '/'\n    this.returnUrl = this.route.snapshot.queryParams['returnUrl'] || '/';\n    this.accessDenied = !!this.route.snapshot.queryParams['accessDenied'];\n    \n    if (this.accessDenied) {\n      this.error = 'Acceso denegado. No tiene permisos para acceder a esta página.';\n    }\n    \n    // Auto redirect if already logged in\n    if (this.authService.isAuthenticated()) {\n      this.router.navigate([this.returnUrl]);\n    }\n  }\n\n  onSubmit(): void {\n    if (this.loginForm.invalid) {\n      return;\n    }\n\n    this.isLoading = true;\n    this.error = null;\n\n    this.authService.login(this.loginForm.value).subscribe({\n      next: () => {\n        this.isLoading = false;\n        this.router.navigate([this.returnUrl]);\n      },\n      error: (errorMessage) => {\n        this.isLoading = false;\n        this.error = errorMessage;\n      }\n    });\n  }\n}\n*/"]},"metadata":{},"sourceType":"script","externalDependencies":[]}