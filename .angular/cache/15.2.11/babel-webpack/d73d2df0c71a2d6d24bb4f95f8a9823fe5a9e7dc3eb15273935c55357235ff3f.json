{"ast":null,"code":"import { throwError } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport { environment } from '../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class SubjectService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = `${environment.apiUrl}/Materias`;\n    this.registrosUrl = `${environment.apiUrl}/Registros`;\n  }\n  // Funciu00f3n auxiliar para crear un objeto Professor compatible\n  createProfessorObject(id, name) {\n    const [nombre, apellido] = name.split(' ').length > 1 ? [name.split(' ')[0], name.split(' ').slice(1).join(' ')] : [name, ''];\n    return {\n      id: id,\n      nombre: nombre,\n      apellido: apellido,\n      email: '',\n      departamento: '',\n      name: name // Mantener compatibilidad\n    };\n  }\n\n  getStudentSubjects(studentId) {\n    return this.http.get(`${this.apiUrl}/estudiante/${studentId}`).pipe(map(response => {\n      if (response && response.exito && response.data) {\n        return response.data.map(item => ({\n          id: item.id,\n          name: item.nombre,\n          code: item.codigo,\n          credits: item.creditos,\n          professorId: item.profesorId || 0,\n          professor: item.nombreProfesor ? this.createProfessorObject(item.profesorId, item.nombreProfesor) : undefined\n        }));\n      }\n      return [];\n    }), catchError(this.handleError));\n  }\n  getSubjects(isProfessor = false) {\n    // Si es profesor, usar el endpoint seguro\n    if (isProfessor) {\n      return this.http.get(`${this.apiUrl}/profesor-materias`).pipe(map(response => {\n        if (response && response.exito && response.data && response.data.materias) {\n          return response.data.materias.map(item => ({\n            id: item.id,\n            name: item.nombre,\n            code: item.codigo,\n            credits: item.creditos,\n            professorId: item.profesorId || 0,\n            professor: item.nombreProfesor ? this.createProfessorObject(item.profesorId, item.nombreProfesor) : undefined\n          }));\n        }\n        return [];\n      }), catchError(this.handleError));\n    }\n    // Admin y otros roles usan el endpoint clásico\n    return this.http.get(this.apiUrl).pipe(map(response => {\n      if (response && response.exito && response.data) {\n        return response.data.map(item => ({\n          id: item.id,\n          name: item.nombre,\n          code: item.codigo,\n          credits: item.creditos,\n          professorId: item.profesorId || 0,\n          professor: item.nombreProfesor ? this.createProfessorObject(item.profesorId, item.nombreProfesor) : undefined\n        }));\n      }\n      return [];\n    }), catchError(this.handleError));\n  }\n  getSubject(id) {\n    return this.http.get(`${this.apiUrl}/${id}`).pipe(map(response => {\n      if (response && response.exito && response.data) {\n        const item = response.data;\n        return {\n          id: item.id,\n          name: item.nombre,\n          code: item.codigo,\n          credits: item.creditos,\n          professorId: item.profesorId || 0,\n          professor: item.nombreProfesor ? this.createProfessorObject(item.profesorId, item.nombreProfesor) : undefined\n        };\n      }\n      throw new Error('Subject not found');\n    }), catchError(this.handleError));\n  }\n  getSubjectsByIds(ids) {\n    const queryParams = ids.map(id => `ids=${id}`).join('&');\n    return this.http.get(`${this.apiUrl}/multiple?${queryParams}`).pipe(map(response => {\n      if (response && response.exito && response.data) {\n        return response.data.map(item => ({\n          id: item.id,\n          name: item.nombre,\n          code: item.codigo,\n          credits: item.creditos,\n          professorId: item.profesorId || 0,\n          professor: item.nombreProfesor ? this.createProfessorObject(item.profesorId, item.nombreProfesor) : undefined\n        }));\n      }\n      return [];\n    }), catchError(this.handleError));\n  }\n  getStudentsBySubject(id, isProfessor = false) {\n    if (isProfessor) {\n      // Endpoint seguro para profesores\n      return this.http.get(`${environment.apiUrl}/Estudiantes/por-materia-profesor/${id}`, {\n        observe: 'response'\n      }).pipe(map(response => {\n        if (response.body && response.body.exito && response.body.data) {\n          return response.body.data.map(item => ({\n            id: item.id,\n            name: item.nombre,\n            studentId: item.matricula || '',\n            email: item.email || ''\n          }));\n        }\n        return [];\n      }), catchError(error => {\n        if (error.status === 403) {\n          return throwError(() => new Error('NO_PERMISSIONS'));\n        } else if (error.status === 404) {\n          return throwError(() => new Error('NOT_FOUND'));\n        }\n        return this.handleError(error);\n      }));\n    }\n    // Admin y otros roles usan el endpoint clásico\n    return this.http.get(`${environment.apiUrl}/Registros/materia/${id}`).pipe(map(response => {\n      if (response && response.exito && response.data) {\n        return response.data.map(item => ({\n          id: item.estudianteId,\n          name: item.nombreEstudiante,\n          studentId: '',\n          email: ''\n        }));\n      }\n      return [];\n    }), catchError(this.handleError));\n  }\n  handleError(error) {\n    let errorMessage = 'An unknown error occurred!';\n    if (error.error instanceof ErrorEvent) {\n      // Client-side error\n      errorMessage = `Error: ${error.error.message}`;\n    } else if (error.error && error.error.message) {\n      // Server-side error with message\n      errorMessage = error.error.message;\n    } else if (error.status) {\n      // HTTP error\n      errorMessage = `Error ${error.status}: ${error.statusText}`;\n    }\n    return throwError(() => new Error(errorMessage));\n  }\n  createSubject(materiaDto) {\n    // Asegurarse de que profesorId sea un número\n    const materiaToSend = {\n      ...materiaDto,\n      profesorId: materiaDto.profesorId ? Number(materiaDto.profesorId) : null\n    };\n    console.log('Datos enviados al crear materia (después de conversión):', materiaToSend);\n    return this.http.post(this.apiUrl, materiaToSend).pipe(map(response => {\n      console.log('Respuesta del servidor al crear materia:', response);\n      if (response && response.exito && response.data) {\n        return response.data;\n      }\n      throw new Error(response.mensaje || 'Error al crear la materia');\n    }), catchError(error => {\n      console.error('Error al crear materia:', error);\n      return this.handleError(error);\n    }));\n  }\n  static {\n    this.ɵfac = function SubjectService_Factory(t) {\n      return new (t || SubjectService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: SubjectService,\n      factory: SubjectService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"mappings":"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","names":["throwError","catchError","map","environment","SubjectService","constructor","http","apiUrl","createProfessorObject","id","name","nombre","apellido","split","length","slice","join","email","departamento","getStudentSubjects","studentId","get","pipe","response","exito","data","item","code","codigo","credits","creditos","professorId","profesorId","professor","nombreProfesor","undefined","handleError","getSubjects","isProfessor","materias","getSubject","Error","getSubjectsByIds","ids","queryParams","getStudentsBySubject","observe","body","matricula","error","status","estudianteId","nombreEstudiante","errorMessage","ErrorEvent","message","statusText","createSubject","materiaDto","materiaToSend","Number","console","log","post","mensaje","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\hansk\\Videos\\frontendsistemacolegio.interrapidisi\\frontendsistemacolegio.interrapidisi\\src\\app\\services\\subject.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport { Subject } from '../models/subject.model';\nimport { Student } from '../models/student.model';\nimport { Professor } from '../models/professor.model';\nimport { environment } from '../../environments/environment';\n\ninterface MateriaDto {\n  nombre: string;\n  codigo: string;\n  creditos: number;\n  profesorId: number | null;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class SubjectService {\n  private apiUrl = `${environment.apiUrl}/Materias`;\n  private registrosUrl = `${environment.apiUrl}/Registros`;\n\n  constructor(private http: HttpClient) { }\n\n  // Funciu00f3n auxiliar para crear un objeto Professor compatible\n  private createProfessorObject(id: any, name: string): Professor {\n    const [nombre, apellido] = name.split(' ').length > 1 ? \n      [name.split(' ')[0], name.split(' ').slice(1).join(' ')] : \n      [name, ''];\n    \n    return {\n      id: id,\n      nombre: nombre,\n      apellido: apellido,\n      email: '', // Campo requerido pero no disponible desde la API de materias\n      departamento: '', // Campo requerido por el modelo actualizado\n      name: name // Mantener compatibilidad\n    };\n  }\n\n  getStudentSubjects(studentId: number): Observable<Subject[]> {\n    return this.http.get<any>(`${this.apiUrl}/estudiante/${studentId}`)\n      .pipe(\n        map(response => {\n          if (response && response.exito && response.data) {\n            return response.data.map((item: any) => ({\n              id: item.id,\n              name: item.nombre,\n              code: item.codigo,\n              credits: item.creditos,\n              professorId: item.profesorId || 0,\n              professor: item.nombreProfesor ? \n                this.createProfessorObject(item.profesorId, item.nombreProfesor) : \n                undefined\n            }));\n          }\n          return [];\n        }),\n        catchError(this.handleError)\n      );\n  }\n\n  getSubjects(isProfessor: boolean = false): Observable<Subject[]> {\n    // Si es profesor, usar el endpoint seguro\n    if (isProfessor) {\n      return this.http.get<any>(`${this.apiUrl}/profesor-materias`).pipe(\n        map(response => {\n          if (response && response.exito && response.data && response.data.materias) {\n            return response.data.materias.map((item: any) => ({\n              id: item.id,\n              name: item.nombre,\n              code: item.codigo,\n              credits: item.creditos,\n              professorId: item.profesorId || 0,\n              professor: item.nombreProfesor ?\n                this.createProfessorObject(item.profesorId, item.nombreProfesor) :\n                undefined\n            }));\n          }\n          return [];\n        }),\n        catchError(this.handleError)\n      );\n    }\n    // Admin y otros roles usan el endpoint clásico\n    return this.http.get<any>(this.apiUrl)\n      .pipe(\n        map(response => {\n          if (response && response.exito && response.data) {\n            return response.data.map((item: any) => ({\n              id: item.id,\n              name: item.nombre,\n              code: item.codigo,\n              credits: item.creditos,\n              professorId: item.profesorId || 0,\n              professor: item.nombreProfesor ?\n                this.createProfessorObject(item.profesorId, item.nombreProfesor) :\n                undefined\n            }));\n          }\n          return [];\n        }),\n        catchError(this.handleError)\n      );\n  }\n\n  getSubject(id: number): Observable<Subject> {\n    return this.http.get<any>(`${this.apiUrl}/${id}`)\n      .pipe(\n        map(response => {\n          if (response && response.exito && response.data) {\n            const item = response.data;\n            return {\n              id: item.id,\n              name: item.nombre,\n              code: item.codigo,\n              credits: item.creditos,\n              professorId: item.profesorId || 0,\n              professor: item.nombreProfesor ? \n                this.createProfessorObject(item.profesorId, item.nombreProfesor) : \n                undefined\n            };\n          }\n          throw new Error('Subject not found');\n        }),\n        catchError(this.handleError)\n      );\n  }\n\n  getSubjectsByIds(ids: number[]): Observable<Subject[]> {\n    const queryParams = ids.map(id => `ids=${id}`).join('&');\n    return this.http.get<any>(`${this.apiUrl}/multiple?${queryParams}`)\n      .pipe(\n        map(response => {\n          if (response && response.exito && response.data) {\n            return response.data.map((item: any) => ({\n              id: item.id,\n              name: item.nombre,\n              code: item.codigo,\n              credits: item.creditos,\n              professorId: item.profesorId || 0,\n              professor: item.nombreProfesor ? \n                this.createProfessorObject(item.profesorId, item.nombreProfesor) : \n                undefined\n            }));\n          }\n          return [];\n        }),\n        catchError(this.handleError)\n      );\n  }\n\n  getStudentsBySubject(id: number, isProfessor: boolean = false): Observable<Student[]> {\n    if (isProfessor) {\n      // Endpoint seguro para profesores\n      return this.http.get<any>(`${environment.apiUrl}/Estudiantes/por-materia-profesor/${id}`, { observe: 'response' })\n        .pipe(\n          map(response => {\n            if (response.body && response.body.exito && response.body.data) {\n              return response.body.data.map((item: any) => ({\n                id: item.id,\n                name: item.nombre,\n                studentId: item.matricula || '',\n                email: item.email || ''\n              }));\n            }\n            return [];\n          }),\n          catchError((error) => {\n            if (error.status === 403) {\n              return throwError(() => new Error('NO_PERMISSIONS'));\n            } else if (error.status === 404) {\n              return throwError(() => new Error('NOT_FOUND'));\n            }\n            return this.handleError(error);\n          })\n        );\n    }\n    // Admin y otros roles usan el endpoint clásico\n    return this.http.get<any>(`${environment.apiUrl}/Registros/materia/${id}`)\n      .pipe(\n        map(response => {\n          if (response && response.exito && response.data) {\n            return response.data.map((item: any) => ({\n              id: item.estudianteId,\n              name: item.nombreEstudiante,\n              studentId: '',\n              email: '',\n            }));\n          }\n          return [];\n        }),\n        catchError(this.handleError)\n      );\n  }\n\n  private handleError(error: any) {\n    let errorMessage = 'An unknown error occurred!';\n    if (error.error instanceof ErrorEvent) {\n      // Client-side error\n      errorMessage = `Error: ${error.error.message}`;\n    } else if (error.error && error.error.message) {\n      // Server-side error with message\n      errorMessage = error.error.message;\n    } else if (error.status) {\n      // HTTP error\n      errorMessage = `Error ${error.status}: ${error.statusText}`;\n    }\n    return throwError(() => new Error(errorMessage));\n  }\n\n  createSubject(materiaDto: MateriaDto): Observable<any> {\n    // Asegurarse de que profesorId sea un número\n    const materiaToSend = {\n      ...materiaDto,\n      profesorId: materiaDto.profesorId ? Number(materiaDto.profesorId) : null\n    };\n    \n    console.log('Datos enviados al crear materia (después de conversión):', materiaToSend);\n    \n    return this.http.post<any>(this.apiUrl, materiaToSend)\n      .pipe(\n        map(response => {\n          console.log('Respuesta del servidor al crear materia:', response);\n          if (response && response.exito && response.data) {\n            return response.data;\n          }\n          throw new Error(response.mensaje || 'Error al crear la materia');\n        }),\n        catchError(error => {\n          console.error('Error al crear materia:', error);\n          return this.handleError(error);\n        })\n      );\n  }\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}