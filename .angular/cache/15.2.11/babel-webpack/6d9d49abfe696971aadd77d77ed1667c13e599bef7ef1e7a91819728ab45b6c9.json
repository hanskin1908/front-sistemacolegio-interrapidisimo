{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/hansk/Videos/Prueba interrapidisimp/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { Validators } from '@angular/forms';\nimport { firstValueFrom } from 'rxjs';\nlet SubjectRegistrationComponent = class SubjectRegistrationComponent {\n  constructor(formBuilder, subjectService, registrationService, authService, router, modalService) {\n    this.formBuilder = formBuilder;\n    this.subjectService = subjectService;\n    this.registrationService = registrationService;\n    this.authService = authService;\n    this.router = router;\n    this.modalService = modalService;\n    this.availableSubjects = [];\n    this.currentRegistrations = [];\n    this.loading = false;\n    this.error = '';\n    this.success = '';\n    this.studentId = 0;\n    this.maxSubjects = 3;\n    this.selectedSubjectId = null; // Para el modal de compañeros\n  }\n\n  ngOnInit() {\n    this.initForm();\n    this.getCurrentStudentId();\n  }\n  initForm() {\n    this.registrationForm = this.formBuilder.group({\n      subjectId: ['', [Validators.required]]\n    });\n  }\n  getCurrentStudentId() {\n    this.loading = true;\n    this.authService.getCurrentUser().subscribe({\n      next: user => {\n        if (user && user.id) {\n          this.studentId = user.id;\n          this.loadCurrentRegistrations();\n          this.loadAvailableSubjects();\n        } else {\n          this.error = 'No se pudo obtener la información del estudiante';\n          this.loading = false;\n        }\n      },\n      error: err => {\n        this.error = 'Error al obtener información del usuario';\n        this.loading = false;\n        console.error(err);\n      }\n    });\n  }\n  loadCurrentRegistrations() {\n    this.registrationService.getStudentRegistrations(this.studentId).subscribe({\n      next: registrations => {\n        this.currentRegistrations = registrations;\n        this.loading = false;\n      },\n      error: err => {\n        this.error = 'Error al cargar registros actuales';\n        this.loading = false;\n        console.error(err);\n      }\n    });\n  }\n  loadAvailableSubjects() {\n    this.subjectService.getSubjects().subscribe({\n      next: subjects => {\n        // Filtrar materias ya registradas\n        const registeredSubjectIds = this.currentRegistrations.map(reg => reg.subjectId);\n        this.availableSubjects = subjects.filter(subject => !registeredSubjectIds.includes(subject.id));\n        this.loading = false;\n      },\n      error: err => {\n        this.error = 'Error al cargar materias disponibles';\n        this.loading = false;\n        console.error(err);\n      }\n    });\n  }\n  onSubmit() {\n    if (this.registrationForm.invalid) {\n      return;\n    }\n    this.loading = true;\n    this.error = '';\n    this.success = '';\n    const subjectId = this.registrationForm.value.subjectId;\n    // Verificar si ya tiene el máximo de materias\n    if (this.currentRegistrations.length >= this.maxSubjects) {\n      this.error = `No puedes registrar más de ${this.maxSubjects} materias`;\n      this.loading = false;\n      return;\n    }\n    // Verificar si ya tiene una materia con el mismo profesor\n    this.checkProfessorConflict(subjectId).then(hasConflict => {\n      if (hasConflict) {\n        this.error = 'No puedes tener más de una materia con el mismo profesor';\n        this.loading = false;\n        return;\n      }\n      // Proceder con el registro\n      const selectedSubject = this.availableSubjects.find(s => s.id === subjectId);\n      const registrationRequest = {\n        studentId: this.studentId,\n        subjectId: subjectId,\n        studentName: this.authService.getCurrentUserValue()?.name || '',\n        subjectName: selectedSubject?.name || ''\n      };\n      this.registrationService.registerSubject(registrationRequest).subscribe({\n        next: registration => {\n          this.success = 'Materia registrada correctamente';\n          this.loading = false;\n          this.registrationForm.reset();\n          // Recargar los datos\n          this.loadCurrentRegistrations();\n          this.loadAvailableSubjects();\n        },\n        error: err => {\n          this.error = err.message || 'Error al registrar la materia';\n          this.loading = false;\n          console.error(err);\n        }\n      });\n    }).catch(err => {\n      this.error = 'Error al verificar conflictos de profesor';\n      this.loading = false;\n      console.error(err);\n    });\n  }\n  checkProfessorConflict(newSubjectId) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      // Si no hay registros actuales, no hay conflicto\n      if (_this.currentRegistrations.length === 0) {\n        return false;\n      }\n      try {\n        // Obtener la nueva materia\n        const newSubject = yield firstValueFrom(_this.subjectService.getSubject(newSubjectId));\n        if (!newSubject) return false;\n        // Obtener las materias actuales\n        const currentSubjectIds = _this.currentRegistrations.map(reg => reg.subjectId);\n        const currentSubjects = yield firstValueFrom(_this.subjectService.getSubjectsByIds(currentSubjectIds));\n        if (!currentSubjects) return false;\n        // Verificar si hay conflicto de profesor\n        return currentSubjects.some(subject => subject.professorId === newSubject.professorId);\n      } catch (error) {\n        console.error('Error checking professor conflict:', error);\n        return false;\n      }\n    })();\n  }\n  unregisterSubject(registrationId) {\n    if (!registrationId) {\n      this.error = 'ID de registro no válido';\n      return;\n    }\n    if (confirm('¿Estás seguro de que deseas eliminar esta materia?')) {\n      this.loading = true;\n      this.error = '';\n      this.success = '';\n      this.registrationService.unregisterSubject(registrationId).subscribe({\n        next: () => {\n          this.success = 'Materia eliminada correctamente';\n          this.loading = false;\n          // Recargar los datos\n          this.loadCurrentRegistrations();\n          this.loadAvailableSubjects();\n        },\n        error: err => {\n          this.error = 'Error al eliminar la materia';\n          this.loading = false;\n          console.error(err);\n        }\n      });\n    }\n  }\n  // Método para abrir el modal de compañeros\n  openClassmatesModal(subjectId) {\n    if (!subjectId) {\n      this.error = 'Error: No se pudo identificar la materia seleccionada';\n      setTimeout(() => this.error = '', 3000); // Limpiar el mensaje después de 3 segundos\n      return;\n    }\n    this.selectedSubjectId = subjectId;\n    try {\n      // Asegurarse de que Bootstrap esté disponible\n      if (typeof bootstrap === 'undefined') {\n        console.error('Bootstrap no está disponible');\n        this.error = 'Error al mostrar la ventana modal. Intente nuevamente.';\n        setTimeout(() => this.error = '', 3000);\n        return;\n      }\n      // Usar Bootstrap 5 para abrir el modal\n      const modalElement = document.getElementById('classmatesModal');\n      if (modalElement) {\n        // Asegurarse de que cualquier modal previo se cierre\n        const existingModal = bootstrap.Modal.getInstance(modalElement);\n        if (existingModal) {\n          existingModal.dispose();\n        }\n        // Crear una nueva instancia del modal con opciones específicas\n        const modalOptions = {\n          backdrop: 'static',\n          keyboard: true,\n          focus: true // Enfoca el modal cuando se abre\n        };\n\n        const modalInstance = new bootstrap.Modal(modalElement, modalOptions);\n        // Asegurarse de que el modal esté visible\n        modalElement.style.display = 'block';\n        modalElement.style.zIndex = '1050';\n        // Mostrar el modal\n        modalInstance.show();\n        // Verificar que el modal se haya abierto correctamente\n        setTimeout(() => {\n          if (modalElement.classList.contains('show')) {\n            console.log('Modal mostrado correctamente');\n          } else {\n            console.error('El modal no se mostró correctamente');\n            this.error = 'Error al mostrar la lista de compañeros. Intente nuevamente.';\n            setTimeout(() => this.error = '', 3000);\n          }\n        }, 500);\n      } else {\n        console.error('No se encontró el elemento del modal con ID: classmatesModal');\n        this.error = 'Error al mostrar la lista de compañeros. Intente nuevamente.';\n        setTimeout(() => this.error = '', 3000);\n      }\n    } catch (e) {\n      console.error('Error al abrir el modal:', e);\n      this.error = 'Error al mostrar la lista de compañeros. Intente nuevamente.';\n      setTimeout(() => this.error = '', 3000);\n    }\n  }\n};\nSubjectRegistrationComponent = __decorate([Component({\n  selector: 'app-subject-registration',\n  templateUrl: './subject-registration.component.html',\n  styleUrls: ['./subject-registration.component.css']\n})], SubjectRegistrationComponent);\nexport { SubjectRegistrationComponent };","map":{"version":3,"mappings":"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","names":["Component","Validators","firstValueFrom","SubjectRegistrationComponent","constructor","formBuilder","subjectService","registrationService","authService","router","modalService","ngOnInit","initForm","getCurrentStudentId","registrationForm","group","subjectId","required","loading","getCurrentUser","subscribe","next","user","id","studentId","loadCurrentRegistrations","loadAvailableSubjects","error","err","console","getStudentRegistrations","registrations","currentRegistrations","getSubjects","subjects","registeredSubjectIds","map","reg","availableSubjects","filter","subject","includes","onSubmit","invalid","success","value","length","maxSubjects","checkProfessorConflict","then","hasConflict","selectedSubject","find","s","registrationRequest","studentName","getCurrentUserValue","name","subjectName","registerSubject","registration","reset","message","catch","newSubjectId","newSubject","getSubject","currentSubjectIds","currentSubjects","getSubjectsByIds","some","professorId","unregisterSubject","registrationId","confirm","openClassmatesModal","setTimeout","selectedSubjectId","bootstrap","modalElement","document","getElementById","existingModal","Modal","getInstance","dispose","modalOptions","backdrop","keyboard","focus","modalInstance","style","display","zIndex","show","classList","contains","log","e","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["C:\\Users\\hansk\\Videos\\Prueba interrapidisimp\\frontend\\src\\app\\components\\subject-registration\\subject-registration.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { Subject } from '../../models/subject.model';\nimport { Registration, RegistrationRequest } from '../../models/registration.model';\nimport { SubjectService } from '../../services/subject.service';\nimport { RegistrationService } from '../../services/registration.service';\nimport { AuthService } from '../../services/auth.service';\nimport { Router } from '@angular/router';\nimport { firstValueFrom } from 'rxjs';\nimport { ModalService } from '../../services/modal.service';\n\n// Declaración para el objeto bootstrap global\ndeclare var bootstrap: any;\n\n@Component({\n  selector: 'app-subject-registration',\n  templateUrl: './subject-registration.component.html',\n  styleUrls: ['./subject-registration.component.css']\n})\nexport class SubjectRegistrationComponent implements OnInit {\n  registrationForm!: FormGroup;\n  availableSubjects: Subject[] = [];\n  currentRegistrations: Registration[] = [];\n  loading = false;\n  error = '';\n  success = '';\n  studentId: number = 0;\n  maxSubjects = 3;\n  selectedSubjectId: number | null = null; // Para el modal de compañeros\n\n  constructor(\n    private formBuilder: FormBuilder,\n    private subjectService: SubjectService,\n    private registrationService: RegistrationService,\n    private authService: AuthService,\n    private router: Router,\n    private modalService: ModalService\n  ) {}\n\n  ngOnInit(): void {\n    this.initForm();\n    this.getCurrentStudentId();\n  }\n\n  initForm(): void {\n    this.registrationForm = this.formBuilder.group({\n      subjectId: ['', [Validators.required]]\n    });\n  }\n\n  getCurrentStudentId(): void {\n    this.loading = true;\n    this.authService.getCurrentUser().subscribe({\n      next: (user) => {\n        if (user && user.id) {\n          this.studentId = user.id;\n          this.loadCurrentRegistrations();\n          this.loadAvailableSubjects();\n        } else {\n          this.error = 'No se pudo obtener la información del estudiante';\n          this.loading = false;\n        }\n      },\n      error: (err) => {\n        this.error = 'Error al obtener información del usuario';\n        this.loading = false;\n        console.error(err);\n      }\n    });\n  }\n\n  loadCurrentRegistrations(): void {\n    this.registrationService.getStudentRegistrations(this.studentId).subscribe({\n      next: (registrations) => {\n        this.currentRegistrations = registrations;\n        this.loading = false;\n      },\n      error: (err) => {\n        this.error = 'Error al cargar registros actuales';\n        this.loading = false;\n        console.error(err);\n      }\n    });\n  }\n\n  loadAvailableSubjects(): void {\n    this.subjectService.getSubjects().subscribe({\n      next: (subjects) => {\n        // Filtrar materias ya registradas\n        const registeredSubjectIds = this.currentRegistrations.map(reg => reg.subjectId);\n        this.availableSubjects = subjects.filter(subject => !registeredSubjectIds.includes(subject.id));\n        this.loading = false;\n      },\n      error: (err) => {\n        this.error = 'Error al cargar materias disponibles';\n        this.loading = false;\n        console.error(err);\n      }\n    });\n  }\n\n  onSubmit(): void {\n    if (this.registrationForm.invalid) {\n      return;\n    }\n\n    this.loading = true;\n    this.error = '';\n    this.success = '';\n\n    const subjectId = this.registrationForm.value.subjectId;\n    \n    // Verificar si ya tiene el máximo de materias\n    if (this.currentRegistrations.length >= this.maxSubjects) {\n      this.error = `No puedes registrar más de ${this.maxSubjects} materias`;\n      this.loading = false;\n      return;\n    }\n\n    // Verificar si ya tiene una materia con el mismo profesor\n    this.checkProfessorConflict(subjectId).then(hasConflict => {\n      if (hasConflict) {\n        this.error = 'No puedes tener más de una materia con el mismo profesor';\n        this.loading = false;\n        return;\n      }\n\n      // Proceder con el registro\n      const selectedSubject = this.availableSubjects.find(s => s.id === subjectId);\n      \n      const registrationRequest: RegistrationRequest = {\n        studentId: this.studentId,\n        subjectId: subjectId,\n        studentName: this.authService.getCurrentUserValue()?.name || '',\n        subjectName: selectedSubject?.name || ''\n      };\n\n      this.registrationService.registerSubject(registrationRequest).subscribe({\n        next: (registration) => {\n          this.success = 'Materia registrada correctamente';\n          this.loading = false;\n          this.registrationForm.reset();\n          // Recargar los datos\n          this.loadCurrentRegistrations();\n          this.loadAvailableSubjects();\n        },\n        error: (err) => {\n          this.error = err.message || 'Error al registrar la materia';\n          this.loading = false;\n          console.error(err);\n        }\n      });\n    }).catch(err => {\n      this.error = 'Error al verificar conflictos de profesor';\n      this.loading = false;\n      console.error(err);\n    });\n  }\n\n  async checkProfessorConflict(newSubjectId: number): Promise<boolean> {\n    // Si no hay registros actuales, no hay conflicto\n    if (this.currentRegistrations.length === 0) {\n      return false;\n    }\n\n    try {\n      // Obtener la nueva materia\n      const newSubject = await firstValueFrom(this.subjectService.getSubject(newSubjectId));\n      if (!newSubject) return false;\n\n      // Obtener las materias actuales\n      const currentSubjectIds = this.currentRegistrations.map(reg => reg.subjectId);\n      const currentSubjects = await firstValueFrom(this.subjectService.getSubjectsByIds(currentSubjectIds));\n      if (!currentSubjects) return false;\n\n      // Verificar si hay conflicto de profesor\n      return currentSubjects.some(subject => subject.professorId === newSubject.professorId);\n    } catch (error) {\n      console.error('Error checking professor conflict:', error);\n      return false;\n    }\n  }\n\n  unregisterSubject(registrationId: number | undefined): void {\n    if (!registrationId) {\n      this.error = 'ID de registro no válido';\n      return;\n    }\n    \n    if (confirm('¿Estás seguro de que deseas eliminar esta materia?')) {\n      this.loading = true;\n      this.error = '';\n      this.success = '';\n\n      this.registrationService.unregisterSubject(registrationId).subscribe({\n        next: () => {\n          this.success = 'Materia eliminada correctamente';\n          this.loading = false;\n          // Recargar los datos\n          this.loadCurrentRegistrations();\n          this.loadAvailableSubjects();\n        },\n        error: (err) => {\n          this.error = 'Error al eliminar la materia';\n          this.loading = false;\n          console.error(err);\n        }\n      });\n    }\n  }\n\n  // Método para abrir el modal de compañeros\n  openClassmatesModal(subjectId: number): void {\n    if (!subjectId) {\n      this.error = 'Error: No se pudo identificar la materia seleccionada';\n      setTimeout(() => this.error = '', 3000); // Limpiar el mensaje después de 3 segundos\n      return;\n    }\n    \n    this.selectedSubjectId = subjectId;\n    \n    try {\n      // Asegurarse de que Bootstrap esté disponible\n      if (typeof bootstrap === 'undefined') {\n        console.error('Bootstrap no está disponible');\n        this.error = 'Error al mostrar la ventana modal. Intente nuevamente.';\n        setTimeout(() => this.error = '', 3000);\n        return;\n      }\n      \n      // Usar Bootstrap 5 para abrir el modal\n      const modalElement: HTMLElement | null = document.getElementById('classmatesModal');\n      if (modalElement) {\n        // Asegurarse de que cualquier modal previo se cierre\n        const existingModal = bootstrap.Modal.getInstance(modalElement);\n        if (existingModal) {\n          existingModal.dispose();\n        }\n        \n        // Crear una nueva instancia del modal con opciones específicas\n        const modalOptions = {\n          backdrop: 'static',  // El modal no se cierra al hacer clic fuera\n          keyboard: true,     // Se puede cerrar con la tecla ESC\n          focus: true         // Enfoca el modal cuando se abre\n        };\n        \n        const modalInstance = new bootstrap.Modal(modalElement, modalOptions);\n        \n        // Asegurarse de que el modal esté visible\n        modalElement.style.display = 'block';\n        modalElement.style.zIndex = '1050';\n        \n        // Mostrar el modal\n        modalInstance.show();\n        \n        // Verificar que el modal se haya abierto correctamente\n        setTimeout(() => {\n          if (modalElement.classList.contains('show')) {\n            console.log('Modal mostrado correctamente');\n          } else {\n            console.error('El modal no se mostró correctamente');\n            this.error = 'Error al mostrar la lista de compañeros. Intente nuevamente.';\n            setTimeout(() => this.error = '', 3000);\n          }\n        }, 500);\n      } else {\n        console.error('No se encontró el elemento del modal con ID: classmatesModal');\n        this.error = 'Error al mostrar la lista de compañeros. Intente nuevamente.';\n        setTimeout(() => this.error = '', 3000);\n      }\n    } catch (e) {\n      console.error('Error al abrir el modal:', e);\n      this.error = 'Error al mostrar la lista de compañeros. Intente nuevamente.';\n      setTimeout(() => this.error = '', 3000);\n    }\n  }\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}