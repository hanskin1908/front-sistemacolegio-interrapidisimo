{"ast":null,"code":"import { Observable, throwError } from 'rxjs';\nimport { catchError, map, switchMap } from 'rxjs/operators';\nimport { environment } from '../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./subject.service\";\nimport * as i3 from \"./auth.service\";\nexport class RegistrationService {\n  constructor(http, subjectService, authService) {\n    this.http = http;\n    this.subjectService = subjectService;\n    this.authService = authService;\n    this.apiUrl = `${environment.apiUrl}/Registros`;\n    this.MAX_SUBJECTS = 3;\n  }\n  getStudentRegistrations(studentId) {\n    return this.http.get(`${this.apiUrl}/estudiante/${studentId}`).pipe(map(response => {\n      if (response && response.exito && response.data) {\n        return response.data.map(item => ({\n          id: item.id,\n          studentId: item.estudianteId,\n          subjectId: item.materiaId,\n          registrationDate: new Date(item.fechaRegistro),\n          student: item.nombreEstudiante ? {\n            id: item.estudianteId,\n            name: item.nombreEstudiante,\n            studentId: '',\n            email: ''\n          } : undefined,\n          subject: item.nombreMateria ? {\n            id: item.materiaId,\n            name: item.nombreMateria,\n            code: '',\n            credits: 0,\n            professorId: 0\n          } : undefined\n        }));\n      }\n      return [];\n    }), catchError(this.handleError));\n  }\n  getSubjectRegistrations(subjectId) {\n    return this.http.get(`${this.apiUrl}/materia/${subjectId}`).pipe(catchError(this.handleError));\n  }\n  getRegistration(id) {\n    return this.http.get(`${this.apiUrl}/${id}`).pipe(catchError(this.handleError));\n  }\n  registerSubject(request) {\n    const studentId = request.studentId;\n    // Check if student already has 3 subjects\n    return this.getStudentRegistrations(studentId).pipe(switchMap(registrations => {\n      if (registrations.length >= this.MAX_SUBJECTS) {\n        return throwError(() => new Error('No puedes registrar más de 3 materias'));\n      }\n      // Get the professors of the subjects the student is already registered for\n      const registeredSubjectIds = registrations.map(r => r.subjectId);\n      if (registeredSubjectIds.includes(request.subjectId)) {\n        return throwError(() => new Error('Ya estás registrado en esta materia'));\n      }\n      // If student has no registrations yet, proceed with registration\n      if (registeredSubjectIds.length === 0) {\n        return this.http.post(this.apiUrl, request).pipe(catchError(this.handleError));\n      }\n      // Get the subject details to check professor\n      return this.subjectService.getSubject(request.subjectId).pipe(switchMap(newSubject => {\n        // Get all subjects the student is registered for\n        return this.subjectService.getSubjectsByIds(registeredSubjectIds).pipe(switchMap(registeredSubjects => {\n          // Check if the new subject's professor is already teaching the student\n          const professorIds = registeredSubjects.map(s => s.professorId);\n          if (professorIds.includes(newSubject.professorId)) {\n            return throwError(() => new Error('No puedes tener más de una materia con el mismo profesor'));\n          }\n          // All checks passed, proceed with registration\n          return this.http.post(this.apiUrl, request).pipe(catchError(this.handleError));\n        }));\n      }));\n    }));\n  }\n  unregisterSubject(id) {\n    return this.http.delete(`${this.apiUrl}/${id}`).pipe(catchError(this.handleError));\n  }\n  getClassmates(subjectId, currentStudentId) {\n    return this.getSubjectRegistrations(subjectId).pipe(map(registrations => {\n      // Filter out the current student and extract only the names\n      return registrations.filter(reg => reg.studentId !== currentStudentId && reg.student).map(reg => reg.student.name);\n    }), catchError(this.handleError));\n  }\n  // Get total credits for a student\n  getStudentTotalCredits(studentId) {\n    return this.getStudentRegistrations(studentId).pipe(switchMap(registrations => {\n      if (registrations.length === 0) {\n        return new Observable(observer => {\n          observer.next(0);\n          observer.complete();\n        });\n      }\n      const subjectIds = registrations.map(r => r.subjectId);\n      return this.subjectService.getSubjectsByIds(subjectIds).pipe(map(subjects => {\n        return subjects.reduce((total, subject) => total + subject.credits, 0);\n      }));\n    }), catchError(this.handleError));\n  }\n  handleError(error) {\n    let errorMessage = 'An unknown error occurred!';\n    if (error.error instanceof ErrorEvent) {\n      // Client-side error\n      errorMessage = `Error: ${error.error.message}`;\n    } else if (error.error && error.error.message) {\n      // Server-side error with message\n      errorMessage = error.error.message;\n    } else if (error.message) {\n      // Custom error message\n      errorMessage = error.message;\n    } else if (error.status) {\n      // HTTP error\n      errorMessage = `Error ${error.status}: ${error.statusText}`;\n    }\n    return throwError(() => new Error(errorMessage));\n  }\n  static {\n    this.ɵfac = function RegistrationService_Factory(t) {\n      return new (t || RegistrationService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.SubjectService), i0.ɵɵinject(i3.AuthService));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: RegistrationService,\n      factory: RegistrationService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"mappings":"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","names":["Observable","throwError","catchError","map","switchMap","environment","RegistrationService","constructor","http","subjectService","authService","apiUrl","getStudentRegistrations","studentId","get","pipe","response","exito","data","item","id","estudianteId","subjectId","materiaId","registrationDate","Date","fechaRegistro","student","nombreEstudiante","name","email","undefined","subject","nombreMateria","code","credits","professorId","handleError","getSubjectRegistrations","getRegistration","registerSubject","request","registrations","length","MAX_SUBJECTS","Error","registeredSubjectIds","r","includes","post","getSubject","newSubject","getSubjectsByIds","registeredSubjects","professorIds","s","unregisterSubject","delete","getClassmates","currentStudentId","filter","reg","getStudentTotalCredits","observer","next","complete","subjectIds","subjects","reduce","total","error","errorMessage","ErrorEvent","message","status","statusText","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\hansk\\Videos\\Prueba interrapidisimp\\frontend\\src\\app\\services\\registration.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable, throwError, forkJoin } from 'rxjs';\nimport { catchError, map, switchMap } from 'rxjs/operators';\nimport { Registration, RegistrationRequest } from '../models/registration.model';\nimport { Subject } from '../models/subject.model';\nimport { SubjectService } from './subject.service';\nimport { AuthService } from './auth.service';\nimport { environment } from '../../environments/environment';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RegistrationService {\n  private apiUrl = `${environment.apiUrl}/Registros`;\n  private MAX_SUBJECTS = 3;\n\n  constructor(\n    private http: HttpClient, \n    private subjectService: SubjectService,\n    private authService: AuthService\n  ) { }\n\n  getStudentRegistrations(studentId: number): Observable<Registration[]> {\n    return this.http.get<any>(`${this.apiUrl}/estudiante/${studentId}`)\n      .pipe(\n        map(response => {\n          if (response && response.exito && response.data) {\n            return response.data.map((item: any) => ({\n              id: item.id,\n              studentId: item.estudianteId,\n              subjectId: item.materiaId,\n              registrationDate: new Date(item.fechaRegistro),\n              student: item.nombreEstudiante ? { \n                id: item.estudianteId, \n                name: item.nombreEstudiante,\n                studentId: '',\n                email: ''\n              } : undefined,\n              subject: item.nombreMateria ? {\n                id: item.materiaId,\n                name: item.nombreMateria,\n                code: '',\n                credits: 0,\n                professorId: 0\n              } : undefined\n            }));\n          }\n          return [];\n        }),\n        catchError(this.handleError)\n      );\n  }\n\n  getSubjectRegistrations(subjectId: number): Observable<Registration[]> {\n    return this.http.get<Registration[]>(`${this.apiUrl}/materia/${subjectId}`)\n      .pipe(catchError(this.handleError));\n  }\n\n  getRegistration(id: number): Observable<Registration> {\n    return this.http.get<Registration>(`${this.apiUrl}/${id}`)\n      .pipe(catchError(this.handleError));\n  }\n\n  registerSubject(request: RegistrationRequest): Observable<Registration> {\n    const studentId = request.studentId;\n    \n    // Check if student already has 3 subjects\n    return this.getStudentRegistrations(studentId).pipe(\n      switchMap(registrations => {\n        if (registrations.length >= this.MAX_SUBJECTS) {\n          return throwError(() => new Error('No puedes registrar más de 3 materias'));\n        }\n        \n        // Get the professors of the subjects the student is already registered for\n        const registeredSubjectIds = registrations.map(r => r.subjectId);\n        \n        if (registeredSubjectIds.includes(request.subjectId)) {\n          return throwError(() => new Error('Ya estás registrado en esta materia'));\n        }\n        \n        // If student has no registrations yet, proceed with registration\n        if (registeredSubjectIds.length === 0) {\n          return this.http.post<Registration>(this.apiUrl, request)\n            .pipe(catchError(this.handleError));\n        }\n        \n        // Get the subject details to check professor\n        return this.subjectService.getSubject(request.subjectId).pipe(\n          switchMap(newSubject => {\n            // Get all subjects the student is registered for\n            return this.subjectService.getSubjectsByIds(registeredSubjectIds).pipe(\n              switchMap(registeredSubjects => {\n                // Check if the new subject's professor is already teaching the student\n                const professorIds = registeredSubjects.map(s => s.professorId);\n                \n                if (professorIds.includes(newSubject.professorId)) {\n                  return throwError(() => new Error('No puedes tener más de una materia con el mismo profesor'));\n                }\n                \n                // All checks passed, proceed with registration\n                return this.http.post<Registration>(this.apiUrl, request)\n                  .pipe(catchError(this.handleError));\n              })\n            );\n          })\n        );\n      })\n    );\n  }\n\n  unregisterSubject(id: number): Observable<any> {\n    return this.http.delete(`${this.apiUrl}/${id}`)\n      .pipe(catchError(this.handleError));\n  }\n\n  getClassmates(subjectId: number, currentStudentId: number): Observable<string[]> {\n    return this.getSubjectRegistrations(subjectId).pipe(\n      map(registrations => {\n        // Filter out the current student and extract only the names\n        return registrations\n          .filter(reg => reg.studentId !== currentStudentId && reg.student)\n          .map(reg => reg.student!.name);\n      }),\n      catchError(this.handleError)\n    );\n  }\n\n  // Get total credits for a student\n  getStudentTotalCredits(studentId: number): Observable<number> {\n    return this.getStudentRegistrations(studentId).pipe(\n      switchMap(registrations => {\n        if (registrations.length === 0) {\n          return new Observable<number>(observer => {\n            observer.next(0);\n            observer.complete();\n          });\n        }\n        \n        const subjectIds = registrations.map(r => r.subjectId);\n        return this.subjectService.getSubjectsByIds(subjectIds).pipe(\n          map(subjects => {\n            return subjects.reduce((total, subject) => total + subject.credits, 0);\n          })\n        );\n      }),\n      catchError(this.handleError)\n    );\n  }\n\n  private handleError(error: any) {\n    let errorMessage = 'An unknown error occurred!';\n    if (error.error instanceof ErrorEvent) {\n      // Client-side error\n      errorMessage = `Error: ${error.error.message}`;\n    } else if (error.error && error.error.message) {\n      // Server-side error with message\n      errorMessage = error.error.message;\n    } else if (error.message) {\n      // Custom error message\n      errorMessage = error.message;\n    } else if (error.status) {\n      // HTTP error\n      errorMessage = `Error ${error.status}: ${error.statusText}`;\n    }\n    return throwError(() => new Error(errorMessage));\n  }\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}