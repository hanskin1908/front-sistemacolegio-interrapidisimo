{"ast":null,"code":"import { Observable, throwError, of } from 'rxjs';\nimport { catchError, map, switchMap } from 'rxjs/operators';\nimport { environment } from '../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./subject.service\";\nimport * as i3 from \"./auth.service\";\nexport class RegistrationService {\n  constructor(http, subjectService, authService) {\n    this.http = http;\n    this.subjectService = subjectService;\n    this.authService = authService;\n    this.apiUrl = `${environment.apiUrl}/Registros`;\n    this.MAX_SUBJECTS = 3;\n  }\n  getStudentRegistrations(studentId) {\n    return this.http.get(`${this.apiUrl}/estudiante/${studentId}`).pipe(map(response => {\n      if (response && response.exito && response.data) {\n        return response.data.map(item => ({\n          id: item.id,\n          studentId: item.estudianteId,\n          subjectId: item.materiaId,\n          registrationDate: new Date(item.fechaRegistro),\n          student: item.nombreEstudiante ? {\n            id: item.estudianteId,\n            name: item.nombreEstudiante,\n            studentId: '',\n            email: ''\n          } : undefined,\n          subject: item.nombreMateria ? {\n            id: item.materiaId,\n            name: item.nombreMateria,\n            code: '',\n            credits: 0,\n            professorId: 0\n          } : undefined\n        }));\n      }\n      return [];\n    }), catchError(this.handleError));\n  }\n  getSubjectRegistrations(subjectId) {\n    return this.http.get(`${this.apiUrl}/materia/${subjectId}`).pipe(map(response => {\n      if (response && response.exito && response.data) {\n        return response.data.map(item => ({\n          id: item.id,\n          studentId: item.estudianteId,\n          subjectId: item.materiaId,\n          registrationDate: new Date(item.fechaRegistro),\n          student: item.nombreEstudiante ? {\n            id: item.estudianteId,\n            name: item.nombreEstudiante,\n            studentId: '',\n            email: ''\n          } : undefined,\n          subject: item.nombreMateria ? {\n            id: item.materiaId,\n            name: item.nombreMateria,\n            code: '',\n            credits: 0,\n            professorId: 0\n          } : undefined\n        }));\n      }\n      return [];\n    }), catchError(this.handleError));\n  }\n  getRegistration(id) {\n    return this.http.get(`${this.apiUrl}/${id}`).pipe(map(response => {\n      if (response && response.exito && response.data) {\n        const item = response.data;\n        return {\n          id: item.id,\n          studentId: item.estudianteId,\n          subjectId: item.materiaId,\n          registrationDate: new Date(item.fechaRegistro),\n          student: item.nombreEstudiante ? {\n            id: item.estudianteId,\n            name: item.nombreEstudiante,\n            studentId: '',\n            email: ''\n          } : undefined,\n          subject: item.nombreMateria ? {\n            id: item.materiaId,\n            name: item.nombreMateria,\n            code: '',\n            credits: 0,\n            professorId: 0\n          } : undefined\n        };\n      }\n      throw new Error('Registration not found');\n    }), catchError(this.handleError));\n  }\n  registerSubject(request) {\n    const studentId = request.studentId;\n    // Check if student already has 3 subjects\n    return this.getStudentRegistrations(studentId).pipe(switchMap(registrations => {\n      if (registrations.length >= this.MAX_SUBJECTS) {\n        return throwError(() => new Error('No puedes registrar más de 3 materias'));\n      }\n      // Get the professors of the subjects the student is already registered for\n      const registeredSubjectIds = registrations.map(r => r.subjectId);\n      if (registeredSubjectIds.includes(request.subjectId)) {\n        return throwError(() => new Error('Ya estás registrado en esta materia'));\n      }\n      // If student has no registrations yet, proceed with registration\n      if (registeredSubjectIds.length === 0) {\n        return this.http.post(this.apiUrl, request).pipe(map(response => {\n          if (response && response.exito && response.data) {\n            const item = response.data;\n            return {\n              id: item.id,\n              studentId: item.estudianteId,\n              subjectId: item.materiaId,\n              registrationDate: new Date(item.fechaRegistro),\n              student: item.nombreEstudiante ? {\n                id: item.estudianteId,\n                name: item.nombreEstudiante,\n                studentId: '',\n                email: ''\n              } : undefined,\n              subject: item.nombreMateria ? {\n                id: item.materiaId,\n                name: item.nombreMateria,\n                code: '',\n                credits: 0,\n                professorId: 0\n              } : undefined\n            };\n          }\n          throw new Error('Error al registrar la materia');\n        }), catchError(this.handleError));\n      }\n      // Get the subject details to check professor\n      return this.subjectService.getSubject(request.subjectId).pipe(switchMap(newSubject => {\n        // Get all subjects the student is registered for\n        return this.subjectService.getSubjectsByIds(registeredSubjectIds).pipe(switchMap(registeredSubjects => {\n          // Check if the new subject's professor is already teaching the student\n          const professorIds = registeredSubjects.map(s => s.professorId);\n          if (professorIds.includes(newSubject.professorId)) {\n            return throwError(() => new Error('No puedes tener más de una materia con el mismo profesor'));\n          }\n          // All checks passed, proceed with registration\n          return this.http.post(this.apiUrl, request).pipe(map(response => {\n            if (response && response.exito && response.data) {\n              const item = response.data;\n              return {\n                id: item.id,\n                studentId: item.estudianteId,\n                subjectId: item.materiaId,\n                registrationDate: new Date(item.fechaRegistro),\n                student: item.nombreEstudiante ? {\n                  id: item.estudianteId,\n                  name: item.nombreEstudiante,\n                  studentId: '',\n                  email: ''\n                } : undefined,\n                subject: item.nombreMateria ? {\n                  id: item.materiaId,\n                  name: item.nombreMateria,\n                  code: '',\n                  credits: 0,\n                  professorId: 0\n                } : undefined\n              };\n            }\n            throw new Error('Error al registrar la materia');\n          }), catchError(this.handleError));\n        }));\n      }));\n    }));\n  }\n  unregisterSubject(id) {\n    return this.http.delete(`${this.apiUrl}/${id}`).pipe(map(response => {\n      if (response && response.exito) {\n        return response.data;\n      }\n      throw new Error(response.mensaje || 'Error al eliminar el registro');\n    }), catchError(this.handleError));\n  }\n  getClassmates(subjectId, currentStudentId) {\n    return this.getSubjectRegistrations(subjectId).pipe(map(registrations => {\n      // Filter out the current student and extract student information\n      return registrations.filter(reg => reg.studentId !== currentStudentId && reg.student).map(reg => ({\n        id: reg.studentId,\n        name: reg.student.name,\n        studentId: reg.student.studentId || '',\n        email: reg.student.email || ''\n      }));\n    }), catchError(this.handleError));\n  }\n  // Get total credits for a student\n  getStudentTotalCredits(studentId) {\n    return this.getStudentRegistrations(studentId).pipe(switchMap(registrations => {\n      if (registrations.length === 0) {\n        return new Observable(observer => {\n          observer.next(0);\n          observer.complete();\n        });\n      }\n      const subjectIds = registrations.map(r => r.subjectId);\n      return this.subjectService.getSubjectsByIds(subjectIds).pipe(map(subjects => {\n        return subjects.reduce((total, subject) => total + subject.credits, 0);\n      }));\n    }), catchError(this.handleError));\n  }\n  handleError(error) {\n    let errorMessage = 'An unknown error occurred!';\n    if (error.error instanceof ErrorEvent) {\n      // Client-side error\n      errorMessage = `Error: ${error.error.message}`;\n    } else if (error.error && error.error.message) {\n      // Server-side error with message\n      errorMessage = error.error.message;\n    } else if (error.message) {\n      // Custom error message\n      errorMessage = error.message;\n    } else if (error.status) {\n      // HTTP error\n      errorMessage = `Error ${error.status}: ${error.statusText}`;\n    }\n    return throwError(() => new Error(errorMessage));\n  }\n  // Verifica si el usuario actual es un estudiante\n  isCurrentUserStudent() {\n    return this.authService.getCurrentUser().pipe(map(user => {\n      return user?.role === 'student';\n    }), catchError(() => of(false)));\n  }\n  // Verifica si el usuario actual tiene acceso a la sección de estudiantes\n  canAccessStudentSection() {\n    return this.authService.getCurrentUser().pipe(map(user => {\n      // Solo los administradores y profesores pueden acceder a la sección de estudiantes\n      return user?.role === 'admin' || user?.role === 'professor';\n    }), catchError(() => of(false)));\n  }\n  // Obtiene solo las materias registradas para el estudiante actual\n  getCurrentStudentRegistrations() {\n    return this.authService.getCurrentUser().pipe(switchMap(user => {\n      if (user && user.role === 'student') {\n        return this.getStudentRegistrations(user.id);\n      }\n      return of([]);\n    }), catchError(() => of([])));\n  }\n  static {\n    this.ɵfac = function RegistrationService_Factory(t) {\n      return new (t || RegistrationService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.SubjectService), i0.ɵɵinject(i3.AuthService));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: RegistrationService,\n      factory: RegistrationService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"mappings":"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","names":["Observable","throwError","of","catchError","map","switchMap","environment","RegistrationService","constructor","http","subjectService","authService","apiUrl","getStudentRegistrations","studentId","get","pipe","response","exito","data","item","id","estudianteId","subjectId","materiaId","registrationDate","Date","fechaRegistro","student","nombreEstudiante","name","email","undefined","subject","nombreMateria","code","credits","professorId","handleError","getSubjectRegistrations","getRegistration","Error","registerSubject","request","registrations","length","MAX_SUBJECTS","registeredSubjectIds","r","includes","post","getSubject","newSubject","getSubjectsByIds","registeredSubjects","professorIds","s","unregisterSubject","delete","mensaje","getClassmates","currentStudentId","filter","reg","getStudentTotalCredits","observer","next","complete","subjectIds","subjects","reduce","total","error","errorMessage","ErrorEvent","message","status","statusText","isCurrentUserStudent","getCurrentUser","user","role","canAccessStudentSection","getCurrentStudentRegistrations","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\hansk\\Videos\\Prueba interrapidisimp\\frontend\\src\\app\\services\\registration.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable, throwError, forkJoin, of } from 'rxjs';\nimport { catchError, map, switchMap } from 'rxjs/operators';\nimport { Registration, RegistrationRequest } from '../models/registration.model';\nimport { Subject } from '../models/subject.model';\n// Import the Student model\nimport { Student } from '../models/student.model';\nimport { SubjectService } from './subject.service';\nimport { AuthService } from './auth.service';\nimport { environment } from '../../environments/environment';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RegistrationService {\n  private apiUrl = `${environment.apiUrl}/Registros`;\n  private MAX_SUBJECTS = 3;\n\n  constructor(\n    private http: HttpClient, \n    private subjectService: SubjectService,\n    private authService: AuthService\n  ) { }\n\n  getStudentRegistrations(studentId: number): Observable<Registration[]> {\n    return this.http.get<any>(`${this.apiUrl}/estudiante/${studentId}`)\n      .pipe(\n        map(response => {\n          if (response && response.exito && response.data) {\n            return response.data.map((item: any) => ({\n              id: item.id,\n              studentId: item.estudianteId,\n              subjectId: item.materiaId,\n              registrationDate: new Date(item.fechaRegistro),\n              student: item.nombreEstudiante ? { \n                id: item.estudianteId, \n                name: item.nombreEstudiante,\n                studentId: '',\n                email: ''\n              } : undefined,\n              subject: item.nombreMateria ? {\n                id: item.materiaId,\n                name: item.nombreMateria,\n                code: '',\n                credits: 0,\n                professorId: 0\n              } : undefined\n            }));\n          }\n          return [];\n        }),\n        catchError(this.handleError)\n      );\n  }\n\n  getSubjectRegistrations(subjectId: number): Observable<Registration[]> {\n    return this.http.get<any>(`${this.apiUrl}/materia/${subjectId}`)\n      .pipe(\n        map(response => {\n          if (response && response.exito && response.data) {\n            return response.data.map((item: any) => ({\n              id: item.id,\n              studentId: item.estudianteId,\n              subjectId: item.materiaId,\n              registrationDate: new Date(item.fechaRegistro),\n              student: item.nombreEstudiante ? { \n                id: item.estudianteId, \n                name: item.nombreEstudiante,\n                studentId: '',\n                email: ''\n              } : undefined,\n              subject: item.nombreMateria ? {\n                id: item.materiaId,\n                name: item.nombreMateria,\n                code: '',\n                credits: 0,\n                professorId: 0\n              } : undefined\n            }));\n          }\n          return [];\n        }),\n        catchError(this.handleError)\n      );\n  }\n\n  getRegistration(id: number): Observable<Registration> {\n    return this.http.get<any>(`${this.apiUrl}/${id}`)\n      .pipe(\n        map(response => {\n          if (response && response.exito && response.data) {\n            const item = response.data;\n            return {\n              id: item.id,\n              studentId: item.estudianteId,\n              subjectId: item.materiaId,\n              registrationDate: new Date(item.fechaRegistro),\n              student: item.nombreEstudiante ? { \n                id: item.estudianteId, \n                name: item.nombreEstudiante,\n                studentId: '',\n                email: ''\n              } : undefined,\n              subject: item.nombreMateria ? {\n                id: item.materiaId,\n                name: item.nombreMateria,\n                code: '',\n                credits: 0,\n                professorId: 0\n              } : undefined\n            };\n          }\n          throw new Error('Registration not found');\n        }),\n        catchError(this.handleError)\n      );\n  }\n\n  registerSubject(request: RegistrationRequest): Observable<Registration> {\n    const studentId = request.studentId;\n    \n    // Check if student already has 3 subjects\n    return this.getStudentRegistrations(studentId).pipe(\n      switchMap(registrations => {\n        if (registrations.length >= this.MAX_SUBJECTS) {\n          return throwError(() => new Error('No puedes registrar más de 3 materias'));\n        }\n        \n        // Get the professors of the subjects the student is already registered for\n        const registeredSubjectIds = registrations.map(r => r.subjectId);\n        \n        if (registeredSubjectIds.includes(request.subjectId)) {\n          return throwError(() => new Error('Ya estás registrado en esta materia'));\n        }\n        \n        // If student has no registrations yet, proceed with registration\n        if (registeredSubjectIds.length === 0) {\n          return this.http.post<any>(this.apiUrl, request)\n            .pipe(\n              map(response => {\n                if (response && response.exito && response.data) {\n                  const item = response.data;\n                  return {\n                    id: item.id,\n                    studentId: item.estudianteId,\n                    subjectId: item.materiaId,\n                    registrationDate: new Date(item.fechaRegistro),\n                    student: item.nombreEstudiante ? { \n                      id: item.estudianteId, \n                      name: item.nombreEstudiante,\n                      studentId: '',\n                      email: ''\n                    } : undefined,\n                    subject: item.nombreMateria ? {\n                      id: item.materiaId,\n                      name: item.nombreMateria,\n                      code: '',\n                      credits: 0,\n                      professorId: 0\n                    } : undefined\n                  };\n                }\n                throw new Error('Error al registrar la materia');\n              }),\n              catchError(this.handleError)\n            );\n        }\n        \n        // Get the subject details to check professor\n        return this.subjectService.getSubject(request.subjectId).pipe(\n          switchMap(newSubject => {\n            // Get all subjects the student is registered for\n            return this.subjectService.getSubjectsByIds(registeredSubjectIds).pipe(\n              switchMap(registeredSubjects => {\n                // Check if the new subject's professor is already teaching the student\n                const professorIds = registeredSubjects.map(s => s.professorId);\n                \n                if (professorIds.includes(newSubject.professorId)) {\n                  return throwError(() => new Error('No puedes tener más de una materia con el mismo profesor'));\n                }\n                \n                // All checks passed, proceed with registration\n                return this.http.post<any>(this.apiUrl, request)\n                  .pipe(\n                    map(response => {\n                      if (response && response.exito && response.data) {\n                        const item = response.data;\n                        return {\n                          id: item.id,\n                          studentId: item.estudianteId,\n                          subjectId: item.materiaId,\n                          registrationDate: new Date(item.fechaRegistro),\n                          student: item.nombreEstudiante ? { \n                            id: item.estudianteId, \n                            name: item.nombreEstudiante,\n                            studentId: '',\n                            email: ''\n                          } : undefined,\n                          subject: item.nombreMateria ? {\n                            id: item.materiaId,\n                            name: item.nombreMateria,\n                            code: '',\n                            credits: 0,\n                            professorId: 0\n                          } : undefined\n                        };\n                      }\n                      throw new Error('Error al registrar la materia');\n                    }),\n                    catchError(this.handleError)\n                  );\n              })\n            );\n          })\n        );\n      })\n    );\n  }\n\n  unregisterSubject(id: number): Observable<any> {\n    return this.http.delete<any>(`${this.apiUrl}/${id}`)\n      .pipe(\n        map(response => {\n          if (response && response.exito) {\n            return response.data;\n          }\n          throw new Error(response.mensaje || 'Error al eliminar el registro');\n        }),\n        catchError(this.handleError)\n      );\n  }\n\n  getClassmates(subjectId: number, currentStudentId: number): Observable<Student[]> {\n    return this.getSubjectRegistrations(subjectId).pipe(\n      map(registrations => {\n        // Filter out the current student and extract student information\n        return registrations\n          .filter(reg => reg.studentId !== currentStudentId && reg.student)\n          .map(reg => ({\n            id: reg.studentId,\n            name: reg.student!.name,\n            studentId: reg.student!.studentId || '',\n            email: reg.student!.email || ''\n          }));\n      }),\n      catchError(this.handleError)\n    );\n  }\n\n  // Get total credits for a student\n  getStudentTotalCredits(studentId: number): Observable<number> {\n    return this.getStudentRegistrations(studentId).pipe(\n      switchMap(registrations => {\n        if (registrations.length === 0) {\n          return new Observable<number>(observer => {\n            observer.next(0);\n            observer.complete();\n          });\n        }\n        \n        const subjectIds = registrations.map(r => r.subjectId);\n        return this.subjectService.getSubjectsByIds(subjectIds).pipe(\n          map(subjects => {\n            return subjects.reduce((total, subject) => total + subject.credits, 0);\n          })\n        );\n      }),\n      catchError(this.handleError)\n    );\n  }\n\n  private handleError(error: any) {\n    let errorMessage = 'An unknown error occurred!';\n    if (error.error instanceof ErrorEvent) {\n      // Client-side error\n      errorMessage = `Error: ${error.error.message}`;\n    } else if (error.error && error.error.message) {\n      // Server-side error with message\n      errorMessage = error.error.message;\n    } else if (error.message) {\n      // Custom error message\n      errorMessage = error.message;\n    } else if (error.status) {\n      // HTTP error\n      errorMessage = `Error ${error.status}: ${error.statusText}`;\n    }\n    return throwError(() => new Error(errorMessage));\n  }\n\n  // Verifica si el usuario actual es un estudiante\n  isCurrentUserStudent(): Observable<boolean> {\n    return this.authService.getCurrentUser().pipe(\n      map(user => {\n        return user?.role === 'student';\n      }),\n      catchError(() => of(false))\n    );\n  }\n\n  // Verifica si el usuario actual tiene acceso a la sección de estudiantes\n  canAccessStudentSection(): Observable<boolean> {\n    return this.authService.getCurrentUser().pipe(\n      map(user => {\n        // Solo los administradores y profesores pueden acceder a la sección de estudiantes\n        return user?.role === 'admin' || user?.role === 'professor';\n      }),\n      catchError(() => of(false))\n    );\n  }\n\n  // Obtiene solo las materias registradas para el estudiante actual\n  getCurrentStudentRegistrations(): Observable<Registration[]> {\n    return this.authService.getCurrentUser().pipe(\n      switchMap(user => {\n        if (user && user.role === 'student') {\n          return this.getStudentRegistrations(user.id);\n        }\n        return of([]);\n      }),\n      catchError(() => of([]))\n    );\n  }\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}