{"ast":null,"code":"import { throwError, of } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport { environment } from '../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AsignaturaServicio {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = `${environment.apiUrl}/Materias`;\n    this.registrosUrl = `${environment.apiUrl}/Registros`;\n  }\n  crearObjetoProfesor(id, nombreCompleto) {\n    const [nombre, apellido] = nombreCompleto.split(' ').length > 1 ? [nombreCompleto.split(' ')[0], nombreCompleto.split(' ').slice(1).join(' ')] : [nombreCompleto, ''];\n    return {\n      id: id,\n      nombre: nombre,\n      apellido: apellido,\n      email: '',\n      departamento: '',\n      nombreCompleto: nombreCompleto\n    };\n  }\n  obtenerAsignaturasEstudiante(estudianteId) {\n    return this.http.get(`${this.apiUrl}/estudiante/${estudianteId}`).pipe(map(respuesta => {\n      if (respuesta && respuesta.exito && respuesta.data) {\n        return respuesta.data.map(item => ({\n          id: item.id,\n          nombre: item.nombre,\n          codigo: item.codigo,\n          creditos: item.creditos,\n          profesorId: item.profesorId || 0,\n          profesor: item.nombreProfesor ? this.crearObjetoProfesor(item.profesorId, item.nombreProfesor) : undefined\n        }));\n      }\n      return [];\n    }), catchError(this.manejarError));\n  }\n  obtenerAsignaturas(esProfesor = false) {\n    if (esProfesor) {\n      return this.http.get(`${this.apiUrl}/profesor-materias`).pipe(map(respuesta => {\n        if (respuesta && respuesta.exito && respuesta.data && respuesta.data.materias) {\n          return respuesta.data.materias.map(item => ({\n            id: item.id,\n            nombre: item.nombre,\n            codigo: item.codigo,\n            creditos: item.creditos,\n            profesorId: item.profesorId || 0,\n            profesor: item.nombreProfesor ? this.crearObjetoProfesor(item.profesorId, item.nombreProfesor) : undefined\n          }));\n        }\n        return [];\n      }), catchError(this.manejarError));\n    }\n    return this.http.get(this.apiUrl).pipe(map(respuesta => {\n      if (respuesta && respuesta.exito && respuesta.data) {\n        return respuesta.data.map(item => ({\n          id: item.id,\n          nombre: item.nombre,\n          codigo: item.codigo,\n          creditos: item.creditos,\n          profesorId: item.profesorId || 0,\n          profesor: item.nombreProfesor ? this.crearObjetoProfesor(item.profesorId, item.nombreProfesor) : undefined\n        }));\n      }\n      return [];\n    }), catchError(this.manejarError));\n  }\n  obtenerAsignatura(id) {\n    return this.http.get(`${this.apiUrl}/${id}`).pipe(map(respuesta => {\n      if (respuesta && respuesta.exito && respuesta.data) {\n        const item = respuesta.data;\n        return {\n          id: item.id,\n          nombre: item.nombre,\n          codigo: item.codigo,\n          creditos: item.creditos,\n          profesorId: item.profesorId || 0,\n          profesor: item.nombreProfesor ? this.crearObjetoProfesor(item.profesorId, item.nombreProfesor) : undefined\n        };\n      }\n      throw new Error('Asignatura no encontrada');\n    }), catchError(this.manejarError));\n  }\n  obtenerAsignaturasPorIds(ids) {\n    // Si solo hay un ID, usar el endpoint de obtener una asignatura\n    if (ids.length === 1) {\n      return this.obtenerAsignatura(ids[0]).pipe(map(asignatura => [asignatura]), catchError(error => {\n        console.error('Error al obtener asignatura por ID único:', error);\n        return of([]);\n      }));\n    }\n    // Si hay múltiples IDs, usar el endpoint multiple\n    // Construir la URL correctamente para múltiples parámetros con el mismo nombre\n    let url = `${this.apiUrl}/multiple?`;\n    // Añadir cada ID como un parámetro separado\n    ids.forEach((id, index) => {\n      url += `ids=${id}`;\n      if (index < ids.length - 1) {\n        url += '&';\n      }\n    });\n    console.log('URL para obtener múltiples asignaturas:', url);\n    return this.http.get(url).pipe(map(respuesta => {\n      if (respuesta && respuesta.exito && respuesta.data) {\n        return respuesta.data.map(item => ({\n          id: item.id,\n          nombre: item.nombre,\n          codigo: item.codigo,\n          creditos: item.creditos,\n          profesorId: item.profesorId || 0,\n          profesor: item.nombreProfesor ? this.crearObjetoProfesor(item.profesorId, item.nombreProfesor) : undefined\n        }));\n      }\n      return [];\n    }), catchError(error => {\n      console.error('Error al obtener asignaturas por múltiples IDs:', error);\n      return this.manejarError(error);\n    }));\n  }\n  obtenerEstudiantesPorAsignatura(id, esProfesor = false) {\n    if (esProfesor) {\n      return this.http.get(`${environment.apiUrl}/Estudiantes/por-materia-profesor/${id}`, {\n        observe: 'response'\n      }).pipe(map(respuesta => {\n        if (respuesta.body && respuesta.body.exito && respuesta.body.data) {\n          return respuesta.body.data.map(item => ({\n            id: item.id,\n            nombre: item.nombre,\n            matricula: item.matricula || '',\n            email: item.email || ''\n          }));\n        }\n        return [];\n      }), catchError(error => {\n        if (error.status === 403) {\n          return throwError(() => new Error('SIN_PERMISOS'));\n        } else if (error.status === 404) {\n          return throwError(() => new Error('NO_ENCONTRADO'));\n        }\n        return this.manejarError(error);\n      }));\n    }\n    return this.http.get(`${environment.apiUrl}/Registros/materia/${id}`).pipe(map(respuesta => {\n      if (respuesta && respuesta.exito && respuesta.data) {\n        return respuesta.data.map(item => ({\n          id: item.estudianteId,\n          nombre: item.nombreEstudiante,\n          matricula: '',\n          email: ''\n        }));\n      }\n      return [];\n    }), catchError(this.manejarError));\n  }\n  crearAsignatura(asignaturaDto) {\n    return this.http.post(this.apiUrl, asignaturaDto).pipe(map(respuesta => {\n      if (respuesta && respuesta.exito && respuesta.data) {\n        const item = respuesta.data;\n        return {\n          id: item.id,\n          nombre: item.nombre,\n          codigo: item.codigo,\n          creditos: item.creditos,\n          profesorId: item.profesorId || 0,\n          profesor: item.nombreProfesor ? this.crearObjetoProfesor(item.profesorId, item.nombreProfesor) : undefined\n        };\n      }\n      throw new Error('Error al crear la asignatura');\n    }), catchError(this.manejarError));\n  }\n  actualizarAsignatura(asignatura) {\n    return this.http.put(`${this.apiUrl}/${asignatura.id}`, asignatura).pipe(map(respuesta => {\n      if (respuesta && respuesta.exito && respuesta.data) {\n        const item = respuesta.data;\n        return {\n          id: item.id,\n          nombre: item.nombre,\n          codigo: item.codigo,\n          creditos: item.creditos,\n          profesorId: item.profesorId || 0,\n          profesor: item.nombreProfesor ? this.crearObjetoProfesor(item.profesorId, item.nombreProfesor) : undefined\n        };\n      }\n      throw new Error('Error al actualizar la asignatura');\n    }), catchError(this.manejarError));\n  }\n  verificarInscripcion(asignaturaId, estudianteId) {\n    return this.http.get(`${this.registrosUrl}/student/${asignaturaId}/${estudianteId}`).pipe(map(respuesta => {\n      if (respuesta && respuesta.exito) {\n        return respuesta.data;\n      }\n      return false;\n    }), catchError(error => {\n      console.error('Error al verificar inscripción:', error);\n      return of(false);\n    }));\n  }\n  manejarError(error) {\n    let mensajeError = '¡Ocurrió un error desconocido!';\n    if (error.error instanceof ErrorEvent) {\n      mensajeError = `Error: ${error.error.message}`;\n    } else if (error.error && error.error.message) {\n      mensajeError = error.error.message;\n    } else if (error.status) {\n      mensajeError = `Error ${error.status}: ${error.statusText}`;\n    }\n    return throwError(() => new Error(mensajeError));\n  }\n  static {\n    this.ɵfac = function AsignaturaServicio_Factory(t) {\n      return new (t || AsignaturaServicio)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AsignaturaServicio,\n      factory: AsignaturaServicio.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"mappings":"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","names":["throwError","of","catchError","map","environment","AsignaturaServicio","constructor","http","apiUrl","crearObjetoProfesor","id","nombreCompleto","nombre","apellido","split","length","slice","join","email","departamento","obtenerAsignaturasEstudiante","estudianteId","get","pipe","respuesta","exito","data","item","codigo","creditos","profesorId","profesor","nombreProfesor","undefined","manejarError","obtenerAsignaturas","esProfesor","materias","obtenerAsignatura","Error","obtenerAsignaturasPorIds","ids","asignatura","error","console","url","forEach","index","log","obtenerEstudiantesPorAsignatura","observe","body","matricula","status","nombreEstudiante","crearAsignatura","asignaturaDto","post","actualizarAsignatura","put","verificarInscripcion","asignaturaId","registrosUrl","mensajeError","ErrorEvent","message","statusText","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\hansk\\Videos\\frontendsistemacolegio.interrapidisi\\frontendsistemacolegio.interrapidisi\\src\\app\\servicios\\asignatura.servicio.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable, throwError, of } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport { Asignatura } from '../modelos/asignatura.modelo';\nimport { Estudiante } from '../modelos/estudiante.modelo';\nimport { Profesor } from '../modelos/profesor.modelo';\nimport { environment } from '../../environments/environment';\n\ninterface AsignaturaDto {\n  nombre: string;\n  codigo: string;\n  creditos: number;\n  profesorId: number | null;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AsignaturaServicio {\n  private apiUrl = `${environment.apiUrl}/Materias`;\n  private registrosUrl = `${environment.apiUrl}/Registros`;\n\n  constructor(private http: HttpClient) { }\n\n  private crearObjetoProfesor(id: any, nombreCompleto: string): Profesor {\n    const [nombre, apellido] = nombreCompleto.split(' ').length > 1 ?\n      [nombreCompleto.split(' ')[0], nombreCompleto.split(' ').slice(1).join(' ')] :\n      [nombreCompleto, ''];\n    return {\n      id: id,\n      nombre: nombre,\n      apellido: apellido,\n      email: '',\n      departamento: '',\n      nombreCompleto: nombreCompleto\n    };\n  }\n\n  obtenerAsignaturasEstudiante(estudianteId: number): Observable<Asignatura[]> {\n    return this.http.get<any>(`${this.apiUrl}/estudiante/${estudianteId}`)\n      .pipe(\n        map(respuesta => {\n          if (respuesta && respuesta.exito && respuesta.data) {\n            return respuesta.data.map((item: any) => ({\n              id: item.id,\n              nombre: item.nombre,\n              codigo: item.codigo,\n              creditos: item.creditos,\n              profesorId: item.profesorId || 0,\n              profesor: item.nombreProfesor ?\n                this.crearObjetoProfesor(item.profesorId, item.nombreProfesor) :\n                undefined\n            }));\n          }\n          return [];\n        }),\n        catchError(this.manejarError)\n      );\n  }\n\n  obtenerAsignaturas(esProfesor: boolean = false): Observable<Asignatura[]> {\n    if (esProfesor) {\n      return this.http.get<any>(`${this.apiUrl}/profesor-materias`).pipe(\n        map(respuesta => {\n          if (respuesta && respuesta.exito && respuesta.data && respuesta.data.materias) {\n            return respuesta.data.materias.map((item: any) => ({\n              id: item.id,\n              nombre: item.nombre,\n              codigo: item.codigo,\n              creditos: item.creditos,\n              profesorId: item.profesorId || 0,\n              profesor: item.nombreProfesor ?\n                this.crearObjetoProfesor(item.profesorId, item.nombreProfesor) :\n                undefined\n            }));\n          }\n          return [];\n        }),\n        catchError(this.manejarError)\n      );\n    }\n    return this.http.get<any>(this.apiUrl)\n      .pipe(\n        map(respuesta => {\n          if (respuesta && respuesta.exito && respuesta.data) {\n            return respuesta.data.map((item: any) => ({\n              id: item.id,\n              nombre: item.nombre,\n              codigo: item.codigo,\n              creditos: item.creditos,\n              profesorId: item.profesorId || 0,\n              profesor: item.nombreProfesor ?\n                this.crearObjetoProfesor(item.profesorId, item.nombreProfesor) :\n                undefined\n            }));\n          }\n          return [];\n        }),\n        catchError(this.manejarError)\n      );\n  }\n\n  obtenerAsignatura(id: number): Observable<Asignatura> {\n    return this.http.get<any>(`${this.apiUrl}/${id}`)\n      .pipe(\n        map(respuesta => {\n          if (respuesta && respuesta.exito && respuesta.data) {\n            const item = respuesta.data;\n            return {\n              id: item.id,\n              nombre: item.nombre,\n              codigo: item.codigo,\n              creditos: item.creditos,\n              profesorId: item.profesorId || 0,\n              profesor: item.nombreProfesor ?\n                this.crearObjetoProfesor(item.profesorId, item.nombreProfesor) :\n                undefined\n            };\n          }\n          throw new Error('Asignatura no encontrada');\n        }),\n        catchError(this.manejarError)\n      );\n  }\n\n  obtenerAsignaturasPorIds(ids: number[]): Observable<Asignatura[]> {\n    // Si solo hay un ID, usar el endpoint de obtener una asignatura\n    if (ids.length === 1) {\n      return this.obtenerAsignatura(ids[0]).pipe(\n        map(asignatura => [asignatura]),\n        catchError(error => {\n          console.error('Error al obtener asignatura por ID único:', error);\n          return of([]);\n        })\n      );\n    }\n    \n    // Si hay múltiples IDs, usar el endpoint multiple\n    // Construir la URL correctamente para múltiples parámetros con el mismo nombre\n    let url = `${this.apiUrl}/multiple?`;\n    // Añadir cada ID como un parámetro separado\n    ids.forEach((id, index) => {\n      url += `ids=${id}`;\n      if (index < ids.length - 1) {\n        url += '&';\n      }\n    });\n    \n    console.log('URL para obtener múltiples asignaturas:', url);\n    \n    return this.http.get<any>(url)\n      .pipe(\n        map(respuesta => {\n          if (respuesta && respuesta.exito && respuesta.data) {\n            return respuesta.data.map((item: any) => ({\n              id: item.id,\n              nombre: item.nombre,\n              codigo: item.codigo,\n              creditos: item.creditos,\n              profesorId: item.profesorId || 0,\n              profesor: item.nombreProfesor ?\n                this.crearObjetoProfesor(item.profesorId, item.nombreProfesor) :\n                undefined\n            }));\n          }\n          return [];\n        }),\n        catchError(error => {\n          console.error('Error al obtener asignaturas por múltiples IDs:', error);\n          return this.manejarError(error);\n        })\n      );\n  }\n\n  obtenerEstudiantesPorAsignatura(id: number, esProfesor: boolean = false): Observable<Estudiante[]> {\n    if (esProfesor) {\n      return this.http.get<any>(`${environment.apiUrl}/Estudiantes/por-materia-profesor/${id}`, { observe: 'response' })\n        .pipe(\n          map(respuesta => {\n            if (respuesta.body && respuesta.body.exito && respuesta.body.data) {\n              return respuesta.body.data.map((item: any) => ({\n                id: item.id,\n                nombre: item.nombre,\n                matricula: item.matricula || '',\n                email: item.email || ''\n              }));\n            }\n            return [];\n          }),\n          catchError((error) => {\n            if (error.status === 403) {\n              return throwError(() => new Error('SIN_PERMISOS'));\n            } else if (error.status === 404) {\n              return throwError(() => new Error('NO_ENCONTRADO'));\n            }\n            return this.manejarError(error);\n          })\n        );\n    }\n    return this.http.get<any>(`${environment.apiUrl}/Registros/materia/${id}`)\n      .pipe(\n        map(respuesta => {\n          if (respuesta && respuesta.exito && respuesta.data) {\n            return respuesta.data.map((item: any) => ({\n              id: item.estudianteId,\n              nombre: item.nombreEstudiante,\n              matricula: '',\n              email: '',\n            }));\n          }\n          return [];\n        }),\n        catchError(this.manejarError)\n      );\n  }\n\n  crearAsignatura(asignaturaDto: AsignaturaDto): Observable<Asignatura> {\n    return this.http.post<any>(this.apiUrl, asignaturaDto)\n      .pipe(\n        map(respuesta => {\n          if (respuesta && respuesta.exito && respuesta.data) {\n            const item = respuesta.data;\n            return {\n              id: item.id,\n              nombre: item.nombre,\n              codigo: item.codigo,\n              creditos: item.creditos,\n              profesorId: item.profesorId || 0,\n              profesor: item.nombreProfesor ?\n                this.crearObjetoProfesor(item.profesorId, item.nombreProfesor) :\n                undefined\n            };\n          }\n          throw new Error('Error al crear la asignatura');\n        }),\n        catchError(this.manejarError)\n      );\n  }\n\n  actualizarAsignatura(asignatura: Asignatura): Observable<Asignatura> {\n    return this.http.put<any>(`${this.apiUrl}/${asignatura.id}`, asignatura)\n      .pipe(\n        map(respuesta => {\n          if (respuesta && respuesta.exito && respuesta.data) {\n            const item = respuesta.data;\n            return {\n              id: item.id,\n              nombre: item.nombre,\n              codigo: item.codigo,\n              creditos: item.creditos,\n              profesorId: item.profesorId || 0,\n              profesor: item.nombreProfesor ?\n                this.crearObjetoProfesor(item.profesorId, item.nombreProfesor) :\n                undefined\n            };\n          }\n          throw new Error('Error al actualizar la asignatura');\n        }),\n        catchError(this.manejarError)\n      );\n  }\n\n  verificarInscripcion(asignaturaId: number, estudianteId: number): Observable<boolean> {\n    return this.http.get<any>(`${this.registrosUrl}/student/${asignaturaId}/${estudianteId}`)\n      .pipe(\n        map(respuesta => {\n          if (respuesta && respuesta.exito) {\n            return respuesta.data;\n          }\n          return false;\n        }),\n        catchError(error => {\n          console.error('Error al verificar inscripción:', error);\n          return of(false);\n        })\n      );\n  }\n\n  private manejarError(error: any) {\n    let mensajeError = '¡Ocurrió un error desconocido!';\n    if (error.error instanceof ErrorEvent) {\n      mensajeError = `Error: ${error.error.message}`;\n    } else if (error.error && error.error.message) {\n      mensajeError = error.error.message;\n    } else if (error.status) {\n      mensajeError = `Error ${error.status}: ${error.statusText}`;\n    }\n    return throwError(() => new Error(mensajeError));\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}