{"ast":null,"code":"import { throwError, of } from 'rxjs';\nimport { catchError, map, switchMap } from 'rxjs/operators';\nimport { environment } from '../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./asignatura.servicio\";\nimport * as i3 from \"./autenticacion.servicio\";\nexport class InscripcionServicio {\n  constructor(http, asignaturaServicio, autenticacionServicio) {\n    this.http = http;\n    this.asignaturaServicio = asignaturaServicio;\n    this.autenticacionServicio = autenticacionServicio;\n    this.apiUrl = `${environment.apiUrl}/Registros`;\n    this.MAX_ASIGNATURAS = 3;\n  }\n  obtenerInscripcionesEstudiante(estudianteId) {\n    console.log(estudianteId);\n    return this.http.get(`${this.apiUrl}/estudiante/${estudianteId}`).pipe(map(respuesta => {\n      if (respuesta && respuesta.exito && respuesta.data) {\n        console.log('Procesando inscripciones del estudiante:', respuesta.data);\n        return respuesta.data.map(item => ({\n          id: item.id,\n          estudianteId: item.estudianteId,\n          nombreEstudiante: item.nombreEstudiante || '',\n          materiaId: item.materiaId,\n          nombreMateria: item.nombreMateria || '',\n          creditos: item.creditos || 0,\n          nombreProfesor: item.nombreProfesor || null,\n          fechaRegistro: item.fechaRegistro ? new Date(item.fechaRegistro).toISOString() : new Date().toISOString()\n        }));\n      }\n      return [];\n    }), catchError(error => {\n      console.error('Error al obtener inscripciones:', error);\n      return of([]);\n    }));\n  }\n  obtenerInscripcionesAsignatura(asignaturaId) {\n    return this.http.get(`${this.apiUrl}/materia/${asignaturaId}`).pipe(map(respuesta => {\n      console.log('Obteniendo inscripciones para la asignatura:', asignaturaId);\n      if (respuesta && respuesta.exito && respuesta.data) {\n        console.log('Datos de inscripciones obtenidos:', respuesta.data);\n        return respuesta.data.map(item => ({\n          id: item.id,\n          estudianteId: item.estudianteId,\n          asignaturaId: item.materiaId,\n          fechaInscripcion: new Date(item.fechaRegistro),\n          estudiante: item.nombreEstudiante ? {\n            id: item.estudianteId,\n            nombre: item.nombreEstudiante,\n            matricula: '',\n            email: ''\n          } : undefined,\n          asignatura: item.nombreMateria ? {\n            id: item.materiaId,\n            nombre: item.nombreMateria,\n            codigo: '',\n            creditos: item.creditos || 0,\n            profesorId: item.profesorId || 0,\n            profesor: item.nombreProfesor ? {\n              id: item.profesorId || 0,\n              nombre: item.nombreProfesor,\n              apellido: '',\n              email: '',\n              departamento: '',\n              nombreCompleto: item.nombreProfesor\n            } : undefined\n          } : undefined\n        }));\n      }\n      return [];\n    }), catchError(error => {\n      console.error('Error al obtener inscripciones de asignatura:', error);\n      return of([]);\n    }));\n  }\n  obtenerInscripcion(id) {\n    return this.http.get(`${this.apiUrl}/${id}`).pipe(map(respuesta => {\n      if (respuesta && respuesta.exito && respuesta.data) {\n        const item = respuesta.data;\n        return {\n          id: item.id,\n          estudianteId: item.estudianteId,\n          nombreEstudiante: item.nombreEstudiante,\n          materiaId: item.materiaId,\n          nombreMateria: item.nombreMateria,\n          creditos: item.creditos || 0,\n          nombreProfesor: item.nombreProfesor,\n          fechaRegistro: item.fechaRegistro\n        };\n      }\n      throw new Error('Inscripción no encontrada');\n    }), catchError(error => {\n      console.error('Error al obtener inscripción:', error);\n      return throwError(() => new Error('Error al obtener inscripción'));\n    }));\n  }\n  inscribirAsignatura(solicitud) {\n    const estudianteId = solicitud.estudianteId;\n    return this.obtenerInscripcionesEstudiante(estudianteId).pipe(switchMap(inscripciones => {\n      if (inscripciones.length >= this.MAX_ASIGNATURAS) {\n        return throwError(() => new Error('No puedes inscribirte en más de 3 asignaturas'));\n      }\n      const asignaturasRegistradasIds = inscripciones.map(i => i.materiaId);\n      // Usar materiaId si está disponible, de lo contrario usar asignaturaId\n      const materiaIdToCheck = solicitud.materiaId || solicitud.asignaturaId || 0;\n      if (materiaIdToCheck !== 0 && asignaturasRegistradasIds.includes(materiaIdToCheck)) {\n        return throwError(() => new Error('Ya estás inscrito en esta asignatura'));\n      }\n      if (asignaturasRegistradasIds.length === 0) {\n        const solicitudBackend = {\n          estudianteId: solicitud.estudianteId,\n          nombreEstudiante: solicitud.nombreEstudiante || '',\n          materiaId: solicitud.materiaId,\n          nombreMateria: solicitud.nombreMateria || '',\n          creditos: 0,\n          nombreProfesor: null,\n          fechaRegistro: new Date().toISOString()\n        };\n        return this.http.post(this.apiUrl, solicitudBackend).pipe(map(respuesta => {\n          if (respuesta && respuesta.exito && respuesta.data) {\n            const item = respuesta.data;\n            // Convertir a formato Inscripcion\n            return {\n              id: item.id,\n              estudianteId: item.estudianteId,\n              nombreEstudiante: item.nombreEstudiante || '',\n              materiaId: item.materiaId,\n              nombreMateria: item.nombreMateria || '',\n              creditos: item.creditos || 0,\n              nombreProfesor: item.nombreProfesor || null,\n              fechaRegistro: item.fechaRegistro ? new Date(item.fechaRegistro).toISOString() : new Date().toISOString()\n            };\n          }\n          throw new Error('Error al registrar la asignatura');\n        }), catchError(error => {\n          console.error('Error al inscribir asignatura:', error);\n          return throwError(() => new Error('Error al inscribir asignatura'));\n        }));\n      }\n      const materiaId = solicitud.materiaId || solicitud.asignaturaId || 0;\n      if (materiaId === 0) {\n        return throwError(() => new Error('ID de materia no vu00e1lido'));\n      }\n      return this.asignaturaServicio.obtenerAsignatura(materiaId).pipe(switchMap(nuevaAsignatura => {\n        return this.asignaturaServicio.obtenerAsignaturasPorIds(asignaturasRegistradasIds).pipe(switchMap(asignaturasRegistradas => {\n          const profesoresIds = asignaturasRegistradas.map(a => a.profesorId);\n          if (profesoresIds.includes(nuevaAsignatura.profesorId)) {\n            return throwError(() => new Error('No puedes tener más de una asignatura con el mismo profesor'));\n          }\n          const solicitudBackend = {\n            estudianteId: solicitud.estudianteId,\n            nombreEstudiante: solicitud.nombreEstudiante || '',\n            materiaId: solicitud.materiaId || solicitud.asignaturaId,\n            nombreMateria: solicitud.nombreMateria || solicitud.nombreAsignatura || '',\n            fechaRegistro: new Date()\n          };\n          return this.http.post(this.apiUrl, solicitudBackend).pipe(map(respuesta => {\n            if (respuesta && respuesta.exito && respuesta.data) {\n              const item = respuesta.data;\n              // Convertir a formato Inscripcion\n              return {\n                id: item.id,\n                estudianteId: item.estudianteId,\n                nombreEstudiante: item.nombreEstudiante || '',\n                materiaId: item.materiaId,\n                nombreMateria: item.nombreMateria || '',\n                creditos: item.creditos || 0,\n                nombreProfesor: item.nombreProfesor || null,\n                fechaRegistro: item.fechaRegistro ? new Date(item.fechaRegistro).toISOString() : new Date().toISOString()\n              };\n            }\n            throw new Error('Error al registrar la asignatura');\n          }), catchError(error => {\n            console.error('Error al inscribir asignatura:', error);\n            return throwError(() => new Error('Error al inscribir asignatura'));\n          }));\n        }));\n      }));\n    }));\n  }\n  desinscribirAsignatura(inscripcionId) {\n    return this.http.delete(`${this.apiUrl}/${inscripcionId}`).pipe(map(respuesta => {\n      if (respuesta && respuesta.exito) {\n        return respuesta.data;\n      }\n      throw new Error('Error al eliminar la inscripción');\n    }), catchError(error => {\n      console.error('Error al desinscribir asignatura:', error);\n      return throwError(() => new Error('Error al eliminar la inscripción'));\n    }));\n  }\n  obtenerCompaneros(asignaturaId, estudianteId) {\n    return this.http.get(`${this.apiUrl}/materia/${asignaturaId}`).pipe(map(response => {\n      if (response && response.exito && response.data) {\n        return response.data.filter(item => item.estudianteId !== estudianteId).map(item => ({\n          id: item.estudianteId,\n          nombre: item.nombreEstudiante,\n          matricula: '',\n          email: ''\n        }));\n      }\n      return [];\n    }), catchError(error => {\n      console.error('Error al obtener compañeros:', error);\n      return of([]);\n    }));\n  }\n  registrarAsignatura(solicitud) {\n    return this.inscribirAsignatura(solicitud);\n  }\n  puedeAccederSeccionEstudiante() {\n    return this.autenticacionServicio.obtenerUsuarioActual().pipe(map(user => {\n      // Solo los administradores y profesores pueden acceder a la sección de estudiantes\n      return user?.role === 'admin' || user?.role === 'professor';\n    }), catchError(() => of(false)));\n  }\n  obtenerTotalCreditosEstudiante(estudianteId) {\n    return this.obtenerInscripcionesEstudiante(estudianteId).pipe(map(inscripciones => {\n      if (inscripciones.length === 0) {\n        return 0;\n      }\n      // Calcular el total de créditos directamente de las inscripciones\n      return inscripciones.reduce((total, inscripcion) => {\n        // Verificar si la asignatura y sus créditos están definidos\n        const creditos = inscripcion.creditos || 0;\n        return total + creditos;\n      }, 0);\n    }), catchError(error => {\n      console.error('Error al obtener créditos:', error);\n      return of(0);\n    }));\n  }\n  static {\n    this.ɵfac = function InscripcionServicio_Factory(t) {\n      return new (t || InscripcionServicio)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.AsignaturaServicio), i0.ɵɵinject(i3.AutenticacionServicio));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: InscripcionServicio,\n      factory: InscripcionServicio.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"mappings":"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","names":["throwError","of","catchError","map","switchMap","environment","InscripcionServicio","constructor","http","asignaturaServicio","autenticacionServicio","apiUrl","obtenerInscripcionesEstudiante","estudianteId","console","log","get","pipe","respuesta","exito","data","item","id","nombreEstudiante","materiaId","nombreMateria","creditos","nombreProfesor","fechaRegistro","Date","toISOString","error","obtenerInscripcionesAsignatura","asignaturaId","fechaInscripcion","estudiante","nombre","matricula","email","undefined","asignatura","codigo","profesorId","profesor","apellido","departamento","nombreCompleto","obtenerInscripcion","Error","inscribirAsignatura","solicitud","inscripciones","length","MAX_ASIGNATURAS","asignaturasRegistradasIds","i","materiaIdToCheck","includes","solicitudBackend","post","obtenerAsignatura","nuevaAsignatura","obtenerAsignaturasPorIds","asignaturasRegistradas","profesoresIds","a","nombreAsignatura","desinscribirAsignatura","inscripcionId","delete","obtenerCompaneros","response","filter","registrarAsignatura","puedeAccederSeccionEstudiante","obtenerUsuarioActual","user","role","obtenerTotalCreditosEstudiante","reduce","total","inscripcion","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\hansk\\Videos\\frontendsistemacolegio.interrapidisi\\frontendsistemacolegio.interrapidisi\\src\\app\\servicios\\inscripcion.servicio.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable, throwError, forkJoin, of } from 'rxjs';\nimport { catchError, map, switchMap } from 'rxjs/operators';\nimport { Inscripcion, SolicitudInscripcion } from '../modelos/inscripcion.modelo';\nimport { Asignatura } from '../modelos/asignatura.modelo';\nimport { Estudiante } from '../modelos/estudiante.modelo';\nimport { AsignaturaServicio } from './asignatura.servicio';\nimport { AutenticacionServicio } from './autenticacion.servicio';\nimport { environment } from '../../environments/environment';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class InscripcionServicio {\n  private apiUrl = `${environment.apiUrl}/Registros`;\n  private MAX_ASIGNATURAS = 3;\n\n  constructor(\n    private http: HttpClient,\n    private asignaturaServicio: AsignaturaServicio,\n    private autenticacionServicio: AutenticacionServicio\n  ) { }\n\n  obtenerInscripcionesEstudiante(estudianteId: number): Observable<Inscripcion[]> {\n    console.log(estudianteId)\n    return this.http.get<any>(`${this.apiUrl}/estudiante/${estudianteId}`)\n      .pipe(\n        map(respuesta => {\n          if (respuesta && respuesta.exito && respuesta.data) {\n            console.log('Procesando inscripciones del estudiante:', respuesta.data);\n            return respuesta.data.map((item: any) => ({\n              id: item.id,\n              estudianteId: item.estudianteId,\n              nombreEstudiante: item.nombreEstudiante || '',\n              materiaId: item.materiaId,\n              nombreMateria: item.nombreMateria || '',\n              creditos: item.creditos || 0,\n              nombreProfesor: item.nombreProfesor || null,\n              fechaRegistro: item.fechaRegistro ? new Date(item.fechaRegistro).toISOString() : new Date().toISOString()\n            }));\n          }\n          return [];\n        }),\n        catchError(error => {\n          console.error('Error al obtener inscripciones:', error);\n          return of([]);\n        })\n      );\n  }\n\n  obtenerInscripcionesAsignatura(asignaturaId: number): Observable<Inscripcion[]> {\n    return this.http.get<any>(`${this.apiUrl}/materia/${asignaturaId}`)\n      .pipe(\n        map(respuesta => {\n          console.log('Obteniendo inscripciones para la asignatura:', asignaturaId);\n          if (respuesta && respuesta.exito && respuesta.data) {\n            console.log('Datos de inscripciones obtenidos:', respuesta.data);\n            return respuesta.data.map((item: any) => ({\n              id: item.id,\n              estudianteId: item.estudianteId,\n              asignaturaId: item.materiaId,\n              fechaInscripcion: new Date(item.fechaRegistro),\n              estudiante: item.nombreEstudiante ? {\n                id: item.estudianteId,\n                nombre: item.nombreEstudiante,\n                matricula: '',\n                email: ''\n              } : undefined,\n              asignatura: item.nombreMateria ? {\n                id: item.materiaId,\n                nombre: item.nombreMateria,\n                codigo: '',\n                creditos: item.creditos || 0,\n                profesorId: item.profesorId || 0,\n                profesor: item.nombreProfesor ? {\n                  id: item.profesorId || 0,\n                  nombre: item.nombreProfesor,\n                  apellido: '',\n                  email: '',\n                  departamento: '',\n                  nombreCompleto: item.nombreProfesor\n                } : undefined\n              } : undefined\n            }));\n          }\n          return [];\n        }),\n        catchError(error => {\n          console.error('Error al obtener inscripciones de asignatura:', error);\n          return of([]);\n        })\n      );\n  }\n\n  obtenerInscripcion(id: number): Observable<Inscripcion> {\n    return this.http.get<any>(`${this.apiUrl}/${id}`)\n      .pipe(\n        map(respuesta => {\n          if (respuesta && respuesta.exito && respuesta.data) {\n            const item = respuesta.data;\n            return {\n              id: item.id,\n              estudianteId: item.estudianteId,\n              nombreEstudiante: item.nombreEstudiante,\n              materiaId: item.materiaId,\n              nombreMateria: item.nombreMateria,\n              creditos: item.creditos || 0,\n              nombreProfesor: item.nombreProfesor,\n              fechaRegistro: item.fechaRegistro\n            };\n          }\n          throw new Error('Inscripción no encontrada');\n        }),\n        catchError(error => {\n          console.error('Error al obtener inscripción:', error);\n          return throwError(() => new Error('Error al obtener inscripción'));\n        })\n      );\n  }\n\n  inscribirAsignatura(solicitud: SolicitudInscripcion): Observable<Inscripcion> {\n    const estudianteId = solicitud.estudianteId;\n    return this.obtenerInscripcionesEstudiante(estudianteId).pipe(\n      switchMap(inscripciones => {\n        if (inscripciones.length >= this.MAX_ASIGNATURAS) {\n          return throwError(() => new Error('No puedes inscribirte en más de 3 asignaturas'));\n        }\n        const asignaturasRegistradasIds = inscripciones.map(i => i.materiaId);\n        // Usar materiaId si está disponible, de lo contrario usar asignaturaId\n        const materiaIdToCheck = solicitud.materiaId || solicitud.asignaturaId || 0;\n        if (materiaIdToCheck !== 0 && asignaturasRegistradasIds.includes(materiaIdToCheck)) {\n          return throwError(() => new Error('Ya estás inscrito en esta asignatura'));\n        }\n        if (asignaturasRegistradasIds.length === 0) {\n          const solicitudBackend = {\n            estudianteId: solicitud.estudianteId,\n            nombreEstudiante: solicitud.nombreEstudiante || '',\n            materiaId: solicitud.materiaId,\n            nombreMateria: solicitud.nombreMateria || '',\n            creditos: 0,\n            nombreProfesor: null,\n            fechaRegistro: new Date().toISOString()\n          };\n          return this.http.post<any>(this.apiUrl, solicitudBackend)\n            .pipe(\n              map(respuesta => {\n                if (respuesta && respuesta.exito && respuesta.data) {\n                  const item = respuesta.data;\n                  // Convertir a formato Inscripcion\n                  return {\n                    id: item.id,\n                    estudianteId: item.estudianteId,\n                    nombreEstudiante: item.nombreEstudiante || '',\n                    materiaId: item.materiaId,\n                    nombreMateria: item.nombreMateria || '',\n                    creditos: item.creditos || 0,\n                    nombreProfesor: item.nombreProfesor || null,\n                    fechaRegistro: item.fechaRegistro ? new Date(item.fechaRegistro).toISOString() : new Date().toISOString()\n                  };\n                }\n                throw new Error('Error al registrar la asignatura');\n              }),\n              catchError(error => {\n                console.error('Error al inscribir asignatura:', error);\n                return throwError(() => new Error('Error al inscribir asignatura'));\n              })\n            );\n        }\n        const materiaId = solicitud.materiaId || solicitud.asignaturaId || 0;\n        if (materiaId === 0) {\n          return throwError(() => new Error('ID de materia no vu00e1lido'));\n        }\n        return this.asignaturaServicio.obtenerAsignatura(materiaId).pipe(\n          switchMap(nuevaAsignatura => {\n            return this.asignaturaServicio.obtenerAsignaturasPorIds(asignaturasRegistradasIds).pipe(\n              switchMap(asignaturasRegistradas => {\n                const profesoresIds = asignaturasRegistradas.map(a => a.profesorId);\n                if (profesoresIds.includes(nuevaAsignatura.profesorId)) {\n                  return throwError(() => new Error('No puedes tener más de una asignatura con el mismo profesor'));\n                }\n                const solicitudBackend = {\n                  estudianteId: solicitud.estudianteId,\n                  nombreEstudiante: solicitud.nombreEstudiante || '',\n                  materiaId: solicitud.materiaId || solicitud.asignaturaId,\n                  nombreMateria: solicitud.nombreMateria || solicitud.nombreAsignatura || '',\n                  fechaRegistro: new Date()\n                };\n                return this.http.post<any>(this.apiUrl, solicitudBackend)\n                  .pipe(\n                    map(respuesta => {\n                      if (respuesta && respuesta.exito && respuesta.data) {\n                        const item = respuesta.data;\n                        // Convertir a formato Inscripcion\n                        return {\n                          id: item.id,\n                          estudianteId: item.estudianteId,\n                          nombreEstudiante: item.nombreEstudiante || '',\n                          materiaId: item.materiaId,\n                          nombreMateria: item.nombreMateria || '',\n                          creditos: item.creditos || 0,\n                          nombreProfesor: item.nombreProfesor || null,\n                          fechaRegistro: item.fechaRegistro ? new Date(item.fechaRegistro).toISOString() : new Date().toISOString()\n                        };\n                      }\n                      throw new Error('Error al registrar la asignatura');\n                    }),\n                    catchError(error => {\n                      console.error('Error al inscribir asignatura:', error);\n                      return throwError(() => new Error('Error al inscribir asignatura'));\n                    })\n                  );\n              })\n            );\n          })\n        );\n      })\n    );\n  }\n\n  desinscribirAsignatura(inscripcionId: number): Observable<any> {\n    return this.http.delete<any>(`${this.apiUrl}/${inscripcionId}`)\n      .pipe(\n        map(respuesta => {\n          if (respuesta && respuesta.exito) {\n            return respuesta.data;\n          }\n          throw new Error('Error al eliminar la inscripción');\n        }),\n        catchError(error => {\n          console.error('Error al desinscribir asignatura:', error);\n          return throwError(() => new Error('Error al eliminar la inscripción'));\n        })\n      );\n  }\n\n  obtenerCompaneros(asignaturaId: number, estudianteId: number): Observable<Estudiante[]> {\n    return this.http.get<any>(`${this.apiUrl}/materia/${asignaturaId}`)\n      .pipe(\n        map(response => {\n          if (response && response.exito && response.data) {\n            return response.data\n              .filter((item: any) => item.estudianteId !== estudianteId)\n              .map((item: any) => ({\n                id: item.estudianteId,\n                nombre: item.nombreEstudiante,\n                matricula: '',\n                email: ''\n              }));\n          }\n          return [];\n        }),\n        catchError(error => {\n          console.error('Error al obtener compañeros:', error);\n          return of([]);\n        })\n      );\n  }\n\n  registrarAsignatura(solicitud: SolicitudInscripcion): Observable<Inscripcion> {\n    return this.inscribirAsignatura(solicitud);\n  }\n\n  puedeAccederSeccionEstudiante(): Observable<boolean> {\n    return this.autenticacionServicio.obtenerUsuarioActual().pipe(\n      map(user => {\n        // Solo los administradores y profesores pueden acceder a la sección de estudiantes\n        return user?.role === 'admin' || user?.role === 'professor';\n      }),\n      catchError(() => of(false))\n    );\n  }\n\n  obtenerTotalCreditosEstudiante(estudianteId: number): Observable<number> {\n    return this.obtenerInscripcionesEstudiante(estudianteId).pipe(\n      map(inscripciones => {\n        if (inscripciones.length === 0) {\n          return 0;\n        }\n        \n        // Calcular el total de créditos directamente de las inscripciones\n        return inscripciones.reduce((total, inscripcion) => {\n          // Verificar si la asignatura y sus créditos están definidos\n          const creditos = inscripcion.creditos || 0;\n          return total + creditos;\n        }, 0);\n      }),\n      catchError(error => {\n        console.error('Error al obtener créditos:', error);\n        return of(0);\n      })\n    );\n  }\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}