{"ast":null,"code":"import { HttpErrorResponse } from '@angular/common/http';\nimport { throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./auth.service\";\nimport * as i2 from \"@angular/router\";\nexport class AuthInterceptorService {\n  constructor(authService, router) {\n    this.authService = authService;\n    this.router = router;\n    this.isRefreshing = false;\n  }\n  intercept(req, next) {\n    const token = this.authService.getToken();\n    if (!token) {\n      return next.handle(req);\n    }\n    const modifiedReq = this.addTokenHeader(req, token);\n    return next.handle(modifiedReq).pipe(catchError(error => {\n      if (error instanceof HttpErrorResponse && error.status === 401) {\n        // Token expired or invalid\n        this.authService.logout();\n        this.router.navigate(['/login']);\n      }\n      return throwError(() => error);\n    }));\n  }\n  addTokenHeader(request, token) {\n    return request.clone({\n      headers: request.headers.set('Authorization', `Bearer ${token}`)\n    });\n  }\n  static {\n    this.ɵfac = function AuthInterceptorService_Factory(t) {\n      return new (t || AuthInterceptorService)(i0.ɵɵinject(i1.AuthService), i0.ɵɵinject(i2.Router));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthInterceptorService,\n      factory: AuthInterceptorService.ɵfac\n    });\n  }\n}","map":{"version":3,"mappings":"AACA,SAA+DA,iBAAiB,QAAQ,sBAAsB;AAC9G,SAAqBC,UAAU,QAAQ,MAAM;AAC7C,SAASC,UAAU,QAAmB,gBAAgB;;;;AAKtD,OAAM,MAAOC,sBAAsB;EAGjCC,YAAoBC,WAAwB,EAAUC,MAAc;IAAhD,gBAAW,GAAXD,WAAW;IAAuB,WAAM,GAANC,MAAM;IAFpD,iBAAY,GAAG,KAAK;EAE2C;EAEvEC,SAAS,CAACC,GAAqB,EAAEC,IAAiB;IAChD,MAAMC,KAAK,GAAG,IAAI,CAACL,WAAW,CAACM,QAAQ,EAAE;IACzC,IAAI,CAACD,KAAK,EAAE;MACV,OAAOD,IAAI,CAACG,MAAM,CAACJ,GAAG,CAAC;;IAGzB,MAAMK,WAAW,GAAG,IAAI,CAACC,cAAc,CAACN,GAAG,EAAEE,KAAK,CAAC;IAEnD,OAAOD,IAAI,CAACG,MAAM,CAACC,WAAW,CAAC,CAACE,IAAI,CAClCb,UAAU,CAACc,KAAK,IAAG;MACjB,IAAIA,KAAK,YAAYhB,iBAAiB,IAAIgB,KAAK,CAACC,MAAM,KAAK,GAAG,EAAE;QAC9D;QACA,IAAI,CAACZ,WAAW,CAACa,MAAM,EAAE;QACzB,IAAI,CAACZ,MAAM,CAACa,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC;;MAElC,OAAOlB,UAAU,CAAC,MAAMe,KAAK,CAAC;IAChC,CAAC,CAAC,CACH;EACH;EAEQF,cAAc,CAACM,OAAyB,EAAEV,KAAa;IAC7D,OAAOU,OAAO,CAACC,KAAK,CAAC;MACnBC,OAAO,EAAEF,OAAO,CAACE,OAAO,CAACC,GAAG,CAAC,eAAe,EAAE,UAAUb,KAAK,EAAE;KAChE,CAAC;EACJ;;;uBA7BWP,sBAAsB;IAAA;EAAA;;;aAAtBA,sBAAsB;MAAAqB,SAAtBrB,sBAAsB;IAAA;EAAA","names":["HttpErrorResponse","throwError","catchError","AuthInterceptorService","constructor","authService","router","intercept","req","next","token","getToken","handle","modifiedReq","addTokenHeader","pipe","error","status","logout","navigate","request","clone","headers","set","factory"],"sourceRoot":"","sources":["C:\\Users\\hansk\\Videos\\frontendsistemacolegio.interrapidisi\\frontendsistemacolegio.interrapidisi\\src\\app\\services\\auth-interceptor.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpInterceptor, HttpRequest, HttpHandler, HttpEvent, HttpErrorResponse } from '@angular/common/http';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError, switchMap } from 'rxjs/operators';\nimport { AuthService } from './auth.service';\nimport { Router } from '@angular/router';\n\n@Injectable()\nexport class AuthInterceptorService implements HttpInterceptor {\n  private isRefreshing = false;\n\n  constructor(private authService: AuthService, private router: Router) {}\n\n  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n    const token = this.authService.getToken();\n    if (!token) {\n      return next.handle(req);\n    }\n    \n    const modifiedReq = this.addTokenHeader(req, token);\n    \n    return next.handle(modifiedReq).pipe(\n      catchError(error => {\n        if (error instanceof HttpErrorResponse && error.status === 401) {\n          // Token expired or invalid\n          this.authService.logout();\n          this.router.navigate(['/login']);\n        }\n        return throwError(() => error);\n      })\n    );\n  }\n\n  private addTokenHeader(request: HttpRequest<any>, token: string) {\n    return request.clone({\n      headers: request.headers.set('Authorization', `Bearer ${token}`)\n    });\n  }\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}